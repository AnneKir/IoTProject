import { SignalData } from 'simple-peer';
import { ReactElement } from 'react';
import React from 'react';
import { ClientOffer, JoinRequest } from '../';
interface SimplePeerSetupProps {
    children: ReactElement | ReactElement[];
    onJoinResponse: (processJoinResponse: (offer: SignalData, id: string, room: string, roomCreatorId: string) => void) => void;
    onClientOffer: (processClientOffer: (offer: ClientOffer, id: string, isRoomCreator: boolean, emitterId: string) => void) => void;
    onOfferRequest: (processOfferRequest: (request: JoinRequest) => void) => void;
    onLeaving: (processLeaving: (id: string) => void) => void;
    emitOfferResponse: (joinRequest: JoinRequest, signalData: SignalData) => void;
    emitInitiatorOffers: (offers: {
        [key: string]: SignalData;
    }, id: string, room: string) => void;
    emitJoinAck: (signalData: SignalData, room: string, recievedId: string, id: string) => void;
}
export declare class Setup extends React.Component<SimplePeerSetupProps, {}> {
    readonly state: {};
    constructor(props: SimplePeerSetupProps);
    render(): ReactElement<any, string | ((props: any) => ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)>[] | JSX.Element;
}
export {};
