{"version":3,"file":"react-simple-peer.cjs.development.js","sources":["../src/Commands/getSignalData.ts","../src/Commands/processOfferRequest.ts","../src/state.ts","../src/Components/JoinRoomButton.tsx","../src/Commands/Tools/parse.ts","../src/Commands/Tools/send.ts","../src/Commands/handlePeerConnection.ts","../src/Commands/createExistingPeersOffers.ts","../src/Commands/openConnectionAsInitiator.ts","../src/Commands/syncModelData.ts","../src/Commands/processJoinResponse.ts","../src/Commands/processClientOffer.ts","../src/Commands/InitiatorOffer.ts","../src/Commands/nonInitiatorOffer.ts","../src/Commands/tellHimToRetry.ts","../src/Commands/retry.ts","../src/Components/Setup.tsx","../src/Components/Peers.tsx","../src/Utils/status.ts","../src/Components/State.tsx","../src/Components/PeerVideo.tsx","../src/Models/ClientOffer.ts","../src/Models/JoinRequest.ts","../src/index.tsx"],"sourcesContent":["import { Instance, SignalData } from 'simple-peer';\n\nexport async function getSignalData(peerConnection: Instance) {\n  return new Promise<SignalData>((resolve, reject) => {\n    try {\n      if (peerConnection) peerConnection.on('signal', data => resolve(data));\n    } catch (e) {\n      reject(e);\n    }\n  });\n}\n","import freeice from 'freeice';\nimport {\n  JoinRequest,\n  ReactSimplePeerState,\n  ReactSimplePeerStatusState,\n  Status,\n} from '../';\nimport SimplePeer, { Options } from 'simple-peer';\nimport { getSignalData } from '../Commands/getSignalData';\n\nexport async function processOfferRequest(request: JoinRequest) {\n  let state = ReactSimplePeerState.value;\n\n  if (ReactSimplePeerStatusState.value !== Status.IDLE) {\n    state.joinRequests.stack(request);\n    ReactSimplePeerState.next(state);\n    return;\n  }\n\n  ReactSimplePeerStatusState.next(Status.EMITTING_OFFER);\n\n  let config: Options = {\n    initiator: true,\n    trickle: false,\n    config: { iceServers: freeice() },\n  };\n\n  if (state.model.stream) {\n    config.stream = state.model.stream;\n  }\n\n  state.peerConnection = new SimplePeer(config);\n\n  state.peerConnection.on('stream', async (stream: Promise<MediaStream>) => {\n    let localState = ReactSimplePeerState.value;\n    if (localState.connections.get(request.peerId)) {\n      let connection = localState.connections.get(request.peerId)!;\n      connection.model.stream = await stream;\n      localState.connections.set(request.peerId, connection);\n      ReactSimplePeerState.next(localState);\n    }\n  });\n\n  state.signalData = await getSignalData(state.peerConnection);\n\n  state.emitOfferResponse(request, state.signalData);\n\n  ReactSimplePeerState.next(state);\n}\n","import uid from 'uid-safe';\nimport { ReactSimplePeerModel } from 'Models/react-simple-peer.model';\nimport SimplePeer from 'simple-peer';\nimport { Stack } from 'typed-structures';\nimport { JoinRequest } from 'Models/JoinRequest';\nimport { ClientOffer } from 'Models/ClientOffer';\n\nexport const initState = {\n  id: uid.sync(15),\n  peers: {},\n  // Room assignment left to createRoom implementation\n  // Since users may want to base it on something business related\n  room: null,\n  roomCreatorId: null,\n  signalData: {},\n  connections: new Map<string, { model: ReactSimplePeerModel; peers: [] }>(),\n  peerConnection: new SimplePeer(),\n  commands: new Map<string, Function>(),\n  model: { connection: new SimplePeer(), stream: null },\n  joinRequests: new Stack<JoinRequest>(),\n  clientOffers: new Stack<[ClientOffer, string, boolean, string]>(),\n  emitJoinRequest: () => {},\n  emitOfferResponse: () => {},\n  emitInitiatorOffers: () => {},\n  emitJoinAck: () => {},\n};\n","import React from 'react';\nimport { ReactElement } from 'react';\nimport { ReactSimplePeerState, setRoom } from '../';\nimport filterReactProps from 'filter-react-props';\n\ninterface SimplePeerReactJoinRoomButtonProps {\n  children: ReactElement;\n  room: string;\n  join: () => void;\n  className: string;\n}\n\nexport class JoinRoomButton extends React.Component<\n  SimplePeerReactJoinRoomButtonProps &\n    React.DetailedHTMLProps<\n      React.ButtonHTMLAttributes<HTMLButtonElement>,\n      HTMLButtonElement\n    >,\n  {}\n> {\n  readonly state = {};\n\n  componentDidMount(): void {\n    let state = ReactSimplePeerState.value;\n    state.emitJoinRequest = this.props.join;\n    ReactSimplePeerState.next(state);\n  }\n\n  render() {\n    let { join, children, room, onClick } = this.props;\n    return (\n      <button\n        {...filterReactProps(this.props)}\n        onClick={e => {\n          setRoom(room);\n          join();\n          if (onClick) {\n            onClick(e);\n          }\n        }}\n      >\n        {children}\n      </button>\n    );\n  }\n}\n","import { IReactSimplePeerState } from '../../';\n\nexport function parse(data: string, state: IReactSimplePeerState) {\n  const senderId: string = data.substr(0, 20);\n  const command: string = data.substr(20, 20);\n\n  if (state.commands.get(command)) {\n    try {\n      state.commands.get(command)!(senderId, data.substr(40), state);\n    } catch (e) {\n      console.warn(e);\n    }\n  }\n\n  return senderId;\n}\n","import { Instance } from 'simple-peer';\nimport { ReactSimplePeerState } from '../..';\nimport { deflate_encode_raw } from 'wasm-flate';\n\nexport async function send(\n  pc: Instance,\n  command: string,\n  data?: string | ArrayBuffer | null\n) {\n  try {\n    pc.send(\n      deflate_encode_raw(\n        new Uint8Array(\n          Buffer.from(`${ReactSimplePeerState.value.id}${command}${data}`)\n        )\n      )\n    );\n    return true;\n  } catch (e) {\n    console.warn(\n      'An error occurred when trying to send data to peer: Failed to reach peer'\n    );\n    return false;\n  }\n}\n","import { Instance } from 'simple-peer';\nimport { ReactSimplePeerState, ReactSimplePeerStatusState } from '../';\nimport { Status } from '../';\nimport { parse } from '../Commands/Tools/parse';\nimport { send } from '../Commands/Tools/send';\nimport { deflate_decode_raw } from 'wasm-flate';\n\nexport function handlePeerConnection(\n  pc: Instance,\n  openConnectionAsInitiator: boolean\n) {\n  pc.on('connect', async () => {\n    if (openConnectionAsInitiator) {\n      await send(\n        pc,\n        'OPEN_CNTS_AS_INIT___',\n        JSON.stringify(ReactSimplePeerState.value.peers)\n      );\n    }\n    let state = ReactSimplePeerState.value;\n    let model = state.model;\n    let peers = Array.from(state.connections.keys());\n    await send(\n      pc,\n      'SYNC_MODEL_DATA_____',\n      JSON.stringify({ model: model, peers: peers })\n    );\n  });\n\n  pc.on('data', data => {\n    if (\n      !(pc as any).initiator &&\n      ReactSimplePeerState.value.connections.size === 0\n    ) {\n      ReactSimplePeerStatusState.next(Status.CONNECTING_TO_EXISTING_PEERS);\n    }\n\n    parse(\n      new TextDecoder('utf-8').decode(deflate_decode_raw(data)),\n      ReactSimplePeerState.value\n    );\n\n    ReactSimplePeerState.next(ReactSimplePeerState.value);\n  });\n}\n","import { IReactSimplePeerState } from '../';\nimport SimplePeer, { SignalData, Options } from 'simple-peer';\nimport freeice from 'freeice';\nimport { getSignalData } from '../Commands/getSignalData';\nimport { ReactSimplePeerState } from '../';\nimport { handlePeerConnection } from '../Commands/handlePeerConnection';\n\nexport async function createExistingPeersOffers(\n  peers: { [key: string]: any },\n  state: IReactSimplePeerState\n) {\n  return Object.fromEntries(\n    await Promise.all(\n      Object.entries(peers)\n        .filter((set: [string, string]) => set[0] !== state.id)\n        .map(async (set: [string, SignalData]) => {\n          let config: Options = {\n            initiator: true,\n            trickle: false,\n            config: { iceServers: freeice() },\n          };\n\n          if (state.model.stream) {\n            config.stream = state.model.stream;\n          }\n\n          let pc = new SimplePeer(config);\n\n          handlePeerConnection(pc, false);\n\n          pc.on('stream', async (stream: Promise<MediaStream>) => {\n            if (state.connections.get(set[0])) {\n              state.connections.get(set[0])!.model.stream = await stream;\n            }\n          });\n\n          let signalData = await getSignalData(pc);\n          set.splice(1, 1, signalData);\n\n          let connection = state.connections.get(set[0]);\n          state.connections.set(\n            set[0],\n            connection || { model: { connection: pc, stream: null }, peers: [] }\n          );\n          ReactSimplePeerState.next(state);\n\n          return set;\n        })\n    )\n  );\n}\n","import { IReactSimplePeerState } from '../';\nimport { SignalData } from 'simple-peer';\nimport { createExistingPeersOffers } from './createExistingPeersOffers';\n\nexport async function openConnectionsAsInitiator(\n  _: string,\n  data: string,\n  state: IReactSimplePeerState\n) {\n  const peers = JSON.parse(data);\n\n  if (Object.entries(peers).length) {\n    const offers: {\n      [key: string]: SignalData;\n    } = await createExistingPeersOffers(peers, state);\n    state.emitInitiatorOffers(offers, state.id, state.room!);\n  }\n}\n","import { IReactSimplePeerState } from '../';\nimport { ReactSimplePeerState } from '../';\n\nexport function syncModelData(\n  senderId: string,\n  data: string,\n  state: IReactSimplePeerState\n) {\n  if (state.connections.get(senderId)) {\n    let syncData = JSON.parse(data);\n\n    let model = state.connections.get(senderId)!.model;\n\n    state.connections.set(senderId, {\n      peers: syncData.peers,\n      model: {\n        ...syncData.model,\n        connection: model.connection,\n        stream: model.stream,\n      },\n    });\n\n    ReactSimplePeerState.next(state);\n  }\n}\n","import freeice from 'freeice';\nimport SimplePeer, { SignalData, Options } from 'simple-peer';\nimport { ReactSimplePeerState, ReactSimplePeerStatusState } from '../';\nimport { Status } from '../';\nimport { getSignalData } from '../Commands/getSignalData';\nimport { handlePeerConnection } from './handlePeerConnection';\n\nexport async function processJoinResponse(\n  offer: SignalData,\n  id: string,\n  room: string\n) {\n  let state = ReactSimplePeerState.value;\n\n  if (state.connections.size === 0) {\n    ReactSimplePeerStatusState.next(Status.RECEIVING_RESPONSE_ACCESS);\n  }\n\n  let config: Options = {\n    initiator: false,\n    trickle: false,\n    config: { iceServers: freeice() },\n  };\n\n  if (state.model.stream) {\n    config.stream = state.model.stream;\n  }\n\n  state.peerConnection = new SimplePeer(config);\n\n  state.peerConnection.on('stream', (stream: MediaStream) => {\n    if (id) {\n      state.connections.set(id, {\n        model: { connection: state.peerConnection, stream },\n        peers: [],\n      });\n    }\n  });\n\n  state.peerConnection.signal(offer);\n  const signalData = await getSignalData(state.peerConnection);\n\n  if (state.connections.size === 0) {\n    ReactSimplePeerStatusState.next(Status.JOINING_SESSION);\n  }\n\n  state.emitJoinAck(signalData, room, id, state.id);\n\n  handlePeerConnection(state.peerConnection, false);\n\n  ReactSimplePeerState.next(state);\n}\n","import {\n  ClientOffer,\n  ReactSimplePeerState,\n  ReactSimplePeerStatusState,\n  Status,\n} from '../';\nimport { handlePeerConnection } from './handlePeerConnection';\nimport { send } from '../Commands/Tools/send';\n\nexport function processClientOffer(\n  data: ClientOffer,\n  id: string,\n  roomCreator: boolean,\n  emitterPeerId: string\n) {\n  let state = ReactSimplePeerState.value;\n\n  if (roomCreator) {\n    handlePeerConnection(state.peerConnection, true);\n    let connection = state.connections.get(emitterPeerId);\n    state.connections.set(\n      emitterPeerId,\n      connection || {\n        model: { connection: state.peerConnection, stream: null },\n        peers: [],\n      }\n    );\n    ReactSimplePeerState.next(state);\n  }\n\n  if (id && state.connections.get(emitterPeerId)) {\n    const peerConnection = state.connections.get(emitterPeerId);\n    handlePeerConnection(peerConnection!.model.connection, false);\n    state.peerConnection = peerConnection!.model.connection;\n    ReactSimplePeerState.next(state);\n  }\n\n  let retry = async () => {\n    let relayPeer = Array.from(\n      ReactSimplePeerState.value.connections.values()\n    ).find(peer => {\n      return peer.peers.includes(emitterPeerId);\n    });\n\n    if (\n      !relayPeer ||\n      (relayPeer &&\n        !(await send(\n          relayPeer.model.connection,\n          'TELL_HIM_TO_RETRY___',\n          emitterPeerId\n        )))\n    ) {\n      setTimeout(async () => await retry(), Math.ceil(Math.random() * 1000));\n    }\n  };\n\n  state.peerConnection.on('error', async (e: any) => {\n    if (e.code === 'ERR_SET_REMOTE_DESCRIPTION') {\n      console.warn(\n        'Encountered an error while trying to signal incoming offer, retrying'\n      );\n      setTimeout(async () => await retry(), Math.ceil(Math.random() * 1000));\n      return;\n    }\n  });\n\n  state.peerConnection.signal(data.offer);\n  state.peers = data.peers;\n\n  ReactSimplePeerStatusState.next(Status.IDLE);\n\n  ReactSimplePeerState.next(state);\n}\n","import { IReactSimplePeerState } from '../.';\nimport SimplePeer, { Options } from 'simple-peer';\nimport freeice from 'freeice';\nimport { getSignalData } from './getSignalData';\nimport { handlePeerConnection } from './handlePeerConnection';\nimport { send } from './Tools/send';\n\nexport async function initiatorOffer(\n  _: string,\n  str: string,\n  state: IReactSimplePeerState\n) {\n  const data = JSON.parse(str);\n  const offer = JSON.parse(data.offer);\n  const id = data.id;\n\n  let config: Options = {\n    initiator: false,\n    trickle: false,\n    config: { iceServers: freeice() },\n  };\n\n  if (state.model.stream) {\n    config.stream = state.model.stream;\n  }\n\n  const peerConnection = new SimplePeer(config);\n\n  peerConnection.signal(offer);\n  const signalData = await getSignalData(state.peerConnection);\n\n  send(\n    peerConnection,\n    'NON_INITIATOR_OFFER_',\n    JSON.stringify({ id: state.id, offer: signalData })\n  );\n\n  handlePeerConnection(peerConnection, false);\n\n  let connection = state.connections.get(id);\n  state.connections.set(\n    id,\n    connection || {\n      model: { connection: peerConnection, stream: null },\n      peers: [],\n    }\n  );\n}\n","import { IReactSimplePeerState, ReactSimplePeerState } from '../.';\nimport { handlePeerConnection } from './handlePeerConnection';\n\nexport async function nonInitiatorOffer(\n  _: string,\n  str: string,\n  state: IReactSimplePeerState\n) {\n  const data = JSON.parse(str);\n  const offer = data.offer;\n  const id = data.id;\n\n  handlePeerConnection(state.peerConnection, true);\n  let connection = state.connections.get(id);\n  state.connections.set(\n    id,\n    connection || {\n      model: { connection: state.peerConnection, stream: null },\n      peers: [],\n    }\n  );\n\n  state.peerConnection.signal(offer);\n\n  ReactSimplePeerState.next(state);\n}\n","import { IReactSimplePeerState } from '../';\nimport { send } from './Tools/send';\n\nexport async function tellHimToRetry(\n  _: string,\n  data: string,\n  state: IReactSimplePeerState\n) {\n  let target = state.connections.get(data);\n\n  if (target) {\n    await send(target.model.connection, 'RETRY_______________');\n  }\n}\n","import { IReactSimplePeerState } from '../';\nimport { ReactSimplePeerState } from '../';\nimport { initState } from '../state';\n\nexport function retry(_: string, _1: string, state: IReactSimplePeerState) {\n  ReactSimplePeerState.next(initState);\n  setTimeout(() => state.emitJoinRequest(), Math.ceil(Math.random() * 1000));\n}\n","import { SignalData } from 'simple-peer';\nimport { ReactElement } from 'react';\nimport React from 'react';\nimport { ClientOffer, JoinRequest, ReactSimplePeerState } from '../';\nimport { openConnectionsAsInitiator } from '../Commands/openConnectionAsInitiator';\nimport { syncModelData } from '../Commands/syncModelData';\nimport { processOfferRequest } from '../Commands/processOfferRequest';\nimport { processJoinResponse } from '../Commands/processJoinResponse';\nimport { processClientOffer } from '../Commands/processClientOffer';\nimport { initiatorOffer } from '../Commands/InitiatorOffer';\nimport { nonInitiatorOffer } from '../Commands/nonInitiatorOffer';\nimport { tellHimToRetry } from '../Commands/tellHimToRetry';\nimport { retry } from '../Commands/retry';\n\ninterface SimplePeerSetupProps {\n  children: ReactElement | ReactElement[];\n  onJoinResponse: (\n    processJoinResponse: (\n      offer: SignalData,\n      id: string,\n      room: string,\n      roomCreatorId: string\n    ) => void\n  ) => void;\n  onClientOffer: (\n    processClientOffer: (\n      offer: ClientOffer,\n      id: string,\n      isRoomCreator: boolean,\n      emitterId: string\n    ) => void\n  ) => void;\n  onOfferRequest: (processOfferRequest: (request: JoinRequest) => void) => void;\n  onLeaving: (processLeaving: (id: string) => void) => void;\n  emitOfferResponse: (joinRequest: JoinRequest, signalData: SignalData) => void;\n  emitInitiatorOffers: (\n    offers: { [key: string]: SignalData },\n    id: string,\n    room: string\n  ) => void;\n  emitJoinAck: (\n    signalData: SignalData,\n    room: string,\n    recievedId: string,\n    id: string\n  ) => void;\n}\n\nexport class Setup extends React.Component<SimplePeerSetupProps, {}> {\n  readonly state = {};\n\n  constructor(props: SimplePeerSetupProps) {\n    super(props);\n\n    const {\n      onJoinResponse,\n      onClientOffer,\n      onOfferRequest,\n      onLeaving,\n      emitOfferResponse,\n      emitInitiatorOffers,\n      emitJoinAck,\n    } = this.props;\n    let state = ReactSimplePeerState.value;\n\n    state.commands.set('OPEN_CNTS_AS_INIT___', openConnectionsAsInitiator);\n    state.commands.set('SYNC_MODEL_DATA_____', syncModelData);\n    state.commands.set('INITIATOR_OFFER_____', initiatorOffer);\n    state.commands.set('NON_INITIATOR_OFFER_', nonInitiatorOffer);\n    state.commands.set('TELL_HIM_TO_RETRY___', tellHimToRetry);\n    state.commands.set('RETRY_______________', retry);\n\n    state.emitOfferResponse = emitOfferResponse;\n    state.emitInitiatorOffers = emitInitiatorOffers;\n    state.emitJoinAck = emitJoinAck;\n\n    onOfferRequest(processOfferRequest);\n    onJoinResponse(processJoinResponse);\n    onClientOffer(processClientOffer);\n    onLeaving(() => console.log('TODO: Implement processLeaving'));\n\n    ReactSimplePeerState.next(state);\n  }\n\n  render() {\n    return this.props.children || <></>;\n  }\n}\n","import React, { ReactElement } from 'react';\nimport { ReactSimplePeerModel, ReactSimplePeerState } from '../index';\n\ninterface PeersProps {\n  children: (\n    connections: ReactSimplePeerModel[]\n  ) => void | ReactElement | ReactElement[];\n}\n\ninterface PeersState {\n  connections: ReactSimplePeerModel[];\n}\n\nexport class Peers extends React.Component<PeersProps, PeersState> {\n  readonly state = {\n    connections: [],\n  };\n\n  componentDidMount(): void {\n    ReactSimplePeerState.subscribe(state => {\n      this.setState({\n        connections: Array.from(state.connections).map(set => set[1].model),\n      });\n    });\n  }\n\n  render() {\n    const { children } = this.props;\n    return children(this.state.connections) || <></>;\n  }\n}\n","export const ReactSimplePeerStatus: { [key: string]: string } = {\n  IDLE: 'Waiting for peers',\n  EMITTING_OFFER: 'Emitting offer',\n  REQUESTING_ACCESS: 'Requesting access',\n  RECEIVING_RESPONSE_ACCESS: 'Receiving response access',\n  CONNECTING_TO_EXISTING_PEERS: 'Connecting to existing peers',\n  JOINING_SESSION: 'Joining session',\n};\n","import React from 'react';\nimport { ReactSimplePeerStatusState } from '../';\nimport { ReactSimplePeerStatus } from '../Utils/status';\n\ninterface SimplePeerReactStateTooltipProps {}\n\ninterface SimplePeerReactStateTooltipState {\n  value: string;\n}\n\nexport class State extends React.Component<\n  SimplePeerReactStateTooltipProps,\n  SimplePeerReactStateTooltipState\n> {\n  readonly state = {\n    value: '',\n  };\n\n  componentDidMount(): void {\n    ReactSimplePeerStatusState.subscribe(async status => {\n      this.setState({ value: ReactSimplePeerStatus[status] });\n    });\n  }\n\n  render() {\n    return <>{this.state.value}</>;\n  }\n}\n","import React from 'react';\nimport { ReactSimplePeerModel } from '../';\nimport filterReactProps from 'filter-react-props';\n\ninterface PeerVideoProps {\n  peer: ReactSimplePeerModel;\n}\n\ninterface PeerVideoState {\n  stream: MediaStream | null;\n}\n\nexport class PeerVideo extends React.Component<\n  PeerVideoProps &\n    React.DetailedHTMLProps<\n      React.VideoHTMLAttributes<HTMLVideoElement>,\n      HTMLVideoElement\n    >,\n  PeerVideoState\n> {\n  readonly state = {\n    stream: null,\n  };\n  private video: HTMLVideoElement = document.createElement('video');\n\n  async componentDidUpdate() {\n    this.video.srcObject = await this.props.peer.stream;\n  }\n\n  render() {\n    return (\n      <video\n        {...filterReactProps(this.props)}\n        autoPlay={true}\n        muted={true}\n        ref={(video: HTMLVideoElement) => {\n          this.video = video;\n        }}\n      />\n    );\n  }\n}\n","import { SignalData } from 'simple-peer';\n\nexport class ClientOffer {\n  public offer: SignalData;\n  public peers: { [key: string]: string };\n\n  constructor(offer: SignalData, peers: { [p: string]: string }) {\n    this.offer = offer;\n    this.peers = peers;\n  }\n}\n","export class JoinRequest {\n  public roomId: string;\n  public peerId: string;\n\n  constructor(roomId: string, peerId: string) {\n    this.roomId = roomId;\n    this.peerId = peerId;\n  }\n}\n","import { BehaviorSubject } from 'rxjs';\nimport SimplePeer from 'simple-peer';\nimport { ReactSimplePeerModel } from 'Models/react-simple-peer.model';\nimport { Instance, SignalData } from 'simple-peer';\nimport { JoinRequest } from 'Models/JoinRequest';\nimport { Stack } from 'typed-structures/dist';\nimport { processOfferRequest } from './Commands/processOfferRequest';\nimport { ClientOffer } from 'Models/ClientOffer';\nimport { initState } from './state';\n\nexport { ReactSimplePeerModel } from './Models/react-simple-peer.model';\nexport { JoinRoomButton } from './Components/JoinRoomButton';\nexport { Setup } from './Components/Setup';\nexport { Peers } from './Components/Peers';\nexport { State } from './Components/State';\nexport { PeerVideo } from './Components/PeerVideo';\nexport { ClientOffer } from './Models/ClientOffer';\nexport { JoinRequest } from './Models/JoinRequest';\n\nexport enum Status {\n  IDLE = 'IDLE',\n  EMITTING_OFFER = 'EMITTING_OFFER',\n  REQUESTING_ACCESS = 'REQUESTING_ACCESS',\n  RECEIVING_RESPONSE_ACCESS = 'RECEIVING_RESPONSE_ACCESS',\n  CONNECTING_TO_EXISTING_PEERS = 'CONNECTING_TO_EXISTING_PEERS',\n  JOINING_SESSION = 'JOINING_SESSION',\n}\n\nexport interface IReactSimplePeerState {\n  // State of variables used by connection logic\n  peers: { [key: string]: string };\n  id: string;\n  room: string | null;\n  roomCreatorId: string | null;\n  signalData: SimplePeer.SignalData;\n  connections: Map<string, { model: ReactSimplePeerModel; peers: string[] }>;\n  peerConnection: Instance;\n  commands: Map<string, Function>;\n  model: ReactSimplePeerModel;\n  joinRequests: Stack<JoinRequest>;\n  clientOffers: Stack<[ClientOffer, string, boolean, string]>;\n\n  // Storage of called Functions\n  emitJoinRequest: () => void;\n  emitOfferResponse: (joinRequest: JoinRequest, signalData: SignalData) => void;\n  emitInitiatorOffers: (\n    offers: { [key: string]: SignalData },\n    id: string,\n    room: string\n  ) => void;\n  emitJoinAck: (\n    signalData: SignalData,\n    room: string,\n    receivedId: string,\n    id: string\n  ) => void;\n}\n\nexport const ReactSimplePeerStatusState = new BehaviorSubject<Status>(\n  Status.IDLE\n);\nexport const ReactSimplePeerState = new BehaviorSubject<IReactSimplePeerState>(\n  initState\n);\n\nexport function setModel(model: ReactSimplePeerModel) {\n  let state = ReactSimplePeerState.value;\n  state.model = model;\n  ReactSimplePeerState.next(state);\n}\n\nexport function setRoom(room: string) {\n  let state = ReactSimplePeerState.value;\n  state.room = room;\n  ReactSimplePeerState.next(state);\n}\n\nexport function getId() {\n  return ReactSimplePeerState.value.id;\n}\n\nReactSimplePeerStatusState.subscribe(async status => {\n  if (\n    status === Status.IDLE &&\n    ReactSimplePeerState.value.joinRequests.length()\n  ) {\n    let state = ReactSimplePeerState.value;\n    console.log(state.joinRequests.length());\n    let joinRequest = state.joinRequests.unstack();\n    console.log(state.joinRequests.length());\n    ReactSimplePeerState.next(state);\n    setTimeout(\n      async () => await processOfferRequest(joinRequest),\n      Math.ceil(Math.random() * 1000)\n    );\n  }\n});\n"],"names":["getSignalData","peerConnection","Promise","resolve","reject","on","data","e","processOfferRequest","request","state","ReactSimplePeerState","value","ReactSimplePeerStatusState","Status","IDLE","joinRequests","stack","next","EMITTING_OFFER","config","initiator","trickle","iceServers","freeice","model","stream","SimplePeer","localState","connections","get","peerId","connection","set","signalData","emitOfferResponse","initState","id","uid","sync","peers","room","roomCreatorId","Map","commands","Stack","clientOffers","emitJoinRequest","emitInitiatorOffers","emitJoinAck","JoinRoomButton","componentDidMount","props","join","render","children","onClick","React","filterReactProps","setRoom","Component","parse","senderId","substr","command","console","warn","send","pc","deflate_encode_raw","Uint8Array","Buffer","from","handlePeerConnection","openConnectionAsInitiator","Array","keys","JSON","stringify","size","CONNECTING_TO_EXISTING_PEERS","TextDecoder","decode","deflate_decode_raw","createExistingPeersOffers","all","Object","entries","filter","map","splice","fromEntries","openConnectionsAsInitiator","_","length","offers","syncModelData","syncData","processJoinResponse","offer","RECEIVING_RESPONSE_ACCESS","signal","JOINING_SESSION","processClientOffer","roomCreator","emitterPeerId","retry","relayPeer","setTimeout","Math","ceil","random","values","find","peer","includes","code","initiatorOffer","str","nonInitiatorOffer","tellHimToRetry","target","_1","Setup","onJoinResponse","onClientOffer","onOfferRequest","onLeaving","log","Peers","subscribe","setState","ReactSimplePeerStatus","REQUESTING_ACCESS","State","status","PeerVideo","document","createElement","componentDidUpdate","video","srcObject","autoPlay","muted","ref","ClientOffer","JoinRequest","roomId","BehaviorSubject","setModel","getId","joinRequest","unstack"],"mappings":"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"}