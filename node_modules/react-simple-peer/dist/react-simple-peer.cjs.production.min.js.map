{"version":3,"file":"react-simple-peer.cjs.production.min.js","sources":["../src/Commands/getSignalData.ts","../src/Commands/processOfferRequest.ts","../src/state.ts","../src/Components/JoinRoomButton.tsx","../src/Commands/Tools/send.ts","../src/Commands/handlePeerConnection.ts","../src/Commands/Tools/parse.ts","../src/Commands/openConnectionAsInitiator.ts","../src/Commands/createExistingPeersOffers.ts","../src/Commands/syncModelData.ts","../src/Commands/processJoinResponse.ts","../src/Commands/processClientOffer.ts","../src/Commands/InitiatorOffer.ts","../src/Commands/nonInitiatorOffer.ts","../src/Commands/tellHimToRetry.ts","../src/Commands/retry.ts","../src/index.tsx","../src/Components/Setup.tsx","../src/Components/Peers.tsx","../src/Utils/status.ts","../src/Components/State.tsx","../src/Components/PeerVideo.tsx","../src/Models/ClientOffer.ts","../src/Models/JoinRequest.ts"],"sourcesContent":["import { Instance, SignalData } from 'simple-peer';\n\nexport async function getSignalData(peerConnection: Instance) {\n  return new Promise<SignalData>((resolve, reject) => {\n    try {\n      if (peerConnection) peerConnection.on('signal', data => resolve(data));\n    } catch (e) {\n      reject(e);\n    }\n  });\n}\n","import freeice from 'freeice';\nimport {\n  JoinRequest,\n  ReactSimplePeerState,\n  ReactSimplePeerStatusState,\n  Status,\n} from '../';\nimport SimplePeer, { Options } from 'simple-peer';\nimport { getSignalData } from '../Commands/getSignalData';\n\nexport async function processOfferRequest(request: JoinRequest) {\n  let state = ReactSimplePeerState.value;\n\n  if (ReactSimplePeerStatusState.value !== Status.IDLE) {\n    state.joinRequests.stack(request);\n    ReactSimplePeerState.next(state);\n    return;\n  }\n\n  ReactSimplePeerStatusState.next(Status.EMITTING_OFFER);\n\n  let config: Options = {\n    initiator: true,\n    trickle: false,\n    config: { iceServers: freeice() },\n  };\n\n  if (state.model.stream) {\n    config.stream = state.model.stream;\n  }\n\n  state.peerConnection = new SimplePeer(config);\n\n  state.peerConnection.on('stream', async (stream: Promise<MediaStream>) => {\n    let localState = ReactSimplePeerState.value;\n    if (localState.connections.get(request.peerId)) {\n      let connection = localState.connections.get(request.peerId)!;\n      connection.model.stream = await stream;\n      localState.connections.set(request.peerId, connection);\n      ReactSimplePeerState.next(localState);\n    }\n  });\n\n  state.signalData = await getSignalData(state.peerConnection);\n\n  state.emitOfferResponse(request, state.signalData);\n\n  ReactSimplePeerState.next(state);\n}\n","import uid from 'uid-safe';\nimport { ReactSimplePeerModel } from 'Models/react-simple-peer.model';\nimport SimplePeer from 'simple-peer';\nimport { Stack } from 'typed-structures';\nimport { JoinRequest } from 'Models/JoinRequest';\nimport { ClientOffer } from 'Models/ClientOffer';\n\nexport const initState = {\n  id: uid.sync(15),\n  peers: {},\n  // Room assignment left to createRoom implementation\n  // Since users may want to base it on something business related\n  room: null,\n  roomCreatorId: null,\n  signalData: {},\n  connections: new Map<string, { model: ReactSimplePeerModel; peers: [] }>(),\n  peerConnection: new SimplePeer(),\n  commands: new Map<string, Function>(),\n  model: { connection: new SimplePeer(), stream: null },\n  joinRequests: new Stack<JoinRequest>(),\n  clientOffers: new Stack<[ClientOffer, string, boolean, string]>(),\n  emitJoinRequest: () => {},\n  emitOfferResponse: () => {},\n  emitInitiatorOffers: () => {},\n  emitJoinAck: () => {},\n};\n","import React from 'react';\nimport { ReactElement } from 'react';\nimport { ReactSimplePeerState, setRoom } from '../';\nimport filterReactProps from 'filter-react-props';\n\ninterface SimplePeerReactJoinRoomButtonProps {\n  children: ReactElement;\n  room: string;\n  join: () => void;\n  className: string;\n}\n\nexport class JoinRoomButton extends React.Component<\n  SimplePeerReactJoinRoomButtonProps &\n    React.DetailedHTMLProps<\n      React.ButtonHTMLAttributes<HTMLButtonElement>,\n      HTMLButtonElement\n    >,\n  {}\n> {\n  readonly state = {};\n\n  componentDidMount(): void {\n    let state = ReactSimplePeerState.value;\n    state.emitJoinRequest = this.props.join;\n    ReactSimplePeerState.next(state);\n  }\n\n  render() {\n    let { join, children, room, onClick } = this.props;\n    return (\n      <button\n        {...filterReactProps(this.props)}\n        onClick={e => {\n          setRoom(room);\n          join();\n          if (onClick) {\n            onClick(e);\n          }\n        }}\n      >\n        {children}\n      </button>\n    );\n  }\n}\n","import { Instance } from 'simple-peer';\nimport { ReactSimplePeerState } from '../..';\nimport { deflate_encode_raw } from 'wasm-flate';\n\nexport async function send(\n  pc: Instance,\n  command: string,\n  data?: string | ArrayBuffer | null\n) {\n  try {\n    pc.send(\n      deflate_encode_raw(\n        new Uint8Array(\n          Buffer.from(`${ReactSimplePeerState.value.id}${command}${data}`)\n        )\n      )\n    );\n    return true;\n  } catch (e) {\n    console.warn(\n      'An error occurred when trying to send data to peer: Failed to reach peer'\n    );\n    return false;\n  }\n}\n","import { Instance } from 'simple-peer';\nimport { ReactSimplePeerState, ReactSimplePeerStatusState } from '../';\nimport { Status } from '../';\nimport { parse } from '../Commands/Tools/parse';\nimport { send } from '../Commands/Tools/send';\nimport { deflate_decode_raw } from 'wasm-flate';\n\nexport function handlePeerConnection(\n  pc: Instance,\n  openConnectionAsInitiator: boolean\n) {\n  pc.on('connect', async () => {\n    if (openConnectionAsInitiator) {\n      await send(\n        pc,\n        'OPEN_CNTS_AS_INIT___',\n        JSON.stringify(ReactSimplePeerState.value.peers)\n      );\n    }\n    let state = ReactSimplePeerState.value;\n    let model = state.model;\n    let peers = Array.from(state.connections.keys());\n    await send(\n      pc,\n      'SYNC_MODEL_DATA_____',\n      JSON.stringify({ model: model, peers: peers })\n    );\n  });\n\n  pc.on('data', data => {\n    if (\n      !(pc as any).initiator &&\n      ReactSimplePeerState.value.connections.size === 0\n    ) {\n      ReactSimplePeerStatusState.next(Status.CONNECTING_TO_EXISTING_PEERS);\n    }\n\n    parse(\n      new TextDecoder('utf-8').decode(deflate_decode_raw(data)),\n      ReactSimplePeerState.value\n    );\n\n    ReactSimplePeerState.next(ReactSimplePeerState.value);\n  });\n}\n","import { IReactSimplePeerState } from '../../';\n\nexport function parse(data: string, state: IReactSimplePeerState) {\n  const senderId: string = data.substr(0, 20);\n  const command: string = data.substr(20, 20);\n\n  if (state.commands.get(command)) {\n    try {\n      state.commands.get(command)!(senderId, data.substr(40), state);\n    } catch (e) {\n      console.warn(e);\n    }\n  }\n\n  return senderId;\n}\n","import { IReactSimplePeerState } from '../';\nimport { SignalData } from 'simple-peer';\nimport { createExistingPeersOffers } from './createExistingPeersOffers';\n\nexport async function openConnectionsAsInitiator(\n  _: string,\n  data: string,\n  state: IReactSimplePeerState\n) {\n  const peers = JSON.parse(data);\n\n  if (Object.entries(peers).length) {\n    const offers: {\n      [key: string]: SignalData;\n    } = await createExistingPeersOffers(peers, state);\n    state.emitInitiatorOffers(offers, state.id, state.room!);\n  }\n}\n","import { IReactSimplePeerState } from '../';\nimport SimplePeer, { SignalData, Options } from 'simple-peer';\nimport freeice from 'freeice';\nimport { getSignalData } from '../Commands/getSignalData';\nimport { ReactSimplePeerState } from '../';\nimport { handlePeerConnection } from '../Commands/handlePeerConnection';\n\nexport async function createExistingPeersOffers(\n  peers: { [key: string]: any },\n  state: IReactSimplePeerState\n) {\n  return Object.fromEntries(\n    await Promise.all(\n      Object.entries(peers)\n        .filter((set: [string, string]) => set[0] !== state.id)\n        .map(async (set: [string, SignalData]) => {\n          let config: Options = {\n            initiator: true,\n            trickle: false,\n            config: { iceServers: freeice() },\n          };\n\n          if (state.model.stream) {\n            config.stream = state.model.stream;\n          }\n\n          let pc = new SimplePeer(config);\n\n          handlePeerConnection(pc, false);\n\n          pc.on('stream', async (stream: Promise<MediaStream>) => {\n            if (state.connections.get(set[0])) {\n              state.connections.get(set[0])!.model.stream = await stream;\n            }\n          });\n\n          let signalData = await getSignalData(pc);\n          set.splice(1, 1, signalData);\n\n          let connection = state.connections.get(set[0]);\n          state.connections.set(\n            set[0],\n            connection || { model: { connection: pc, stream: null }, peers: [] }\n          );\n          ReactSimplePeerState.next(state);\n\n          return set;\n        })\n    )\n  );\n}\n","import { IReactSimplePeerState } from '../';\nimport { ReactSimplePeerState } from '../';\n\nexport function syncModelData(\n  senderId: string,\n  data: string,\n  state: IReactSimplePeerState\n) {\n  if (state.connections.get(senderId)) {\n    let syncData = JSON.parse(data);\n\n    let model = state.connections.get(senderId)!.model;\n\n    state.connections.set(senderId, {\n      peers: syncData.peers,\n      model: {\n        ...syncData.model,\n        connection: model.connection,\n        stream: model.stream,\n      },\n    });\n\n    ReactSimplePeerState.next(state);\n  }\n}\n","import freeice from 'freeice';\nimport SimplePeer, { SignalData, Options } from 'simple-peer';\nimport { ReactSimplePeerState, ReactSimplePeerStatusState } from '../';\nimport { Status } from '../';\nimport { getSignalData } from '../Commands/getSignalData';\nimport { handlePeerConnection } from './handlePeerConnection';\n\nexport async function processJoinResponse(\n  offer: SignalData,\n  id: string,\n  room: string\n) {\n  let state = ReactSimplePeerState.value;\n\n  if (state.connections.size === 0) {\n    ReactSimplePeerStatusState.next(Status.RECEIVING_RESPONSE_ACCESS);\n  }\n\n  let config: Options = {\n    initiator: false,\n    trickle: false,\n    config: { iceServers: freeice() },\n  };\n\n  if (state.model.stream) {\n    config.stream = state.model.stream;\n  }\n\n  state.peerConnection = new SimplePeer(config);\n\n  state.peerConnection.on('stream', (stream: MediaStream) => {\n    if (id) {\n      state.connections.set(id, {\n        model: { connection: state.peerConnection, stream },\n        peers: [],\n      });\n    }\n  });\n\n  state.peerConnection.signal(offer);\n  const signalData = await getSignalData(state.peerConnection);\n\n  if (state.connections.size === 0) {\n    ReactSimplePeerStatusState.next(Status.JOINING_SESSION);\n  }\n\n  state.emitJoinAck(signalData, room, id, state.id);\n\n  handlePeerConnection(state.peerConnection, false);\n\n  ReactSimplePeerState.next(state);\n}\n","import {\n  ClientOffer,\n  ReactSimplePeerState,\n  ReactSimplePeerStatusState,\n  Status,\n} from '../';\nimport { handlePeerConnection } from './handlePeerConnection';\nimport { send } from '../Commands/Tools/send';\n\nexport function processClientOffer(\n  data: ClientOffer,\n  id: string,\n  roomCreator: boolean,\n  emitterPeerId: string\n) {\n  let state = ReactSimplePeerState.value;\n\n  if (roomCreator) {\n    handlePeerConnection(state.peerConnection, true);\n    let connection = state.connections.get(emitterPeerId);\n    state.connections.set(\n      emitterPeerId,\n      connection || {\n        model: { connection: state.peerConnection, stream: null },\n        peers: [],\n      }\n    );\n    ReactSimplePeerState.next(state);\n  }\n\n  if (id && state.connections.get(emitterPeerId)) {\n    const peerConnection = state.connections.get(emitterPeerId);\n    handlePeerConnection(peerConnection!.model.connection, false);\n    state.peerConnection = peerConnection!.model.connection;\n    ReactSimplePeerState.next(state);\n  }\n\n  let retry = async () => {\n    let relayPeer = Array.from(\n      ReactSimplePeerState.value.connections.values()\n    ).find(peer => {\n      return peer.peers.includes(emitterPeerId);\n    });\n\n    if (\n      !relayPeer ||\n      (relayPeer &&\n        !(await send(\n          relayPeer.model.connection,\n          'TELL_HIM_TO_RETRY___',\n          emitterPeerId\n        )))\n    ) {\n      setTimeout(async () => await retry(), Math.ceil(Math.random() * 1000));\n    }\n  };\n\n  state.peerConnection.on('error', async (e: any) => {\n    if (e.code === 'ERR_SET_REMOTE_DESCRIPTION') {\n      console.warn(\n        'Encountered an error while trying to signal incoming offer, retrying'\n      );\n      setTimeout(async () => await retry(), Math.ceil(Math.random() * 1000));\n      return;\n    }\n  });\n\n  state.peerConnection.signal(data.offer);\n  state.peers = data.peers;\n\n  ReactSimplePeerStatusState.next(Status.IDLE);\n\n  ReactSimplePeerState.next(state);\n}\n","import { IReactSimplePeerState } from '../.';\nimport SimplePeer, { Options } from 'simple-peer';\nimport freeice from 'freeice';\nimport { getSignalData } from './getSignalData';\nimport { handlePeerConnection } from './handlePeerConnection';\nimport { send } from './Tools/send';\n\nexport async function initiatorOffer(\n  _: string,\n  str: string,\n  state: IReactSimplePeerState\n) {\n  const data = JSON.parse(str);\n  const offer = JSON.parse(data.offer);\n  const id = data.id;\n\n  let config: Options = {\n    initiator: false,\n    trickle: false,\n    config: { iceServers: freeice() },\n  };\n\n  if (state.model.stream) {\n    config.stream = state.model.stream;\n  }\n\n  const peerConnection = new SimplePeer(config);\n\n  peerConnection.signal(offer);\n  const signalData = await getSignalData(state.peerConnection);\n\n  send(\n    peerConnection,\n    'NON_INITIATOR_OFFER_',\n    JSON.stringify({ id: state.id, offer: signalData })\n  );\n\n  handlePeerConnection(peerConnection, false);\n\n  let connection = state.connections.get(id);\n  state.connections.set(\n    id,\n    connection || {\n      model: { connection: peerConnection, stream: null },\n      peers: [],\n    }\n  );\n}\n","import { IReactSimplePeerState, ReactSimplePeerState } from '../.';\nimport { handlePeerConnection } from './handlePeerConnection';\n\nexport async function nonInitiatorOffer(\n  _: string,\n  str: string,\n  state: IReactSimplePeerState\n) {\n  const data = JSON.parse(str);\n  const offer = data.offer;\n  const id = data.id;\n\n  handlePeerConnection(state.peerConnection, true);\n  let connection = state.connections.get(id);\n  state.connections.set(\n    id,\n    connection || {\n      model: { connection: state.peerConnection, stream: null },\n      peers: [],\n    }\n  );\n\n  state.peerConnection.signal(offer);\n\n  ReactSimplePeerState.next(state);\n}\n","import { IReactSimplePeerState } from '../';\nimport { send } from './Tools/send';\n\nexport async function tellHimToRetry(\n  _: string,\n  data: string,\n  state: IReactSimplePeerState\n) {\n  let target = state.connections.get(data);\n\n  if (target) {\n    await send(target.model.connection, 'RETRY_______________');\n  }\n}\n","import { IReactSimplePeerState } from '../';\nimport { ReactSimplePeerState } from '../';\nimport { initState } from '../state';\n\nexport function retry(_: string, _1: string, state: IReactSimplePeerState) {\n  ReactSimplePeerState.next(initState);\n  setTimeout(() => state.emitJoinRequest(), Math.ceil(Math.random() * 1000));\n}\n","import { BehaviorSubject } from 'rxjs';\nimport SimplePeer from 'simple-peer';\nimport { ReactSimplePeerModel } from 'Models/react-simple-peer.model';\nimport { Instance, SignalData } from 'simple-peer';\nimport { JoinRequest } from 'Models/JoinRequest';\nimport { Stack } from 'typed-structures/dist';\nimport { processOfferRequest } from './Commands/processOfferRequest';\nimport { ClientOffer } from 'Models/ClientOffer';\nimport { initState } from './state';\n\nexport { ReactSimplePeerModel } from './Models/react-simple-peer.model';\nexport { JoinRoomButton } from './Components/JoinRoomButton';\nexport { Setup } from './Components/Setup';\nexport { Peers } from './Components/Peers';\nexport { State } from './Components/State';\nexport { PeerVideo } from './Components/PeerVideo';\nexport { ClientOffer } from './Models/ClientOffer';\nexport { JoinRequest } from './Models/JoinRequest';\n\nexport enum Status {\n  IDLE = 'IDLE',\n  EMITTING_OFFER = 'EMITTING_OFFER',\n  REQUESTING_ACCESS = 'REQUESTING_ACCESS',\n  RECEIVING_RESPONSE_ACCESS = 'RECEIVING_RESPONSE_ACCESS',\n  CONNECTING_TO_EXISTING_PEERS = 'CONNECTING_TO_EXISTING_PEERS',\n  JOINING_SESSION = 'JOINING_SESSION',\n}\n\nexport interface IReactSimplePeerState {\n  // State of variables used by connection logic\n  peers: { [key: string]: string };\n  id: string;\n  room: string | null;\n  roomCreatorId: string | null;\n  signalData: SimplePeer.SignalData;\n  connections: Map<string, { model: ReactSimplePeerModel; peers: string[] }>;\n  peerConnection: Instance;\n  commands: Map<string, Function>;\n  model: ReactSimplePeerModel;\n  joinRequests: Stack<JoinRequest>;\n  clientOffers: Stack<[ClientOffer, string, boolean, string]>;\n\n  // Storage of called Functions\n  emitJoinRequest: () => void;\n  emitOfferResponse: (joinRequest: JoinRequest, signalData: SignalData) => void;\n  emitInitiatorOffers: (\n    offers: { [key: string]: SignalData },\n    id: string,\n    room: string\n  ) => void;\n  emitJoinAck: (\n    signalData: SignalData,\n    room: string,\n    receivedId: string,\n    id: string\n  ) => void;\n}\n\nexport const ReactSimplePeerStatusState = new BehaviorSubject<Status>(\n  Status.IDLE\n);\nexport const ReactSimplePeerState = new BehaviorSubject<IReactSimplePeerState>(\n  initState\n);\n\nexport function setModel(model: ReactSimplePeerModel) {\n  let state = ReactSimplePeerState.value;\n  state.model = model;\n  ReactSimplePeerState.next(state);\n}\n\nexport function setRoom(room: string) {\n  let state = ReactSimplePeerState.value;\n  state.room = room;\n  ReactSimplePeerState.next(state);\n}\n\nexport function getId() {\n  return ReactSimplePeerState.value.id;\n}\n\nReactSimplePeerStatusState.subscribe(async status => {\n  if (\n    status === Status.IDLE &&\n    ReactSimplePeerState.value.joinRequests.length()\n  ) {\n    let state = ReactSimplePeerState.value;\n    console.log(state.joinRequests.length());\n    let joinRequest = state.joinRequests.unstack();\n    console.log(state.joinRequests.length());\n    ReactSimplePeerState.next(state);\n    setTimeout(\n      async () => await processOfferRequest(joinRequest),\n      Math.ceil(Math.random() * 1000)\n    );\n  }\n});\n","import { SignalData } from 'simple-peer';\nimport { ReactElement } from 'react';\nimport React from 'react';\nimport { ClientOffer, JoinRequest, ReactSimplePeerState } from '../';\nimport { openConnectionsAsInitiator } from '../Commands/openConnectionAsInitiator';\nimport { syncModelData } from '../Commands/syncModelData';\nimport { processOfferRequest } from '../Commands/processOfferRequest';\nimport { processJoinResponse } from '../Commands/processJoinResponse';\nimport { processClientOffer } from '../Commands/processClientOffer';\nimport { initiatorOffer } from '../Commands/InitiatorOffer';\nimport { nonInitiatorOffer } from '../Commands/nonInitiatorOffer';\nimport { tellHimToRetry } from '../Commands/tellHimToRetry';\nimport { retry } from '../Commands/retry';\n\ninterface SimplePeerSetupProps {\n  children: ReactElement | ReactElement[];\n  onJoinResponse: (\n    processJoinResponse: (\n      offer: SignalData,\n      id: string,\n      room: string,\n      roomCreatorId: string\n    ) => void\n  ) => void;\n  onClientOffer: (\n    processClientOffer: (\n      offer: ClientOffer,\n      id: string,\n      isRoomCreator: boolean,\n      emitterId: string\n    ) => void\n  ) => void;\n  onOfferRequest: (processOfferRequest: (request: JoinRequest) => void) => void;\n  onLeaving: (processLeaving: (id: string) => void) => void;\n  emitOfferResponse: (joinRequest: JoinRequest, signalData: SignalData) => void;\n  emitInitiatorOffers: (\n    offers: { [key: string]: SignalData },\n    id: string,\n    room: string\n  ) => void;\n  emitJoinAck: (\n    signalData: SignalData,\n    room: string,\n    recievedId: string,\n    id: string\n  ) => void;\n}\n\nexport class Setup extends React.Component<SimplePeerSetupProps, {}> {\n  readonly state = {};\n\n  constructor(props: SimplePeerSetupProps) {\n    super(props);\n\n    const {\n      onJoinResponse,\n      onClientOffer,\n      onOfferRequest,\n      onLeaving,\n      emitOfferResponse,\n      emitInitiatorOffers,\n      emitJoinAck,\n    } = this.props;\n    let state = ReactSimplePeerState.value;\n\n    state.commands.set('OPEN_CNTS_AS_INIT___', openConnectionsAsInitiator);\n    state.commands.set('SYNC_MODEL_DATA_____', syncModelData);\n    state.commands.set('INITIATOR_OFFER_____', initiatorOffer);\n    state.commands.set('NON_INITIATOR_OFFER_', nonInitiatorOffer);\n    state.commands.set('TELL_HIM_TO_RETRY___', tellHimToRetry);\n    state.commands.set('RETRY_______________', retry);\n\n    state.emitOfferResponse = emitOfferResponse;\n    state.emitInitiatorOffers = emitInitiatorOffers;\n    state.emitJoinAck = emitJoinAck;\n\n    onOfferRequest(processOfferRequest);\n    onJoinResponse(processJoinResponse);\n    onClientOffer(processClientOffer);\n    onLeaving(() => console.log('TODO: Implement processLeaving'));\n\n    ReactSimplePeerState.next(state);\n  }\n\n  render() {\n    return this.props.children || <></>;\n  }\n}\n","import React, { ReactElement } from 'react';\nimport { ReactSimplePeerModel, ReactSimplePeerState } from '../index';\n\ninterface PeersProps {\n  children: (\n    connections: ReactSimplePeerModel[]\n  ) => void | ReactElement | ReactElement[];\n}\n\ninterface PeersState {\n  connections: ReactSimplePeerModel[];\n}\n\nexport class Peers extends React.Component<PeersProps, PeersState> {\n  readonly state = {\n    connections: [],\n  };\n\n  componentDidMount(): void {\n    ReactSimplePeerState.subscribe(state => {\n      this.setState({\n        connections: Array.from(state.connections).map(set => set[1].model),\n      });\n    });\n  }\n\n  render() {\n    const { children } = this.props;\n    return children(this.state.connections) || <></>;\n  }\n}\n","export const ReactSimplePeerStatus: { [key: string]: string } = {\n  IDLE: 'Waiting for peers',\n  EMITTING_OFFER: 'Emitting offer',\n  REQUESTING_ACCESS: 'Requesting access',\n  RECEIVING_RESPONSE_ACCESS: 'Receiving response access',\n  CONNECTING_TO_EXISTING_PEERS: 'Connecting to existing peers',\n  JOINING_SESSION: 'Joining session',\n};\n","import React from 'react';\nimport { ReactSimplePeerStatusState } from '../';\nimport { ReactSimplePeerStatus } from '../Utils/status';\n\ninterface SimplePeerReactStateTooltipProps {}\n\ninterface SimplePeerReactStateTooltipState {\n  value: string;\n}\n\nexport class State extends React.Component<\n  SimplePeerReactStateTooltipProps,\n  SimplePeerReactStateTooltipState\n> {\n  readonly state = {\n    value: '',\n  };\n\n  componentDidMount(): void {\n    ReactSimplePeerStatusState.subscribe(async status => {\n      this.setState({ value: ReactSimplePeerStatus[status] });\n    });\n  }\n\n  render() {\n    return <>{this.state.value}</>;\n  }\n}\n","import React from 'react';\nimport { ReactSimplePeerModel } from '../';\nimport filterReactProps from 'filter-react-props';\n\ninterface PeerVideoProps {\n  peer: ReactSimplePeerModel;\n}\n\ninterface PeerVideoState {\n  stream: MediaStream | null;\n}\n\nexport class PeerVideo extends React.Component<\n  PeerVideoProps &\n    React.DetailedHTMLProps<\n      React.VideoHTMLAttributes<HTMLVideoElement>,\n      HTMLVideoElement\n    >,\n  PeerVideoState\n> {\n  readonly state = {\n    stream: null,\n  };\n  private video: HTMLVideoElement = document.createElement('video');\n\n  async componentDidUpdate() {\n    this.video.srcObject = await this.props.peer.stream;\n  }\n\n  render() {\n    return (\n      <video\n        {...filterReactProps(this.props)}\n        autoPlay={true}\n        muted={true}\n        ref={(video: HTMLVideoElement) => {\n          this.video = video;\n        }}\n      />\n    );\n  }\n}\n","import { SignalData } from 'simple-peer';\n\nexport class ClientOffer {\n  public offer: SignalData;\n  public peers: { [key: string]: string };\n\n  constructor(offer: SignalData, peers: { [p: string]: string }) {\n    this.offer = offer;\n    this.peers = peers;\n  }\n}\n","export class JoinRequest {\n  public roomId: string;\n  public peerId: string;\n\n  constructor(roomId: string, peerId: string) {\n    this.roomId = roomId;\n    this.peerId = peerId;\n  }\n}\n"],"names":["getSignalData","peerConnection","Promise","resolve","reject","on","data","e","processOfferRequest","request","state","ReactSimplePeerState","value","ReactSimplePeerStatusState","Status","IDLE","joinRequests","stack","next","EMITTING_OFFER","config","initiator","trickle","iceServers","freeice","model","stream","SimplePeer","localState","connections","get","peerId","connection","set","signalData","emitOfferResponse","initState","id","uid","sync","peers","room","roomCreatorId","Map","commands","Stack","clientOffers","emitJoinRequest","emitInitiatorOffers","emitJoinAck","JoinRoomButton","componentDidMount","this","props","join","render","children","onClick","React","filterReactProps","setRoom","Component","send","pc","command","deflate_encode_raw","Uint8Array","Buffer","from","console","warn","handlePeerConnection","openConnectionAsInitiator","Array","keys","JSON","stringify","size","CONNECTING_TO_EXISTING_PEERS","senderId","substr","parse","TextDecoder","decode","deflate_decode_raw","openConnectionsAsInitiator","_","Object","entries","length","all","filter","map","splice","fromEntries","createExistingPeersOffers","offers","syncModelData","syncData","processJoinResponse","offer","RECEIVING_RESPONSE_ACCESS","signal","JOINING_SESSION","processClientOffer","roomCreator","emitterPeerId","code","setTimeout","retry","relayPeer","Math","ceil","random","values","find","peer","includes","initiatorOffer","str","nonInitiatorOffer","tellHimToRetry","target","_1","Setup","_this","onJoinResponse","onClientOffer","onOfferRequest","onLeaving","log","Peers","subscribe","_this2","setState","ReactSimplePeerStatus","REQUESTING_ACCESS","State","status","PeerVideo","document","createElement","componentDidUpdate","_this3","video","srcObject","autoPlay","muted","ref","_this4","BehaviorSubject","joinRequest","unstack","roomId"],"mappings":"4VAEsBA,WAAcC,8BAC3B,IAAIC,SAAoB,SAACC,EAASC,OAEjCH,GAAgBA,EAAeI,GAAG,UAAU,SAAAC,UAAQH,EAAQG,MAChE,MAAOC,GACPH,EAAOG,4CCGSC,WAAoBC,WACpCC,EAAQC,EAAqBC,SAE7BC,EAA2BD,QAAUE,eAAOC,YAC9CL,EAAMM,aAAaC,MAAMR,GACzBE,EAAqBO,KAAKR,qBAI5BG,EAA2BK,KAAKJ,eAAOK,oBAEnCC,EAAkB,CACpBC,WAAW,EACXC,SAAS,EACTF,OAAQ,CAAEG,WAAYC,aAGpBd,EAAMe,MAAMC,SACdN,EAAOM,OAAShB,EAAMe,MAAMC,QAG9BhB,EAAMT,eAAiB,IAAI0B,EAAWP,GAEtCV,EAAMT,eAAeI,GAAG,mBAAiBqB,WACnCE,EAAajB,EAAqBC,sBAClCgB,EAAWC,YAAYC,IAAIrB,EAAQsB,aACjCC,EAAaJ,EAAWC,YAAYC,IAAIrB,EAAQsB,+BACpBL,qBAAhCM,EAAWP,MAAMC,SACjBE,EAAWC,YAAYI,IAAIxB,EAAQsB,OAAQC,GAC3CrB,EAAqBO,KAAKU,gIAIL5B,EAAcU,EAAMT,mCAA7CS,EAAMwB,aAENxB,EAAMyB,kBAAkB1B,EAASC,EAAMwB,YAEvCvB,EAAqBO,KAAKR,0CCxCf0B,EAAY,CACvBC,GAAIC,EAAIC,KAAK,IACbC,MAAO,GAGPC,KAAM,KACNC,cAAe,KACfR,WAAY,GACZL,gBAAiBc,IACjB1C,mBAAoB0B,EACpBiB,aAAcD,IACdlB,MAAO,CAAEO,eAAgBL,EAAcD,OAAQ,MAC/CV,iBAAkB6B,QAClBC,iBAAkBD,QAClBE,gBAAiB,aACjBZ,kBAAmB,aACnBa,oBAAqB,aACrBC,YAAa,gUCZFC,EAAb,6EAQmB,uCAEjBC,kBAAA,eACMzC,EAAQC,EAAqBC,MACjCF,EAAMqC,gBAAkBK,KAAKC,MAAMC,KACnC3C,EAAqBO,KAAKR,MAG5B6C,OAAA,iBAC0CH,KAAKC,MAAvCC,IAAAA,KAAME,IAAAA,SAAUf,IAAAA,KAAMgB,IAAAA,eAE1BC,0CACMC,EAAiBP,KAAKC,QAC1BI,QAAS,SAAAlD,GACPqD,EAAQnB,GACRa,IACIG,GACFA,EAAQlD,MAIXiD,MA7BT,CAAoCE,EAAMG,WCRpBC,WACpBC,EACAC,EACA1D,kBAGEyD,EAAGD,KACDG,qBACE,IAAIC,WACFC,OAAOC,QAAQzD,EAAqBC,MAAMyB,GAAK2B,EAAU1D,uBAIxD,GACP,MAAOC,UACP8D,QAAQC,KACN,6FAEK,iDCfKC,EACdR,EACAS,GAEAT,EAAG1D,GAAG,+CAQAK,EAAQC,EAAqBC,MAC7Ba,EAAQf,EAAMe,MACde,EAAQiC,MAAML,KAAK1D,EAAMmB,YAAY6C,+BACnCZ,EACJC,EACA,uBACAY,KAAKC,UAAU,CAAEnD,MAAOA,EAAOe,MAAOA,4CAbpCgC,yBACIV,EACJC,EACA,uBACAY,KAAKC,UAAUjE,EAAqBC,MAAM4B,uHAahDuB,EAAG1D,GAAG,QAAQ,SAAAC,GAERyD,EAAW1C,WACmC,IAAhDV,EAAqBC,MAAMiB,YAAYgD,MAEvChE,EAA2BK,KAAKJ,eAAOgE,uCChCvBxE,EAAcI,OAC5BqE,EAAmBzE,EAAK0E,OAAO,EAAG,IAClChB,EAAkB1D,EAAK0E,OAAO,GAAI,OAEpCtE,EAAMkC,SAASd,IAAIkC,OAEnBtD,EAAMkC,SAASd,IAAIkC,EAAnBtD,CAA6BqE,EAAUzE,EAAK0E,OAAO,IAAKtE,GACxD,MAAOH,GACP8D,QAAQC,KAAK/D,ID2Bf0E,CACE,IAAIC,YAAY,SAASC,OAAOC,qBAAmB9E,IACnDK,EAAqBC,OAGvBD,EAAqBO,KAAKP,EAAqBC,cEtC7ByE,WACpBC,EACAhF,EACAI,WAEM8B,EAAQmC,KAAKM,MAAM3E,mBAErBiF,OAAOC,QAAQhD,GAAOiD,uCCH1BjD,EACA9B,8BAGQR,QAAQwF,IACZH,OAAOC,QAAQhD,GACZmD,QAAO,SAAC1D,UAA0BA,EAAI,KAAOvB,EAAM2B,MACnDuD,cAAW3D,WACNb,EAAkB,CACpBC,WAAW,EACXC,SAAS,EACTF,OAAQ,CAAEG,WAAYC,MAGpBd,EAAMe,MAAMC,SACdN,EAAOM,OAAShB,EAAMe,MAAMC,YAG1BqC,EAAK,IAAIpC,EAAWP,UAExBmD,EAAqBR,GAAI,GAEzBA,EAAG1D,GAAG,mBAAiBqB,2BACjBhB,EAAMmB,YAAYC,IAAIG,EAAI,2BACwBP,qBAApDhB,EAAMmB,YAAYC,IAAIG,EAAI,IAAKR,MAAMC,qIAIlB1B,EAAc+D,mBAAjC7B,GACJD,EAAI4D,OAAO,EAAG,EAAG3D,OAEbF,EAAatB,EAAMmB,YAAYC,IAAIG,EAAI,WAC3CvB,EAAMmB,YAAYI,IAChBA,EAAI,GACJD,GAAc,CAAEP,MAAO,CAAEO,WAAY+B,EAAIrC,OAAQ,MAAQc,MAAO,KAElE7B,EAAqBO,KAAKR,GAEnBuB,kDAnCRsD,OAAOO,gDDGFC,CAA0BvD,EAAO9B,mBAFrCsF,GAGNtF,EAAMsC,oBAAoBgD,EAAQtF,EAAM2B,GAAI3B,EAAM+B,yHEZtCwD,EACdlB,EACAzE,EACAI,MAEIA,EAAMmB,YAAYC,IAAIiD,GAAW,KAC/BmB,EAAWvB,KAAKM,MAAM3E,GAEtBmB,EAAQf,EAAMmB,YAAYC,IAAIiD,GAAWtD,MAE7Cf,EAAMmB,YAAYI,IAAI8C,EAAU,CAC9BvC,MAAO0D,EAAS1D,MAChBf,WACKyE,EAASzE,OACZO,WAAYP,EAAMO,WAClBN,OAAQD,EAAMC,WAIlBf,EAAqBO,KAAKR,QCfRyF,WACpBC,EACA/D,EACAI,WAEI/B,EAAQC,EAAqBC,MAEF,IAA3BF,EAAMmB,YAAYgD,MACpBhE,EAA2BK,KAAKJ,eAAOuF,+BAGrCjF,EAAkB,CACpBC,WAAW,EACXC,SAAS,EACTF,OAAQ,CAAEG,WAAYC,aAGpBd,EAAMe,MAAMC,SACdN,EAAOM,OAAShB,EAAMe,MAAMC,QAG9BhB,EAAMT,eAAiB,IAAI0B,EAAWP,GAEtCV,EAAMT,eAAeI,GAAG,UAAU,SAACqB,GAC7BW,GACF3B,EAAMmB,YAAYI,IAAII,EAAI,CACxBZ,MAAO,CAAEO,WAAYtB,EAAMT,eAAgByB,OAAAA,GAC3Cc,MAAO,QAKb9B,EAAMT,eAAeqG,OAAOF,mBACHpG,EAAcU,EAAMT,gCAAvCiC,GAEyB,IAA3BxB,EAAMmB,YAAYgD,MACpBhE,EAA2BK,KAAKJ,eAAOyF,iBAGzC7F,EAAMuC,YAAYf,EAAYO,EAAMJ,EAAI3B,EAAM2B,IAE9CkC,EAAqB7D,EAAMT,gBAAgB,GAE3CU,EAAqBO,KAAKR,mDCzCZ8F,EACdlG,EACA+B,EACAoE,EACAC,OAEIhG,EAAQC,EAAqBC,SAE7B6F,EAAa,CACflC,EAAqB7D,EAAMT,gBAAgB,OACvC+B,EAAatB,EAAMmB,YAAYC,IAAI4E,GACvChG,EAAMmB,YAAYI,IAChByE,EACA1E,GAAc,CACZP,MAAO,CAAEO,WAAYtB,EAAMT,eAAgByB,OAAQ,MACnDc,MAAO,KAGX7B,EAAqBO,KAAKR,MAGxB2B,GAAM3B,EAAMmB,YAAYC,IAAI4E,GAAgB,KACxCzG,EAAiBS,EAAMmB,YAAYC,IAAI4E,GAC7CnC,EAAqBtE,EAAgBwB,MAAMO,YAAY,GACvDtB,EAAMT,eAAiBA,EAAgBwB,MAAMO,WAC7CrB,EAAqBO,KAAKR,GAuB5BA,EAAMT,eAAeI,GAAG,kBAAgBE,aACvB,+BAAXA,EAAEoG,MACJtC,QAAQC,KACN,wEAEFsC,uDAzBAC,4BAQCC,GACAA,QAODF,8CAA6BC,OAASE,KAAKC,KAAqB,IAAhBD,KAAKE,YAfnDH,EAAYrC,MAAML,KACpBzD,EAAqBC,MAAMiB,YAAYqF,UACvCC,MAAK,SAAAC,UACEA,EAAK5E,MAAM6E,SAASX,6BAI1BI,GACAA,mBADAA,GACAA,GACShD,EACNgD,EAAUrF,MAAMO,WAChB,uBACA0E,eALHI,GACAA,GACShD,EACNgD,EAAUrF,MAAMO,WAChB,uBACA0E,wCAYyBG,MAASE,KAAKC,KAAqB,IAAhBD,KAAKE,sFAKzDvG,EAAMT,eAAeqG,OAAOhG,EAAK8F,OACjC1F,EAAM8B,MAAQlC,EAAKkC,MAEnB3B,EAA2BK,KAAKJ,eAAOC,MAEvCJ,EAAqBO,KAAKR,OCjEN4G,WACpBhC,EACAiC,EACA7G,WAEMJ,EAAOqE,KAAKM,MAAMsC,GAClBnB,EAAQzB,KAAKM,MAAM3E,EAAK8F,OACxB/D,EAAK/B,EAAK+B,GAEZjB,EAAkB,CACpBC,WAAW,EACXC,SAAS,EACTF,OAAQ,CAAEG,WAAYC,MAGpBd,EAAMe,MAAMC,SACdN,EAAOM,OAAShB,EAAMe,MAAMC,YAGxBzB,EAAiB,IAAI0B,EAAWP,UAEtCnB,EAAeqG,OAAOF,mBACGpG,EAAcU,EAAMT,gCAAvCiC,GAEN4B,EACE7D,EACA,uBACA0E,KAAKC,UAAU,CAAEvC,GAAI3B,EAAM2B,GAAI+D,MAAOlE,KAGxCqC,EAAqBtE,GAAgB,OAEjC+B,EAAatB,EAAMmB,YAAYC,IAAIO,GACvC3B,EAAMmB,YAAYI,IAChBI,EACAL,GAAc,CACZP,MAAO,CAAEO,WAAY/B,EAAgByB,OAAQ,MAC7Cc,MAAO,4CCzCSgF,WACpBlC,EACAiC,EACA7G,WAEMJ,EAAOqE,KAAKM,MAAMsC,GAClBnB,EAAQ9F,EAAK8F,MACb/D,EAAK/B,EAAK+B,GAEhBkC,EAAqB7D,EAAMT,gBAAgB,OACvC+B,EAAatB,EAAMmB,YAAYC,IAAIO,UACvC3B,EAAMmB,YAAYI,IAChBI,EACAL,GAAc,CACZP,MAAO,CAAEO,WAAYtB,EAAMT,eAAgByB,OAAQ,MACnDc,MAAO,KAIX9B,EAAMT,eAAeqG,OAAOF,GAE5BzF,EAAqBO,KAAKR,yDCrBN+G,WACpBnC,EACAhF,EACAI,WAEIgH,EAAShH,EAAMmB,YAAYC,IAAIxB,mBAE/BoH,yBACI5D,EAAK4D,EAAOjG,MAAMO,WAAY,8JCPxB6E,EAAMvB,EAAWqC,EAAYjH,GAC3CC,EAAqBO,KAAKkB,GAC1BwE,YAAW,kBAAMlG,EAAMqC,oBAAmBgE,KAAKC,KAAqB,IAAhBD,KAAKE,eCa/CnG,EC6BC8G,EAAb,uBAGcvE,wBACJA,gBAHS,SAaXwE,EAAKxE,MAPPyE,IAAAA,eACAC,IAAAA,cACAC,IAAAA,eACAC,IAAAA,UACA9F,IAAAA,kBACAa,IAAAA,oBACAC,IAAAA,YAEEvC,EAAQC,EAAqBC,aAEjCF,EAAMkC,SAASX,IAAI,uBAAwBoD,GAC3C3E,EAAMkC,SAASX,IAAI,uBAAwBgE,GAC3CvF,EAAMkC,SAASX,IAAI,uBAAwBqF,GAC3C5G,EAAMkC,SAASX,IAAI,uBAAwBuF,GAC3C9G,EAAMkC,SAASX,IAAI,uBAAwBwF,GAC3C/G,EAAMkC,SAASX,IAAI,uBAAwB4E,GAE3CnG,EAAMyB,kBAAoBA,EAC1BzB,EAAMsC,oBAAsBA,EAC5BtC,EAAMuC,YAAcA,EAEpB+E,EAAexH,GACfsH,EAAe3B,GACf4B,EAAcvB,GACdyB,GAAU,kBAAM5D,QAAQ6D,IAAI,qCAE5BvH,EAAqBO,KAAKR,+BAG5B6C,OAAA,kBACSH,KAAKC,MAAMG,UAAYE,oCArClC,CAA2BA,EAAMG,WCnCpBsE,EAAb,6EACmB,CACftG,YAAa,wCAGfsB,kBAAA,sBACExC,EAAqByH,WAAU,SAAA1H,GAC7B2H,EAAKC,SAAS,CACZzG,YAAa4C,MAAML,KAAK1D,EAAMmB,aAAa+D,KAAI,SAAA3D,UAAOA,EAAI,GAAGR,iBAKnE8B,OAAA,kBAESC,EADcJ,KAAKC,MAAlBG,UACQJ,KAAK1C,MAAMmB,cAAgB6B,oCAf/C,CAA2BA,EAAMG,WCbpB0E,EAAmD,CAC9DxH,KAAM,oBACNI,eAAgB,iBAChBqH,kBAAmB,oBACnBnC,0BAA2B,4BAC3BvB,6BAA8B,+BAC9ByB,gBAAiB,mBCINkC,EAAb,6EAImB,CACf7H,MAAO,wCAGTuC,kBAAA,iBAEIC,KADFvC,EAA2BuH,oBAAgBM,gBACpCJ,SAAS,CAAE1H,MAAO2H,EAAsBG,gEAIjDnF,OAAA,kBACSG,gCAAGN,KAAK1C,MAAME,UAfzB,CAA2B8C,EAAMG,WCEpB8E,EAAb,6EAQmB,CACfjH,OAAQ,cAEwBkH,SAASC,cAAc,6CAEnDC,wCACJ1F,4BAA6B2F,EAAK1F,MAAM+D,KAAK1F,4BAAxCsH,MAAMC,qDAGb1F,OAAA,6BAEIG,yCACMC,EAAiBP,KAAKC,QAC1B6F,UAAU,EACVC,OAAO,EACPC,IAAK,SAACJ,GACJK,EAAKL,MAAQA,SAxBvB,CAA+BtF,EAAMG,YLOzB/C,EAAAA,iBAAAA,gCAEVA,kCACAA,wCACAA,wDACAA,8DACAA,wCAiCWD,EAA6B,IAAIyI,kBAC5CxI,eAAOC,MAEIJ,EAAuB,IAAI2I,kBACtClH,YAScwB,EAAQnB,OAClB/B,EAAQC,EAAqBC,MACjCF,EAAM+B,KAAOA,EACb9B,EAAqBO,KAAKR,GAO5BG,EAA2BuH,oBAAgBM,UAEvCA,IAAW5H,eAAOC,MAClBJ,EAAqBC,MAAMI,aAAayE,SACxC,KACI/E,EAAQC,EAAqBC,MACjCyD,QAAQ6D,IAAIxH,EAAMM,aAAayE,cAC3B8D,EAAc7I,EAAMM,aAAawI,UACrCnF,QAAQ6D,IAAIxH,EAAMM,aAAayE,UAC/B9E,EAAqBO,KAAKR,GAC1BkG,kDACoBpG,EAAoB+I,yCACtCxC,KAAKC,KAAqB,IAAhBD,KAAKE,8FMvFnB,SAAYb,EAAmB5D,QACxB4D,MAAQA,OACR5D,MAAQA,uBCJf,SAAYiH,EAAgB1H,QACrB0H,OAASA,OACT1H,OAASA,kLPuElB,kBACSpB,EAAqBC,MAAMyB,8BAbXZ,OACnBf,EAAQC,EAAqBC,MACjCF,EAAMe,MAAQA,EACdd,EAAqBO,KAAKR"}