var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { useEffect } from 'react';
import { assertConfiguration } from "../AblyReactHooks.js";
export function useChannel(channelNameOrNameAndOptions, ...channelSubscriptionArguments) {
    const ably = assertConfiguration();
    const channelName = typeof channelNameOrNameAndOptions === 'string'
        ? channelNameOrNameAndOptions
        : channelNameOrNameAndOptions.channelName;
    const channel = typeof channelNameOrNameAndOptions === 'string'
        ? ably.channels.get(channelName)
        : ably.channels.get(channelName, channelNameOrNameAndOptions.options);
    const onMount = () => __awaiter(this, void 0, void 0, function* () {
        yield channel.subscribe.apply(channel, channelSubscriptionArguments);
    });
    const onUnmount = () => __awaiter(this, void 0, void 0, function* () {
        yield channel.unsubscribe.apply(channel, channelSubscriptionArguments);
        setTimeout(() => __awaiter(this, void 0, void 0, function* () {
            // React is very mount/unmount happy, so if we just detatch the channel
            // it's quite likely it will be reattached again by a subsequent onMount calls.
            // To solve this, we set a timer, and if all the listeners have been removed, we know that the component
            // has been removed for good and we can detatch the channel.
            if (channel.listeners.length === 0) {
                yield channel.detach();
            }
        }), 2500);
    });
    const useEffectHook = () => {
        onMount();
        return () => { onUnmount(); };
    };
    useEffect(useEffectHook, [channelName]);
    return [channel, ably];
}
//# sourceMappingURL=useChannel.js.map