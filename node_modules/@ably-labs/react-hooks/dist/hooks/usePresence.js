var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { useEffect, useState } from 'react';
import { assertConfiguration } from "../AblyReactHooks.js";
export function usePresence(channelNameOrNameAndOptions, messageOrPresenceObject, onPresenceUpdated) {
    const ably = assertConfiguration();
    const channelName = typeof channelNameOrNameAndOptions === 'string'
        ? channelNameOrNameAndOptions
        : channelNameOrNameAndOptions.channelName;
    const channel = typeof channelNameOrNameAndOptions === 'string'
        ? ably.channels.get(channelName)
        : ably.channels.get(channelName, channelNameOrNameAndOptions.options);
    const [presenceData, updatePresenceData] = useState([]);
    const updatePresence = (message) => __awaiter(this, void 0, void 0, function* () {
        const snapshot = yield channel.presence.get();
        updatePresenceData(snapshot);
        onPresenceUpdated === null || onPresenceUpdated === void 0 ? void 0 : onPresenceUpdated.call(this, message);
    });
    const onMount = () => __awaiter(this, void 0, void 0, function* () {
        channel.presence.subscribe('enter', updatePresence);
        channel.presence.subscribe('leave', updatePresence);
        channel.presence.subscribe('update', updatePresence);
        yield channel.presence.enter(messageOrPresenceObject);
        const snapshot = yield channel.presence.get();
        updatePresenceData(snapshot);
    });
    const onUnmount = () => {
        if (channel.state == 'attached') {
            channel.presence.leave();
        }
        channel.presence.unsubscribe('enter');
        channel.presence.unsubscribe('leave');
        channel.presence.unsubscribe('update');
    };
    const useEffectHook = () => {
        onMount();
        return () => { onUnmount(); };
    };
    useEffect(useEffectHook, []);
    const updateStatus = (messageOrPresenceObject) => {
        channel.presence.update(messageOrPresenceObject);
    };
    return [presenceData, updateStatus];
}
//# sourceMappingURL=usePresence.js.map