{"ast":null,"code":"import { switchMap } from './switchMap';\nimport { operate } from '../util/lift';\nexport function switchScan(accumulator, seed) {\n  return operate(function (source, subscriber) {\n    var state = seed;\n    switchMap(function (value, index) {\n      return accumulator(state, value, index);\n    }, function (_, innerValue) {\n      return state = innerValue, innerValue;\n    })(source).subscribe(subscriber);\n    return function () {\n      state = null;\n    };\n  });\n}","map":{"version":3,"mappings":"AACA,SAASA,SAAS,QAAQ,aAAa;AACvC,SAASC,OAAO,QAAQ,cAAc;AAqBtC,OAAM,SAAUC,UAAU,CACxBC,WAAmD,EACnDC,IAAO;EAEP,OAAOH,OAAO,CAAC,UAACI,MAAM,EAAEC,UAAU;IAGhC,IAAIC,KAAK,GAAGH,IAAI;IAKhBJ,SAAS,CAGP,UAACQ,KAAQ,EAAEC,KAAK;MAAK,kBAAW,CAACF,KAAK,EAAEC,KAAK,EAAEC,KAAK,CAAC;IAAhC,CAAgC,EAGrD,UAACC,CAAC,EAAEC,UAAU;MAAK,OAAEJ,KAAK,GAAGI,UAAU,EAAGA,UAAU;IAAjC,CAAkC,CACtD,CAACN,MAAM,CAAC,CAACO,SAAS,CAACN,UAAU,CAAC;IAE/B,OAAO;MAELC,KAAK,GAAG,IAAK;IACf,CAAC;EACH,CAAC,CAAC;AACJ","names":["switchMap","operate","switchScan","accumulator","seed","source","subscriber","state","value","index","_","innerValue","subscribe"],"sources":["C:\\Users\\Amali\\Desktop\\Building_the_IoT_w._P2P_and_Cloud_Computing\\IoTProject\\node_modules\\rxjs\\src\\internal\\operators\\switchScan.ts"],"sourcesContent":["import { ObservableInput, ObservedValueOf, OperatorFunction } from '../types';\r\nimport { switchMap } from './switchMap';\r\nimport { operate } from '../util/lift';\r\n\r\n// TODO: Generate a marble diagram for these docs.\r\n\r\n/**\r\n * Applies an accumulator function over the source Observable where the\r\n * accumulator function itself returns an Observable, emitting values\r\n * only from the most recently returned Observable.\r\n *\r\n * <span class=\"informal\">It's like {@link mergeScan}, but only the most recent\r\n * Observable returned by the accumulator is merged into the outer Observable.</span>\r\n *\r\n * @see {@link scan}\r\n * @see {@link mergeScan}\r\n * @see {@link switchMap}\r\n *\r\n * @param accumulator\r\n * The accumulator function called on each source value.\r\n * @param seed The initial accumulation value.\r\n * @return A function that returns an observable of the accumulated values.\r\n */\r\nexport function switchScan<T, R, O extends ObservableInput<any>>(\r\n  accumulator: (acc: R, value: T, index: number) => O,\r\n  seed: R\r\n): OperatorFunction<T, ObservedValueOf<O>> {\r\n  return operate((source, subscriber) => {\r\n    // The state we will keep up to date to pass into our\r\n    // accumulator function at each new value from the source.\r\n    let state = seed;\r\n\r\n    // Use `switchMap` on our `source` to do the work of creating\r\n    // this operator. Note the backwards order here of `switchMap()(source)`\r\n    // to avoid needing to use `pipe` unnecessarily\r\n    switchMap(\r\n      // On each value from the source, call the accumulator with\r\n      // our previous state, the value and the index.\r\n      (value: T, index) => accumulator(state, value, index),\r\n      // Using the deprecated result selector here as a dirty trick\r\n      // to update our state with the flattened value.\r\n      (_, innerValue) => ((state = innerValue), innerValue)\r\n    )(source).subscribe(subscriber);\r\n\r\n    return () => {\r\n      // Release state on finalization\r\n      state = null!;\r\n    };\r\n  });\r\n}\r\n"]},"metadata":{},"sourceType":"module"}