{"ast":null,"code":"import { operate } from '../util/lift';\nimport { noop } from '../util/noop';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nimport { innerFrom } from '../observable/innerFrom';\nexport function bufferWhen(closingSelector) {\n  return operate(function (source, subscriber) {\n    var buffer = null;\n    var closingSubscriber = null;\n    var openBuffer = function openBuffer() {\n      closingSubscriber === null || closingSubscriber === void 0 ? void 0 : closingSubscriber.unsubscribe();\n      var b = buffer;\n      buffer = [];\n      b && subscriber.next(b);\n      innerFrom(closingSelector()).subscribe(closingSubscriber = createOperatorSubscriber(subscriber, openBuffer, noop));\n    };\n    openBuffer();\n    source.subscribe(createOperatorSubscriber(subscriber, function (value) {\n      return buffer === null || buffer === void 0 ? void 0 : buffer.push(value);\n    }, function () {\n      buffer && subscriber.next(buffer);\n      subscriber.complete();\n    }, undefined, function () {\n      return buffer = closingSubscriber = null;\n    }));\n  });\n}","map":{"version":3,"mappings":"AAEA,SAASA,OAAO,QAAQ,cAAc;AACtC,SAASC,IAAI,QAAQ,cAAc;AACnC,SAASC,wBAAwB,QAAQ,sBAAsB;AAC/D,SAASC,SAAS,QAAQ,yBAAyB;AAwCnD,OAAM,SAAUC,UAAU,CAAIC,eAA2C;EACvE,OAAOL,OAAO,CAAC,UAACM,MAAM,EAAEC,UAAU;IAEhC,IAAIC,MAAM,GAAe,IAAI;IAI7B,IAAIC,iBAAiB,GAAyB,IAAI;IAMlD,IAAMC,UAAU,GAAG,SAAbA,UAAU,GAAG;MAGjBD,iBAAiB,aAAjBA,iBAAiB,uBAAjBA,iBAAiB,CAAEE,WAAW,EAAE;MAEhC,IAAMC,CAAC,GAAGJ,MAAM;MAChBA,MAAM,GAAG,EAAE;MACXI,CAAC,IAAIL,UAAU,CAACM,IAAI,CAACD,CAAC,CAAC;MAGvBT,SAAS,CAACE,eAAe,EAAE,CAAC,CAACS,SAAS,CAAEL,iBAAiB,GAAGP,wBAAwB,CAACK,UAAU,EAAEG,UAAU,EAAET,IAAI,CAAC,CAAE;IACtH,CAAC;IAGDS,UAAU,EAAE;IAGZJ,MAAM,CAACQ,SAAS,CACdZ,wBAAwB,CACtBK,UAAU,EAEV,UAACQ,KAAK;MAAK,aAAM,aAANP,MAAM,uBAANA,MAAM,CAAEQ,IAAI,CAACD,KAAK,CAAC;IAAnB,CAAmB,EAG9B;MACEP,MAAM,IAAID,UAAU,CAACM,IAAI,CAACL,MAAM,CAAC;MACjCD,UAAU,CAACU,QAAQ,EAAE;IACvB,CAAC,EAEDC,SAAS,EAET;MAAM,OAACV,MAAM,GAAGC,iBAAiB,GAAG,IAAK;IAAnC,CAAoC,CAC3C,CACF;EACH,CAAC,CAAC;AACJ","names":["operate","noop","createOperatorSubscriber","innerFrom","bufferWhen","closingSelector","source","subscriber","buffer","closingSubscriber","openBuffer","unsubscribe","b","next","subscribe","value","push","complete","undefined"],"sources":["C:\\Users\\Amali\\Desktop\\Building_the_IoT_w._P2P_and_Cloud_Computing\\IoTProject\\node_modules\\rxjs\\src\\internal\\operators\\bufferWhen.ts"],"sourcesContent":["import { Subscriber } from '../Subscriber';\r\nimport { ObservableInput, OperatorFunction } from '../types';\r\nimport { operate } from '../util/lift';\r\nimport { noop } from '../util/noop';\r\nimport { createOperatorSubscriber } from './OperatorSubscriber';\r\nimport { innerFrom } from '../observable/innerFrom';\r\n\r\n/**\r\n * Buffers the source Observable values, using a factory function of closing\r\n * Observables to determine when to close, emit, and reset the buffer.\r\n *\r\n * <span class=\"informal\">Collects values from the past as an array. When it\r\n * starts collecting values, it calls a function that returns an Observable that\r\n * tells when to close the buffer and restart collecting.</span>\r\n *\r\n * ![](bufferWhen.svg)\r\n *\r\n * Opens a buffer immediately, then closes the buffer when the observable\r\n * returned by calling `closingSelector` function emits a value. When it closes\r\n * the buffer, it immediately opens a new buffer and repeats the process.\r\n *\r\n * ## Example\r\n *\r\n * Emit an array of the last clicks every [1-5] random seconds\r\n *\r\n * ```ts\r\n * import { fromEvent, bufferWhen, interval } from 'rxjs';\r\n *\r\n * const clicks = fromEvent(document, 'click');\r\n * const buffered = clicks.pipe(\r\n *   bufferWhen(() => interval(1000 + Math.random() * 4000))\r\n * );\r\n * buffered.subscribe(x => console.log(x));\r\n * ```\r\n *\r\n * @see {@link buffer}\r\n * @see {@link bufferCount}\r\n * @see {@link bufferTime}\r\n * @see {@link bufferToggle}\r\n * @see {@link windowWhen}\r\n *\r\n * @param {function(): Observable} closingSelector A function that takes no\r\n * arguments and returns an Observable that signals buffer closure.\r\n * @return A function that returns an Observable of arrays of buffered values.\r\n */\r\nexport function bufferWhen<T>(closingSelector: () => ObservableInput<any>): OperatorFunction<T, T[]> {\r\n  return operate((source, subscriber) => {\r\n    // The buffer we keep and emit.\r\n    let buffer: T[] | null = null;\r\n    // A reference to the subscriber used to subscribe to\r\n    // the closing notifier. We need to hold this so we can\r\n    // end the subscription after the first notification.\r\n    let closingSubscriber: Subscriber<T> | null = null;\r\n\r\n    // Ends the previous closing notifier subscription, so it\r\n    // terminates after the first emission, then emits\r\n    // the current buffer  if there is one, starts a new buffer, and starts a\r\n    // new closing notifier.\r\n    const openBuffer = () => {\r\n      // Make sure to finalize the closing subscription, we only cared\r\n      // about one notification.\r\n      closingSubscriber?.unsubscribe();\r\n      // emit the buffer if we have one, and start a new buffer.\r\n      const b = buffer;\r\n      buffer = [];\r\n      b && subscriber.next(b);\r\n\r\n      // Get a new closing notifier and subscribe to it.\r\n      innerFrom(closingSelector()).subscribe((closingSubscriber = createOperatorSubscriber(subscriber, openBuffer, noop)));\r\n    };\r\n\r\n    // Start the first buffer.\r\n    openBuffer();\r\n\r\n    // Subscribe to our source.\r\n    source.subscribe(\r\n      createOperatorSubscriber(\r\n        subscriber,\r\n        // Add every new value to the current buffer.\r\n        (value) => buffer?.push(value),\r\n        // When we complete, emit the buffer if we have one,\r\n        // then complete the result.\r\n        () => {\r\n          buffer && subscriber.next(buffer);\r\n          subscriber.complete();\r\n        },\r\n        // Pass all errors through to consumer.\r\n        undefined,\r\n        // Release memory on finalization\r\n        () => (buffer = closingSubscriber = null!)\r\n      )\r\n    );\r\n  });\r\n}\r\n"]},"metadata":{},"sourceType":"module"}