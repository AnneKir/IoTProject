{"ast":null,"code":"import { innerFrom } from '../observable/innerFrom';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function switchMap(project, resultSelector) {\n  return operate(function (source, subscriber) {\n    var innerSubscriber = null;\n    var index = 0;\n    var isComplete = false;\n    var checkComplete = function () {\n      return isComplete && !innerSubscriber && subscriber.complete();\n    };\n    source.subscribe(createOperatorSubscriber(subscriber, function (value) {\n      innerSubscriber === null || innerSubscriber === void 0 ? void 0 : innerSubscriber.unsubscribe();\n      var innerIndex = 0;\n      var outerIndex = index++;\n      innerFrom(project(value, outerIndex)).subscribe(innerSubscriber = createOperatorSubscriber(subscriber, function (innerValue) {\n        return subscriber.next(resultSelector ? resultSelector(value, innerValue, outerIndex, innerIndex++) : innerValue);\n      }, function () {\n        innerSubscriber = null;\n        checkComplete();\n      }));\n    }, function () {\n      isComplete = true;\n      checkComplete();\n    }));\n  });\n}","map":{"version":3,"mappings":"AAEA,SAASA,SAAS,QAAQ,yBAAyB;AACnD,SAASC,OAAO,QAAQ,cAAc;AACtC,SAASC,wBAAwB,QAAQ,sBAAsB;AAiF/D,OAAM,SAAUC,SAAS,CACvBC,OAAuC,EACvCC,cAA6G;EAE7G,OAAOJ,OAAO,CAAC,UAACK,MAAM,EAAEC,UAAU;IAChC,IAAIC,eAAe,GAA0C,IAAI;IACjE,IAAIC,KAAK,GAAG,CAAC;IAEb,IAAIC,UAAU,GAAG,KAAK;IAItB,IAAMC,aAAa,GAAG;MAAM,iBAAU,IAAI,CAACH,eAAe,IAAID,UAAU,CAACK,QAAQ,EAAE;IAAvD,CAAuD;IAEnFN,MAAM,CAACO,SAAS,CACdX,wBAAwB,CACtBK,UAAU,EACV,UAACO,KAAK;MAEJN,eAAe,aAAfA,eAAe,uBAAfA,eAAe,CAAEO,WAAW,EAAE;MAC9B,IAAIC,UAAU,GAAG,CAAC;MAClB,IAAMC,UAAU,GAAGR,KAAK,EAAE;MAE1BT,SAAS,CAACI,OAAO,CAACU,KAAK,EAAEG,UAAU,CAAC,CAAC,CAACJ,SAAS,CAC5CL,eAAe,GAAGN,wBAAwB,CACzCK,UAAU,EAIV,UAACW,UAAU;QAAK,iBAAU,CAACC,IAAI,CAACd,cAAc,GAAGA,cAAc,CAACS,KAAK,EAAEI,UAAU,EAAED,UAAU,EAAED,UAAU,EAAE,CAAC,GAAGE,UAAU,CAAC;MAA1G,CAA0G,EAC1H;QAIEV,eAAe,GAAG,IAAK;QACvBG,aAAa,EAAE;MACjB,CAAC,CACF,CACF;IACH,CAAC,EACD;MACED,UAAU,GAAG,IAAI;MACjBC,aAAa,EAAE;IACjB,CAAC,CACF,CACF;EACH,CAAC,CAAC;AACJ","names":["innerFrom","operate","createOperatorSubscriber","switchMap","project","resultSelector","source","subscriber","innerSubscriber","index","isComplete","checkComplete","complete","subscribe","value","unsubscribe","innerIndex","outerIndex","innerValue","next"],"sources":["C:\\Users\\Amali\\Desktop\\Building_the_IoT_w._P2P_and_Cloud_Computing\\IoTProject\\node_modules\\rxjs\\src\\internal\\operators\\switchMap.ts"],"sourcesContent":["import { Subscriber } from '../Subscriber';\r\nimport { ObservableInput, OperatorFunction, ObservedValueOf } from '../types';\r\nimport { innerFrom } from '../observable/innerFrom';\r\nimport { operate } from '../util/lift';\r\nimport { createOperatorSubscriber } from './OperatorSubscriber';\r\n\r\n/* tslint:disable:max-line-length */\r\nexport function switchMap<T, O extends ObservableInput<any>>(\r\n  project: (value: T, index: number) => O\r\n): OperatorFunction<T, ObservedValueOf<O>>;\r\n/** @deprecated The `resultSelector` parameter will be removed in v8. Use an inner `map` instead. Details: https://rxjs.dev/deprecations/resultSelector */\r\nexport function switchMap<T, O extends ObservableInput<any>>(\r\n  project: (value: T, index: number) => O,\r\n  resultSelector: undefined\r\n): OperatorFunction<T, ObservedValueOf<O>>;\r\n/** @deprecated The `resultSelector` parameter will be removed in v8. Use an inner `map` instead. Details: https://rxjs.dev/deprecations/resultSelector */\r\nexport function switchMap<T, R, O extends ObservableInput<any>>(\r\n  project: (value: T, index: number) => O,\r\n  resultSelector: (outerValue: T, innerValue: ObservedValueOf<O>, outerIndex: number, innerIndex: number) => R\r\n): OperatorFunction<T, R>;\r\n/* tslint:enable:max-line-length */\r\n\r\n/**\r\n * Projects each source value to an Observable which is merged in the output\r\n * Observable, emitting values only from the most recently projected Observable.\r\n *\r\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\r\n * these inner Observables.</span>\r\n *\r\n * ![](switchMap.png)\r\n *\r\n * Returns an Observable that emits items based on applying a function that you\r\n * supply to each item emitted by the source Observable, where that function\r\n * returns an (so-called \"inner\") Observable. Each time it observes one of these\r\n * inner Observables, the output Observable begins emitting the items emitted by\r\n * that inner Observable. When a new inner Observable is emitted, `switchMap`\r\n * stops emitting items from the earlier-emitted inner Observable and begins\r\n * emitting items from the new one. It continues to behave like this for\r\n * subsequent inner Observables.\r\n *\r\n * ## Example\r\n *\r\n * Generate new Observable according to source Observable values\r\n *\r\n * ```ts\r\n * import { of, switchMap } from 'rxjs';\r\n *\r\n * const switched = of(1, 2, 3).pipe(switchMap(x => of(x, x ** 2, x ** 3)));\r\n * switched.subscribe(x => console.log(x));\r\n * // outputs\r\n * // 1\r\n * // 1\r\n * // 1\r\n * // 2\r\n * // 4\r\n * // 8\r\n * // 3\r\n * // 9\r\n * // 27\r\n * ```\r\n *\r\n * Restart an interval Observable on every click event\r\n *\r\n * ```ts\r\n * import { fromEvent, switchMap, interval } from 'rxjs';\r\n *\r\n * const clicks = fromEvent(document, 'click');\r\n * const result = clicks.pipe(switchMap(() => interval(1000)));\r\n * result.subscribe(x => console.log(x));\r\n * ```\r\n *\r\n * @see {@link concatMap}\r\n * @see {@link exhaustMap}\r\n * @see {@link mergeMap}\r\n * @see {@link switchAll}\r\n * @see {@link switchMapTo}\r\n *\r\n * @param {function(value: T, index: number): ObservableInput} project A function\r\n * that, when applied to an item emitted by the source Observable, returns an\r\n * Observable.\r\n * @return A function that returns an Observable that emits the result of\r\n * applying the projection function (and the optional deprecated\r\n * `resultSelector`) to each item emitted by the source Observable and taking\r\n * only the values from the most recently projected inner Observable.\r\n */\r\nexport function switchMap<T, R, O extends ObservableInput<any>>(\r\n  project: (value: T, index: number) => O,\r\n  resultSelector?: (outerValue: T, innerValue: ObservedValueOf<O>, outerIndex: number, innerIndex: number) => R\r\n): OperatorFunction<T, ObservedValueOf<O> | R> {\r\n  return operate((source, subscriber) => {\r\n    let innerSubscriber: Subscriber<ObservedValueOf<O>> | null = null;\r\n    let index = 0;\r\n    // Whether or not the source subscription has completed\r\n    let isComplete = false;\r\n\r\n    // We only complete the result if the source is complete AND we don't have an active inner subscription.\r\n    // This is called both when the source completes and when the inners complete.\r\n    const checkComplete = () => isComplete && !innerSubscriber && subscriber.complete();\r\n\r\n    source.subscribe(\r\n      createOperatorSubscriber(\r\n        subscriber,\r\n        (value) => {\r\n          // Cancel the previous inner subscription if there was one\r\n          innerSubscriber?.unsubscribe();\r\n          let innerIndex = 0;\r\n          const outerIndex = index++;\r\n          // Start the next inner subscription\r\n          innerFrom(project(value, outerIndex)).subscribe(\r\n            (innerSubscriber = createOperatorSubscriber(\r\n              subscriber,\r\n              // When we get a new inner value, next it through. Note that this is\r\n              // handling the deprecate result selector here. This is because with this architecture\r\n              // it ends up being smaller than using the map operator.\r\n              (innerValue) => subscriber.next(resultSelector ? resultSelector(value, innerValue, outerIndex, innerIndex++) : innerValue),\r\n              () => {\r\n                // The inner has completed. Null out the inner subscriber to\r\n                // free up memory and to signal that we have no inner subscription\r\n                // currently.\r\n                innerSubscriber = null!;\r\n                checkComplete();\r\n              }\r\n            ))\r\n          );\r\n        },\r\n        () => {\r\n          isComplete = true;\r\n          checkComplete();\r\n        }\r\n      )\r\n    );\r\n  });\r\n}\r\n"]},"metadata":{},"sourceType":"module"}