{"ast":null,"code":"'use strict';\n\n/**\n * Validate a topic to see if it's valid or not.\n * A topic is valid if it follow below rules:\n * - Rule #1: If any part of the topic is not `+` or `#`, then it must not contain `+` and '#'\n * - Rule #2: Part `#` must be located at the end of the mailbox\n *\n * @param {String} topic - A topic\n * @returns {Boolean} If the topic is valid, returns true. Otherwise, returns false.\n */\nfunction validateTopic(topic) {\n  const parts = topic.split('/');\n  for (let i = 0; i < parts.length; i++) {\n    if (parts[i] === '+') {\n      continue;\n    }\n    if (parts[i] === '#') {\n      // for Rule #2\n      return i === parts.length - 1;\n    }\n    if (parts[i].indexOf('+') !== -1 || parts[i].indexOf('#') !== -1) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * Validate an array of topics to see if any of them is valid or not\n  * @param {Array} topics - Array of topics\n * @returns {String} If the topics is valid, returns null. Otherwise, returns the invalid one\n */\nfunction validateTopics(topics) {\n  if (topics.length === 0) {\n    return 'empty_topic_list';\n  }\n  for (let i = 0; i < topics.length; i++) {\n    if (!validateTopic(topics[i])) {\n      return topics[i];\n    }\n  }\n  return null;\n}\nmodule.exports = {\n  validateTopics: validateTopics\n};","map":{"version":3,"names":["validateTopic","topic","parts","split","i","length","indexOf","validateTopics","topics","module","exports"],"sources":["/Users/athallenberg/Dropbox/Kandidat/IoT/IoTProject/node_modules/mqtt/lib/validations.js"],"sourcesContent":["'use strict'\n\n/**\n * Validate a topic to see if it's valid or not.\n * A topic is valid if it follow below rules:\n * - Rule #1: If any part of the topic is not `+` or `#`, then it must not contain `+` and '#'\n * - Rule #2: Part `#` must be located at the end of the mailbox\n *\n * @param {String} topic - A topic\n * @returns {Boolean} If the topic is valid, returns true. Otherwise, returns false.\n */\nfunction validateTopic (topic) {\n  const parts = topic.split('/')\n\n  for (let i = 0; i < parts.length; i++) {\n    if (parts[i] === '+') {\n      continue\n    }\n\n    if (parts[i] === '#') {\n      // for Rule #2\n      return i === parts.length - 1\n    }\n\n    if (parts[i].indexOf('+') !== -1 || parts[i].indexOf('#') !== -1) {\n      return false\n    }\n  }\n\n  return true\n}\n\n/**\n * Validate an array of topics to see if any of them is valid or not\n  * @param {Array} topics - Array of topics\n * @returns {String} If the topics is valid, returns null. Otherwise, returns the invalid one\n */\nfunction validateTopics (topics) {\n  if (topics.length === 0) {\n    return 'empty_topic_list'\n  }\n  for (let i = 0; i < topics.length; i++) {\n    if (!validateTopic(topics[i])) {\n      return topics[i]\n    }\n  }\n  return null\n}\n\nmodule.exports = {\n  validateTopics: validateTopics\n}\n"],"mappings":"AAAA,YAAY;;AAEZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,aAAa,CAAEC,KAAK,EAAE;EAC7B,MAAMC,KAAK,GAAGD,KAAK,CAACE,KAAK,CAAC,GAAG,CAAC;EAE9B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,KAAK,CAACG,MAAM,EAAED,CAAC,EAAE,EAAE;IACrC,IAAIF,KAAK,CAACE,CAAC,CAAC,KAAK,GAAG,EAAE;MACpB;IACF;IAEA,IAAIF,KAAK,CAACE,CAAC,CAAC,KAAK,GAAG,EAAE;MACpB;MACA,OAAOA,CAAC,KAAKF,KAAK,CAACG,MAAM,GAAG,CAAC;IAC/B;IAEA,IAAIH,KAAK,CAACE,CAAC,CAAC,CAACE,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,IAAIJ,KAAK,CAACE,CAAC,CAAC,CAACE,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE;MAChE,OAAO,KAAK;IACd;EACF;EAEA,OAAO,IAAI;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA,SAASC,cAAc,CAAEC,MAAM,EAAE;EAC/B,IAAIA,MAAM,CAACH,MAAM,KAAK,CAAC,EAAE;IACvB,OAAO,kBAAkB;EAC3B;EACA,KAAK,IAAID,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGI,MAAM,CAACH,MAAM,EAAED,CAAC,EAAE,EAAE;IACtC,IAAI,CAACJ,aAAa,CAACQ,MAAM,CAACJ,CAAC,CAAC,CAAC,EAAE;MAC7B,OAAOI,MAAM,CAACJ,CAAC,CAAC;IAClB;EACF;EACA,OAAO,IAAI;AACb;AAEAK,MAAM,CAACC,OAAO,GAAG;EACfH,cAAc,EAAEA;AAClB,CAAC"},"metadata":{},"sourceType":"script"}