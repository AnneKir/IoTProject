{"ast":null,"code":"import { filter } from './filter';\nexport function skip(count) {\n  return filter(function (_, index) {\n    return count <= index;\n  });\n}","map":{"version":3,"mappings":"AACA,SAASA,MAAM,QAAQ,UAAU;AAmCjC,OAAM,SAAUC,IAAI,CAAIC,KAAa;EACnC,OAAOF,MAAM,CAAC,UAACG,CAAC,EAAEC,KAAK;IAAK,YAAK,IAAIA,KAAK;EAAd,CAAc,CAAC;AAC7C","names":["filter","skip","count","_","index"],"sources":["C:\\Users\\Amali\\Desktop\\Building_the_IoT_w._P2P_and_Cloud_Computing\\IoTProject\\node_modules\\rxjs\\src\\internal\\operators\\skip.ts"],"sourcesContent":["import { MonoTypeOperatorFunction } from '../types';\r\nimport { filter } from './filter';\r\n\r\n/**\r\n * Returns an Observable that skips the first `count` items emitted by the source Observable.\r\n *\r\n * ![](skip.png)\r\n *\r\n * Skips the values until the sent notifications are equal or less than provided skip count. It raises\r\n * an error if skip count is equal or more than the actual number of emits and source raises an error.\r\n *\r\n * ## Example\r\n *\r\n * Skip the values before the emission\r\n *\r\n * ```ts\r\n * import { interval, skip } from 'rxjs';\r\n *\r\n * // emit every half second\r\n * const source = interval(500);\r\n * // skip the first 10 emitted values\r\n * const result = source.pipe(skip(10));\r\n *\r\n * result.subscribe(value => console.log(value));\r\n * // output: 10...11...12...13...\r\n * ```\r\n *\r\n * @see {@link last}\r\n * @see {@link skipWhile}\r\n * @see {@link skipUntil}\r\n * @see {@link skipLast}\r\n *\r\n * @param {Number} count - The number of times, items emitted by source Observable should be skipped.\r\n * @return A function that returns an Observable that skips the first `count`\r\n * values emitted by the source Observable.\r\n */\r\nexport function skip<T>(count: number): MonoTypeOperatorFunction<T> {\r\n  return filter((_, index) => count <= index);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}