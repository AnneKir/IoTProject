{"ast":null,"code":"import { ReplaySubject } from '../ReplaySubject';\nimport { share } from './share';\nexport function shareReplay(configOrBufferSize, windowTime, scheduler) {\n  var _a, _b, _c;\n  var bufferSize;\n  var refCount = false;\n  if (configOrBufferSize && typeof configOrBufferSize === 'object') {\n    _a = configOrBufferSize.bufferSize, bufferSize = _a === void 0 ? Infinity : _a, _b = configOrBufferSize.windowTime, windowTime = _b === void 0 ? Infinity : _b, _c = configOrBufferSize.refCount, refCount = _c === void 0 ? false : _c, scheduler = configOrBufferSize.scheduler;\n  } else {\n    bufferSize = configOrBufferSize !== null && configOrBufferSize !== void 0 ? configOrBufferSize : Infinity;\n  }\n  return share({\n    connector: function connector() {\n      return new ReplaySubject(bufferSize, windowTime, scheduler);\n    },\n    resetOnError: true,\n    resetOnComplete: false,\n    resetOnRefCountZero: refCount\n  });\n}","map":{"version":3,"mappings":"AAAA,SAASA,aAAa,QAAQ,kBAAkB;AAEhD,SAASC,KAAK,QAAQ,SAAS;AAwJ/B,OAAM,SAAUC,WAAW,CACzBC,kBAA+C,EAC/CC,UAAmB,EACnBC,SAAyB;;EAEzB,IAAIC,UAAkB;EACtB,IAAIC,QAAQ,GAAG,KAAK;EACpB,IAAIJ,kBAAkB,IAAI,OAAOA,kBAAkB,KAAK,QAAQ,EAAE;IAC7DK,KAA8EL,kBAAkB,WAA3E,EAArBG,UAAU,mBAAGG,QAAQ,OAAEC,KAAuDP,kBAAkB,WAApD,EAArBC,UAAU,mBAAGK,QAAQ,OAAEE,KAAgCR,kBAAkB,SAAlC,EAAhBI,QAAQ,mBAAG,KAAK,OAAEF,SAAS,GAAKF,kBAAkB,UAAvB;GAC7E,MAAM;IACLG,UAAU,GAAIH,kBAAkB,aAAlBA,kBAAkB,cAAlBA,kBAAkB,GAAIM,QAAmB;;EAEzD,OAAOR,KAAK,CAAI;IACdW,SAAS,EAAE;MAAM,WAAIZ,aAAa,CAACM,UAAU,EAAEF,UAAU,EAAEC,SAAS,CAAC;IAApD,CAAoD;IACrEQ,YAAY,EAAE,IAAI;IAClBC,eAAe,EAAE,KAAK;IACtBC,mBAAmB,EAAER;GACtB,CAAC;AACJ","names":["ReplaySubject","share","shareReplay","configOrBufferSize","windowTime","scheduler","bufferSize","refCount","_a","Infinity","_b","_c","connector","resetOnError","resetOnComplete","resetOnRefCountZero"],"sources":["C:\\Users\\Amali\\Desktop\\Building_the_IoT_w._P2P_and_Cloud_Computing\\IoTProject\\node_modules\\rxjs\\src\\internal\\operators\\shareReplay.ts"],"sourcesContent":["import { ReplaySubject } from '../ReplaySubject';\r\nimport { MonoTypeOperatorFunction, SchedulerLike } from '../types';\r\nimport { share } from './share';\r\n\r\nexport interface ShareReplayConfig {\r\n  bufferSize?: number;\r\n  windowTime?: number;\r\n  refCount: boolean;\r\n  scheduler?: SchedulerLike;\r\n}\r\n\r\nexport function shareReplay<T>(config: ShareReplayConfig): MonoTypeOperatorFunction<T>;\r\nexport function shareReplay<T>(bufferSize?: number, windowTime?: number, scheduler?: SchedulerLike): MonoTypeOperatorFunction<T>;\r\n\r\n/**\r\n * Share source and replay specified number of emissions on subscription.\r\n *\r\n * This operator is a specialization of `replay` that connects to a source observable\r\n * and multicasts through a `ReplaySubject` constructed with the specified arguments.\r\n * A successfully completed source will stay cached in the `shareReplay`ed observable forever,\r\n * but an errored source can be retried.\r\n *\r\n * ## Why use `shareReplay`?\r\n *\r\n * You generally want to use `shareReplay` when you have side-effects or taxing computations\r\n * that you do not wish to be executed amongst multiple subscribers.\r\n * It may also be valuable in situations where you know you will have late subscribers to\r\n * a stream that need access to previously emitted values.\r\n * This ability to replay values on subscription is what differentiates {@link share} and `shareReplay`.\r\n *\r\n * ## Reference counting\r\n *\r\n * By default `shareReplay` will use `refCount` of false, meaning that it will _not_ unsubscribe the\r\n * source when the reference counter drops to zero, i.e. the inner `ReplaySubject` will _not_ be unsubscribed\r\n * (and potentially run for ever).\r\n * This is the default as it is expected that `shareReplay` is often used to keep around expensive to setup\r\n * observables which we want to keep running instead of having to do the expensive setup again.\r\n *\r\n * As of RXJS version 6.4.0 a new overload signature was added to allow for manual control over what\r\n * happens when the operators internal reference counter drops to zero.\r\n * If `refCount` is true, the source will be unsubscribed from once the reference count drops to zero, i.e.\r\n * the inner `ReplaySubject` will be unsubscribed. All new subscribers will receive value emissions from a\r\n * new `ReplaySubject` which in turn will cause a new subscription to the source observable.\r\n *\r\n * ## Examples\r\n *\r\n * Example with a third subscriber coming late to the party\r\n *\r\n * ```ts\r\n * import { interval, take, shareReplay } from 'rxjs';\r\n *\r\n * const shared$ = interval(2000).pipe(\r\n *   take(6),\r\n *   shareReplay(3)\r\n * );\r\n *\r\n * shared$.subscribe(x => console.log('sub A: ', x));\r\n * shared$.subscribe(y => console.log('sub B: ', y));\r\n *\r\n * setTimeout(() => {\r\n *   shared$.subscribe(y => console.log('sub C: ', y));\r\n * }, 11000);\r\n *\r\n * // Logs:\r\n * // (after ~2000 ms)\r\n * // sub A: 0\r\n * // sub B: 0\r\n * // (after ~4000 ms)\r\n * // sub A: 1\r\n * // sub B: 1\r\n * // (after ~6000 ms)\r\n * // sub A: 2\r\n * // sub B: 2\r\n * // (after ~8000 ms)\r\n * // sub A: 3\r\n * // sub B: 3\r\n * // (after ~10000 ms)\r\n * // sub A: 4\r\n * // sub B: 4\r\n * // (after ~11000 ms, sub C gets the last 3 values)\r\n * // sub C: 2\r\n * // sub C: 3\r\n * // sub C: 4\r\n * // (after ~12000 ms)\r\n * // sub A: 5\r\n * // sub B: 5\r\n * // sub C: 5\r\n * ```\r\n *\r\n * Example for `refCount` usage\r\n *\r\n * ```ts\r\n * import { Observable, tap, interval, shareReplay, take } from 'rxjs';\r\n *\r\n * const log = <T>(name: string, source: Observable<T>) => source.pipe(\r\n *   tap({\r\n *     subscribe: () => console.log(`${ name }: subscribed`),\r\n *     next: value => console.log(`${ name }: ${ value }`),\r\n *     complete: () => console.log(`${ name }: completed`),\r\n *     finalize: () => console.log(`${ name }: unsubscribed`)\r\n *   })\r\n * );\r\n *\r\n * const obs$ = log('source', interval(1000));\r\n *\r\n * const shared$ = log('shared', obs$.pipe(\r\n *   shareReplay({ bufferSize: 1, refCount: true }),\r\n *   take(2)\r\n * ));\r\n *\r\n * shared$.subscribe(x => console.log('sub A: ', x));\r\n * shared$.subscribe(y => console.log('sub B: ', y));\r\n *\r\n * // PRINTS:\r\n * // shared: subscribed <-- reference count = 1\r\n * // source: subscribed\r\n * // shared: subscribed <-- reference count = 2\r\n * // source: 0\r\n * // shared: 0\r\n * // sub A: 0\r\n * // shared: 0\r\n * // sub B: 0\r\n * // source: 1\r\n * // shared: 1\r\n * // sub A: 1\r\n * // shared: completed <-- take(2) completes the subscription for sub A\r\n * // shared: unsubscribed <-- reference count = 1\r\n * // shared: 1\r\n * // sub B: 1\r\n * // shared: completed <-- take(2) completes the subscription for sub B\r\n * // shared: unsubscribed <-- reference count = 0\r\n * // source: unsubscribed <-- replaySubject unsubscribes from source observable because the reference count dropped to 0 and refCount is true\r\n *\r\n * // In case of refCount being false, the unsubscribe is never called on the source and the source would keep on emitting, even if no subscribers\r\n * // are listening.\r\n * // source: 2\r\n * // source: 3\r\n * // source: 4\r\n * // ...\r\n * ```\r\n *\r\n * @see {@link publish}\r\n * @see {@link share}\r\n * @see {@link publishReplay}\r\n *\r\n * @param configOrBufferSize Maximum element count of the replay buffer or {@link ShareReplayConfig configuration}\r\n * object.\r\n * @param windowTime Maximum time length of the replay buffer in milliseconds.\r\n * @param scheduler Scheduler where connected observers within the selector function\r\n * will be invoked on.\r\n * @return A function that returns an Observable sequence that contains the\r\n * elements of a sequence produced by multicasting the source sequence within a\r\n * selector function.\r\n */\r\nexport function shareReplay<T>(\r\n  configOrBufferSize?: ShareReplayConfig | number,\r\n  windowTime?: number,\r\n  scheduler?: SchedulerLike\r\n): MonoTypeOperatorFunction<T> {\r\n  let bufferSize: number;\r\n  let refCount = false;\r\n  if (configOrBufferSize && typeof configOrBufferSize === 'object') {\r\n    ({ bufferSize = Infinity, windowTime = Infinity, refCount = false, scheduler } = configOrBufferSize);\r\n  } else {\r\n    bufferSize = (configOrBufferSize ?? Infinity) as number;\r\n  }\r\n  return share<T>({\r\n    connector: () => new ReplaySubject(bufferSize, windowTime, scheduler),\r\n    resetOnError: true,\r\n    resetOnComplete: false,\r\n    resetOnRefCountZero: refCount,\r\n  });\r\n}\r\n"]},"metadata":{},"sourceType":"module"}