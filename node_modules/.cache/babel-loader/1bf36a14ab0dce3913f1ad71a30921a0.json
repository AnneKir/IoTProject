{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Socket = void 0;\nconst index_js_1 = require(\"./transports/index.js\");\nconst util_js_1 = require(\"./util.js\");\nconst parseqs_js_1 = require(\"./contrib/parseqs.js\");\nconst parseuri_js_1 = require(\"./contrib/parseuri.js\");\nconst debug_1 = __importDefault(require(\"debug\")); // debug()\nconst component_emitter_1 = require(\"@socket.io/component-emitter\");\nconst engine_io_parser_1 = require(\"engine.io-parser\");\nconst debug = (0, debug_1.default)(\"engine.io-client:socket\"); // debug()\nclass Socket extends component_emitter_1.Emitter {\n  /**\r\n   * Socket constructor.\r\n   *\r\n   * @param {String|Object} uri or options\r\n   * @param {Object} opts - options\r\n   * @api public\r\n   */\n  constructor(uri) {\n    let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    super();\n    if (uri && \"object\" === typeof uri) {\n      opts = uri;\n      uri = null;\n    }\n    if (uri) {\n      uri = (0, parseuri_js_1.parse)(uri);\n      opts.hostname = uri.host;\n      opts.secure = uri.protocol === \"https\" || uri.protocol === \"wss\";\n      opts.port = uri.port;\n      if (uri.query) opts.query = uri.query;\n    } else if (opts.host) {\n      opts.hostname = (0, parseuri_js_1.parse)(opts.host).host;\n    }\n    (0, util_js_1.installTimerFunctions)(this, opts);\n    this.secure = null != opts.secure ? opts.secure : typeof location !== \"undefined\" && \"https:\" === location.protocol;\n    if (opts.hostname && !opts.port) {\n      // if no port is specified manually, use the protocol default\n      opts.port = this.secure ? \"443\" : \"80\";\n    }\n    this.hostname = opts.hostname || (typeof location !== \"undefined\" ? location.hostname : \"localhost\");\n    this.port = opts.port || (typeof location !== \"undefined\" && location.port ? location.port : this.secure ? \"443\" : \"80\");\n    this.transports = opts.transports || [\"polling\", \"websocket\"];\n    this.readyState = \"\";\n    this.writeBuffer = [];\n    this.prevBufferLen = 0;\n    this.opts = Object.assign({\n      path: \"/engine.io\",\n      agent: false,\n      withCredentials: false,\n      upgrade: true,\n      timestampParam: \"t\",\n      rememberUpgrade: false,\n      rejectUnauthorized: true,\n      perMessageDeflate: {\n        threshold: 1024\n      },\n      transportOptions: {},\n      closeOnBeforeunload: true\n    }, opts);\n    this.opts.path = this.opts.path.replace(/\\/$/, \"\") + \"/\";\n    if (typeof this.opts.query === \"string\") {\n      this.opts.query = (0, parseqs_js_1.decode)(this.opts.query);\n    }\n    // set on handshake\n    this.id = null;\n    this.upgrades = null;\n    this.pingInterval = null;\n    this.pingTimeout = null;\n    // set on heartbeat\n    this.pingTimeoutTimer = null;\n    if (typeof addEventListener === \"function\") {\n      if (this.opts.closeOnBeforeunload) {\n        // Firefox closes the connection when the \"beforeunload\" event is emitted but not Chrome. This event listener\n        // ensures every browser behaves the same (no \"disconnect\" event at the Socket.IO level when the page is\n        // closed/reloaded)\n        this.beforeunloadEventListener = () => {\n          if (this.transport) {\n            // silently close the transport\n            this.transport.removeAllListeners();\n            this.transport.close();\n          }\n        };\n        addEventListener(\"beforeunload\", this.beforeunloadEventListener, false);\n      }\n      if (this.hostname !== \"localhost\") {\n        this.offlineEventListener = () => {\n          this.onClose(\"transport close\", {\n            description: \"network connection lost\"\n          });\n        };\n        addEventListener(\"offline\", this.offlineEventListener, false);\n      }\n    }\n    this.open();\n  }\n  /**\r\n   * Creates transport of the given type.\r\n   *\r\n   * @param {String} transport name\r\n   * @return {Transport}\r\n   * @api private\r\n   */\n  createTransport(name) {\n    debug('creating transport \"%s\"', name);\n    const query = Object.assign({}, this.opts.query);\n    // append engine.io protocol identifier\n    query.EIO = engine_io_parser_1.protocol;\n    // transport name\n    query.transport = name;\n    // session id if we already have one\n    if (this.id) query.sid = this.id;\n    const opts = Object.assign({}, this.opts.transportOptions[name], this.opts, {\n      query,\n      socket: this,\n      hostname: this.hostname,\n      secure: this.secure,\n      port: this.port\n    });\n    debug(\"options: %j\", opts);\n    return new index_js_1.transports[name](opts);\n  }\n  /**\r\n   * Initializes transport to use and starts probe.\r\n   *\r\n   * @api private\r\n   */\n  open() {\n    let transport;\n    if (this.opts.rememberUpgrade && Socket.priorWebsocketSuccess && this.transports.indexOf(\"websocket\") !== -1) {\n      transport = \"websocket\";\n    } else if (0 === this.transports.length) {\n      // Emit error on next tick so it can be listened to\n      this.setTimeoutFn(() => {\n        this.emitReserved(\"error\", \"No transports available\");\n      }, 0);\n      return;\n    } else {\n      transport = this.transports[0];\n    }\n    this.readyState = \"opening\";\n    // Retry with the next transport if the transport is disabled (jsonp: false)\n    try {\n      transport = this.createTransport(transport);\n    } catch (e) {\n      debug(\"error while creating transport: %s\", e);\n      this.transports.shift();\n      this.open();\n      return;\n    }\n    transport.open();\n    this.setTransport(transport);\n  }\n  /**\r\n   * Sets the current transport. Disables the existing one (if any).\r\n   *\r\n   * @api private\r\n   */\n  setTransport(transport) {\n    debug(\"setting transport %s\", transport.name);\n    if (this.transport) {\n      debug(\"clearing existing transport %s\", this.transport.name);\n      this.transport.removeAllListeners();\n    }\n    // set up transport\n    this.transport = transport;\n    // set up transport listeners\n    transport.on(\"drain\", this.onDrain.bind(this)).on(\"packet\", this.onPacket.bind(this)).on(\"error\", this.onError.bind(this)).on(\"close\", reason => this.onClose(\"transport close\", reason));\n  }\n  /**\r\n   * Probes a transport.\r\n   *\r\n   * @param {String} transport name\r\n   * @api private\r\n   */\n  probe(name) {\n    debug('probing transport \"%s\"', name);\n    let transport = this.createTransport(name);\n    let failed = false;\n    Socket.priorWebsocketSuccess = false;\n    const onTransportOpen = () => {\n      if (failed) return;\n      debug('probe transport \"%s\" opened', name);\n      transport.send([{\n        type: \"ping\",\n        data: \"probe\"\n      }]);\n      transport.once(\"packet\", msg => {\n        if (failed) return;\n        if (\"pong\" === msg.type && \"probe\" === msg.data) {\n          debug('probe transport \"%s\" pong', name);\n          this.upgrading = true;\n          this.emitReserved(\"upgrading\", transport);\n          if (!transport) return;\n          Socket.priorWebsocketSuccess = \"websocket\" === transport.name;\n          debug('pausing current transport \"%s\"', this.transport.name);\n          this.transport.pause(() => {\n            if (failed) return;\n            if (\"closed\" === this.readyState) return;\n            debug(\"changing transport and sending upgrade packet\");\n            cleanup();\n            this.setTransport(transport);\n            transport.send([{\n              type: \"upgrade\"\n            }]);\n            this.emitReserved(\"upgrade\", transport);\n            transport = null;\n            this.upgrading = false;\n            this.flush();\n          });\n        } else {\n          debug('probe transport \"%s\" failed', name);\n          const err = new Error(\"probe error\");\n          // @ts-ignore\n          err.transport = transport.name;\n          this.emitReserved(\"upgradeError\", err);\n        }\n      });\n    };\n    function freezeTransport() {\n      if (failed) return;\n      // Any callback called by transport should be ignored since now\n      failed = true;\n      cleanup();\n      transport.close();\n      transport = null;\n    }\n    // Handle any error that happens while probing\n    const onerror = err => {\n      const error = new Error(\"probe error: \" + err);\n      // @ts-ignore\n      error.transport = transport.name;\n      freezeTransport();\n      debug('probe transport \"%s\" failed because of error: %s', name, err);\n      this.emitReserved(\"upgradeError\", error);\n    };\n    function onTransportClose() {\n      onerror(\"transport closed\");\n    }\n    // When the socket is closed while we're probing\n    function onclose() {\n      onerror(\"socket closed\");\n    }\n    // When the socket is upgraded while we're probing\n    function onupgrade(to) {\n      if (transport && to.name !== transport.name) {\n        debug('\"%s\" works - aborting \"%s\"', to.name, transport.name);\n        freezeTransport();\n      }\n    }\n    // Remove all listeners on the transport and on self\n    const cleanup = () => {\n      transport.removeListener(\"open\", onTransportOpen);\n      transport.removeListener(\"error\", onerror);\n      transport.removeListener(\"close\", onTransportClose);\n      this.off(\"close\", onclose);\n      this.off(\"upgrading\", onupgrade);\n    };\n    transport.once(\"open\", onTransportOpen);\n    transport.once(\"error\", onerror);\n    transport.once(\"close\", onTransportClose);\n    this.once(\"close\", onclose);\n    this.once(\"upgrading\", onupgrade);\n    transport.open();\n  }\n  /**\r\n   * Called when connection is deemed open.\r\n   *\r\n   * @api private\r\n   */\n  onOpen() {\n    debug(\"socket open\");\n    this.readyState = \"open\";\n    Socket.priorWebsocketSuccess = \"websocket\" === this.transport.name;\n    this.emitReserved(\"open\");\n    this.flush();\n    // we check for `readyState` in case an `open`\n    // listener already closed the socket\n    if (\"open\" === this.readyState && this.opts.upgrade && this.transport.pause) {\n      debug(\"starting upgrade probes\");\n      let i = 0;\n      const l = this.upgrades.length;\n      for (; i < l; i++) {\n        this.probe(this.upgrades[i]);\n      }\n    }\n  }\n  /**\r\n   * Handles a packet.\r\n   *\r\n   * @api private\r\n   */\n  onPacket(packet) {\n    if (\"opening\" === this.readyState || \"open\" === this.readyState || \"closing\" === this.readyState) {\n      debug('socket receive: type \"%s\", data \"%s\"', packet.type, packet.data);\n      this.emitReserved(\"packet\", packet);\n      // Socket is live - any packet counts\n      this.emitReserved(\"heartbeat\");\n      switch (packet.type) {\n        case \"open\":\n          this.onHandshake(JSON.parse(packet.data));\n          break;\n        case \"ping\":\n          this.resetPingTimeout();\n          this.sendPacket(\"pong\");\n          this.emitReserved(\"ping\");\n          this.emitReserved(\"pong\");\n          break;\n        case \"error\":\n          const err = new Error(\"server error\");\n          // @ts-ignore\n          err.code = packet.data;\n          this.onError(err);\n          break;\n        case \"message\":\n          this.emitReserved(\"data\", packet.data);\n          this.emitReserved(\"message\", packet.data);\n          break;\n      }\n    } else {\n      debug('packet received with socket readyState \"%s\"', this.readyState);\n    }\n  }\n  /**\r\n   * Called upon handshake completion.\r\n   *\r\n   * @param {Object} data - handshake obj\r\n   * @api private\r\n   */\n  onHandshake(data) {\n    this.emitReserved(\"handshake\", data);\n    this.id = data.sid;\n    this.transport.query.sid = data.sid;\n    this.upgrades = this.filterUpgrades(data.upgrades);\n    this.pingInterval = data.pingInterval;\n    this.pingTimeout = data.pingTimeout;\n    this.maxPayload = data.maxPayload;\n    this.onOpen();\n    // In case open handler closes socket\n    if (\"closed\" === this.readyState) return;\n    this.resetPingTimeout();\n  }\n  /**\r\n   * Sets and resets ping timeout timer based on server pings.\r\n   *\r\n   * @api private\r\n   */\n  resetPingTimeout() {\n    this.clearTimeoutFn(this.pingTimeoutTimer);\n    this.pingTimeoutTimer = this.setTimeoutFn(() => {\n      this.onClose(\"ping timeout\");\n    }, this.pingInterval + this.pingTimeout);\n    if (this.opts.autoUnref) {\n      this.pingTimeoutTimer.unref();\n    }\n  }\n  /**\r\n   * Called on `drain` event\r\n   *\r\n   * @api private\r\n   */\n  onDrain() {\n    this.writeBuffer.splice(0, this.prevBufferLen);\n    // setting prevBufferLen = 0 is very important\n    // for example, when upgrading, upgrade packet is sent over,\n    // and a nonzero prevBufferLen could cause problems on `drain`\n    this.prevBufferLen = 0;\n    if (0 === this.writeBuffer.length) {\n      this.emitReserved(\"drain\");\n    } else {\n      this.flush();\n    }\n  }\n  /**\r\n   * Flush write buffers.\r\n   *\r\n   * @api private\r\n   */\n  flush() {\n    if (\"closed\" !== this.readyState && this.transport.writable && !this.upgrading && this.writeBuffer.length) {\n      const packets = this.getWritablePackets();\n      debug(\"flushing %d packets in socket\", packets.length);\n      this.transport.send(packets);\n      // keep track of current length of writeBuffer\n      // splice writeBuffer and callbackBuffer on `drain`\n      this.prevBufferLen = packets.length;\n      this.emitReserved(\"flush\");\n    }\n  }\n  /**\r\n   * Ensure the encoded size of the writeBuffer is below the maxPayload value sent by the server (only for HTTP\r\n   * long-polling)\r\n   *\r\n   * @private\r\n   */\n  getWritablePackets() {\n    const shouldCheckPayloadSize = this.maxPayload && this.transport.name === \"polling\" && this.writeBuffer.length > 1;\n    if (!shouldCheckPayloadSize) {\n      return this.writeBuffer;\n    }\n    let payloadSize = 1; // first packet type\n    for (let i = 0; i < this.writeBuffer.length; i++) {\n      const data = this.writeBuffer[i].data;\n      if (data) {\n        payloadSize += (0, util_js_1.byteLength)(data);\n      }\n      if (i > 0 && payloadSize > this.maxPayload) {\n        debug(\"only send %d out of %d packets\", i, this.writeBuffer.length);\n        return this.writeBuffer.slice(0, i);\n      }\n      payloadSize += 2; // separator + packet type\n    }\n\n    debug(\"payload size is %d (max: %d)\", payloadSize, this.maxPayload);\n    return this.writeBuffer;\n  }\n  /**\r\n   * Sends a message.\r\n   *\r\n   * @param {String} message.\r\n   * @param {Function} callback function.\r\n   * @param {Object} options.\r\n   * @return {Socket} for chaining.\r\n   * @api public\r\n   */\n  write(msg, options, fn) {\n    this.sendPacket(\"message\", msg, options, fn);\n    return this;\n  }\n  send(msg, options, fn) {\n    this.sendPacket(\"message\", msg, options, fn);\n    return this;\n  }\n  /**\r\n   * Sends a packet.\r\n   *\r\n   * @param {String} packet type.\r\n   * @param {String} data.\r\n   * @param {Object} options.\r\n   * @param {Function} callback function.\r\n   * @api private\r\n   */\n  sendPacket(type, data, options, fn) {\n    if (\"function\" === typeof data) {\n      fn = data;\n      data = undefined;\n    }\n    if (\"function\" === typeof options) {\n      fn = options;\n      options = null;\n    }\n    if (\"closing\" === this.readyState || \"closed\" === this.readyState) {\n      return;\n    }\n    options = options || {};\n    options.compress = false !== options.compress;\n    const packet = {\n      type: type,\n      data: data,\n      options: options\n    };\n    this.emitReserved(\"packetCreate\", packet);\n    this.writeBuffer.push(packet);\n    if (fn) this.once(\"flush\", fn);\n    this.flush();\n  }\n  /**\r\n   * Closes the connection.\r\n   *\r\n   * @api public\r\n   */\n  close() {\n    const close = () => {\n      this.onClose(\"forced close\");\n      debug(\"socket closing - telling transport to close\");\n      this.transport.close();\n    };\n    const cleanupAndClose = () => {\n      this.off(\"upgrade\", cleanupAndClose);\n      this.off(\"upgradeError\", cleanupAndClose);\n      close();\n    };\n    const waitForUpgrade = () => {\n      // wait for upgrade to finish since we can't send packets while pausing a transport\n      this.once(\"upgrade\", cleanupAndClose);\n      this.once(\"upgradeError\", cleanupAndClose);\n    };\n    if (\"opening\" === this.readyState || \"open\" === this.readyState) {\n      this.readyState = \"closing\";\n      if (this.writeBuffer.length) {\n        this.once(\"drain\", () => {\n          if (this.upgrading) {\n            waitForUpgrade();\n          } else {\n            close();\n          }\n        });\n      } else if (this.upgrading) {\n        waitForUpgrade();\n      } else {\n        close();\n      }\n    }\n    return this;\n  }\n  /**\r\n   * Called upon transport error\r\n   *\r\n   * @api private\r\n   */\n  onError(err) {\n    debug(\"socket error %j\", err);\n    Socket.priorWebsocketSuccess = false;\n    this.emitReserved(\"error\", err);\n    this.onClose(\"transport error\", err);\n  }\n  /**\r\n   * Called upon transport close.\r\n   *\r\n   * @api private\r\n   */\n  onClose(reason, description) {\n    if (\"opening\" === this.readyState || \"open\" === this.readyState || \"closing\" === this.readyState) {\n      debug('socket close with reason: \"%s\"', reason);\n      // clear timers\n      this.clearTimeoutFn(this.pingTimeoutTimer);\n      // stop event from firing again for transport\n      this.transport.removeAllListeners(\"close\");\n      // ensure transport won't stay open\n      this.transport.close();\n      // ignore further transport communication\n      this.transport.removeAllListeners();\n      if (typeof removeEventListener === \"function\") {\n        removeEventListener(\"beforeunload\", this.beforeunloadEventListener, false);\n        removeEventListener(\"offline\", this.offlineEventListener, false);\n      }\n      // set ready state\n      this.readyState = \"closed\";\n      // clear session id\n      this.id = null;\n      // emit close event\n      this.emitReserved(\"close\", reason, description);\n      // clean buffers after, so users can still\n      // grab the buffers on `close` event\n      this.writeBuffer = [];\n      this.prevBufferLen = 0;\n    }\n  }\n  /**\r\n   * Filters upgrades, returning only those matching client transports.\r\n   *\r\n   * @param {Array} server upgrades\r\n   * @api private\r\n   *\r\n   */\n  filterUpgrades(upgrades) {\n    const filteredUpgrades = [];\n    let i = 0;\n    const j = upgrades.length;\n    for (; i < j; i++) {\n      if (~this.transports.indexOf(upgrades[i])) filteredUpgrades.push(upgrades[i]);\n    }\n    return filteredUpgrades;\n  }\n}\nexports.Socket = Socket;\nSocket.protocol = engine_io_parser_1.protocol;","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","Socket","index_js_1","require","util_js_1","parseqs_js_1","parseuri_js_1","debug_1","component_emitter_1","engine_io_parser_1","debug","default","Emitter","constructor","uri","opts","parse","hostname","host","secure","protocol","port","query","installTimerFunctions","location","transports","readyState","writeBuffer","prevBufferLen","assign","path","agent","withCredentials","upgrade","timestampParam","rememberUpgrade","rejectUnauthorized","perMessageDeflate","threshold","transportOptions","closeOnBeforeunload","replace","decode","id","upgrades","pingInterval","pingTimeout","pingTimeoutTimer","addEventListener","beforeunloadEventListener","transport","removeAllListeners","close","offlineEventListener","onClose","description","open","createTransport","name","EIO","sid","socket","priorWebsocketSuccess","indexOf","length","setTimeoutFn","emitReserved","e","shift","setTransport","on","onDrain","bind","onPacket","onError","reason","probe","failed","onTransportOpen","send","type","data","once","msg","upgrading","pause","cleanup","flush","err","Error","freezeTransport","onerror","error","onTransportClose","onclose","onupgrade","to","removeListener","off","onOpen","i","l","packet","onHandshake","JSON","resetPingTimeout","sendPacket","code","filterUpgrades","maxPayload","clearTimeoutFn","autoUnref","unref","splice","writable","packets","getWritablePackets","shouldCheckPayloadSize","payloadSize","byteLength","slice","write","options","fn","undefined","compress","push","cleanupAndClose","waitForUpgrade","removeEventListener","filteredUpgrades","j"],"sources":["C:/Users/annek/Documents/Github/IoTProject/node_modules/engine.io-client/build/cjs/socket.js"],"sourcesContent":["\"use strict\";\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Socket = void 0;\r\nconst index_js_1 = require(\"./transports/index.js\");\r\nconst util_js_1 = require(\"./util.js\");\r\nconst parseqs_js_1 = require(\"./contrib/parseqs.js\");\r\nconst parseuri_js_1 = require(\"./contrib/parseuri.js\");\r\nconst debug_1 = __importDefault(require(\"debug\")); // debug()\r\nconst component_emitter_1 = require(\"@socket.io/component-emitter\");\r\nconst engine_io_parser_1 = require(\"engine.io-parser\");\r\nconst debug = (0, debug_1.default)(\"engine.io-client:socket\"); // debug()\r\nclass Socket extends component_emitter_1.Emitter {\r\n    /**\r\n     * Socket constructor.\r\n     *\r\n     * @param {String|Object} uri or options\r\n     * @param {Object} opts - options\r\n     * @api public\r\n     */\r\n    constructor(uri, opts = {}) {\r\n        super();\r\n        if (uri && \"object\" === typeof uri) {\r\n            opts = uri;\r\n            uri = null;\r\n        }\r\n        if (uri) {\r\n            uri = (0, parseuri_js_1.parse)(uri);\r\n            opts.hostname = uri.host;\r\n            opts.secure = uri.protocol === \"https\" || uri.protocol === \"wss\";\r\n            opts.port = uri.port;\r\n            if (uri.query)\r\n                opts.query = uri.query;\r\n        }\r\n        else if (opts.host) {\r\n            opts.hostname = (0, parseuri_js_1.parse)(opts.host).host;\r\n        }\r\n        (0, util_js_1.installTimerFunctions)(this, opts);\r\n        this.secure =\r\n            null != opts.secure\r\n                ? opts.secure\r\n                : typeof location !== \"undefined\" && \"https:\" === location.protocol;\r\n        if (opts.hostname && !opts.port) {\r\n            // if no port is specified manually, use the protocol default\r\n            opts.port = this.secure ? \"443\" : \"80\";\r\n        }\r\n        this.hostname =\r\n            opts.hostname ||\r\n                (typeof location !== \"undefined\" ? location.hostname : \"localhost\");\r\n        this.port =\r\n            opts.port ||\r\n                (typeof location !== \"undefined\" && location.port\r\n                    ? location.port\r\n                    : this.secure\r\n                        ? \"443\"\r\n                        : \"80\");\r\n        this.transports = opts.transports || [\"polling\", \"websocket\"];\r\n        this.readyState = \"\";\r\n        this.writeBuffer = [];\r\n        this.prevBufferLen = 0;\r\n        this.opts = Object.assign({\r\n            path: \"/engine.io\",\r\n            agent: false,\r\n            withCredentials: false,\r\n            upgrade: true,\r\n            timestampParam: \"t\",\r\n            rememberUpgrade: false,\r\n            rejectUnauthorized: true,\r\n            perMessageDeflate: {\r\n                threshold: 1024\r\n            },\r\n            transportOptions: {},\r\n            closeOnBeforeunload: true\r\n        }, opts);\r\n        this.opts.path = this.opts.path.replace(/\\/$/, \"\") + \"/\";\r\n        if (typeof this.opts.query === \"string\") {\r\n            this.opts.query = (0, parseqs_js_1.decode)(this.opts.query);\r\n        }\r\n        // set on handshake\r\n        this.id = null;\r\n        this.upgrades = null;\r\n        this.pingInterval = null;\r\n        this.pingTimeout = null;\r\n        // set on heartbeat\r\n        this.pingTimeoutTimer = null;\r\n        if (typeof addEventListener === \"function\") {\r\n            if (this.opts.closeOnBeforeunload) {\r\n                // Firefox closes the connection when the \"beforeunload\" event is emitted but not Chrome. This event listener\r\n                // ensures every browser behaves the same (no \"disconnect\" event at the Socket.IO level when the page is\r\n                // closed/reloaded)\r\n                this.beforeunloadEventListener = () => {\r\n                    if (this.transport) {\r\n                        // silently close the transport\r\n                        this.transport.removeAllListeners();\r\n                        this.transport.close();\r\n                    }\r\n                };\r\n                addEventListener(\"beforeunload\", this.beforeunloadEventListener, false);\r\n            }\r\n            if (this.hostname !== \"localhost\") {\r\n                this.offlineEventListener = () => {\r\n                    this.onClose(\"transport close\", {\r\n                        description: \"network connection lost\"\r\n                    });\r\n                };\r\n                addEventListener(\"offline\", this.offlineEventListener, false);\r\n            }\r\n        }\r\n        this.open();\r\n    }\r\n    /**\r\n     * Creates transport of the given type.\r\n     *\r\n     * @param {String} transport name\r\n     * @return {Transport}\r\n     * @api private\r\n     */\r\n    createTransport(name) {\r\n        debug('creating transport \"%s\"', name);\r\n        const query = Object.assign({}, this.opts.query);\r\n        // append engine.io protocol identifier\r\n        query.EIO = engine_io_parser_1.protocol;\r\n        // transport name\r\n        query.transport = name;\r\n        // session id if we already have one\r\n        if (this.id)\r\n            query.sid = this.id;\r\n        const opts = Object.assign({}, this.opts.transportOptions[name], this.opts, {\r\n            query,\r\n            socket: this,\r\n            hostname: this.hostname,\r\n            secure: this.secure,\r\n            port: this.port\r\n        });\r\n        debug(\"options: %j\", opts);\r\n        return new index_js_1.transports[name](opts);\r\n    }\r\n    /**\r\n     * Initializes transport to use and starts probe.\r\n     *\r\n     * @api private\r\n     */\r\n    open() {\r\n        let transport;\r\n        if (this.opts.rememberUpgrade &&\r\n            Socket.priorWebsocketSuccess &&\r\n            this.transports.indexOf(\"websocket\") !== -1) {\r\n            transport = \"websocket\";\r\n        }\r\n        else if (0 === this.transports.length) {\r\n            // Emit error on next tick so it can be listened to\r\n            this.setTimeoutFn(() => {\r\n                this.emitReserved(\"error\", \"No transports available\");\r\n            }, 0);\r\n            return;\r\n        }\r\n        else {\r\n            transport = this.transports[0];\r\n        }\r\n        this.readyState = \"opening\";\r\n        // Retry with the next transport if the transport is disabled (jsonp: false)\r\n        try {\r\n            transport = this.createTransport(transport);\r\n        }\r\n        catch (e) {\r\n            debug(\"error while creating transport: %s\", e);\r\n            this.transports.shift();\r\n            this.open();\r\n            return;\r\n        }\r\n        transport.open();\r\n        this.setTransport(transport);\r\n    }\r\n    /**\r\n     * Sets the current transport. Disables the existing one (if any).\r\n     *\r\n     * @api private\r\n     */\r\n    setTransport(transport) {\r\n        debug(\"setting transport %s\", transport.name);\r\n        if (this.transport) {\r\n            debug(\"clearing existing transport %s\", this.transport.name);\r\n            this.transport.removeAllListeners();\r\n        }\r\n        // set up transport\r\n        this.transport = transport;\r\n        // set up transport listeners\r\n        transport\r\n            .on(\"drain\", this.onDrain.bind(this))\r\n            .on(\"packet\", this.onPacket.bind(this))\r\n            .on(\"error\", this.onError.bind(this))\r\n            .on(\"close\", reason => this.onClose(\"transport close\", reason));\r\n    }\r\n    /**\r\n     * Probes a transport.\r\n     *\r\n     * @param {String} transport name\r\n     * @api private\r\n     */\r\n    probe(name) {\r\n        debug('probing transport \"%s\"', name);\r\n        let transport = this.createTransport(name);\r\n        let failed = false;\r\n        Socket.priorWebsocketSuccess = false;\r\n        const onTransportOpen = () => {\r\n            if (failed)\r\n                return;\r\n            debug('probe transport \"%s\" opened', name);\r\n            transport.send([{ type: \"ping\", data: \"probe\" }]);\r\n            transport.once(\"packet\", msg => {\r\n                if (failed)\r\n                    return;\r\n                if (\"pong\" === msg.type && \"probe\" === msg.data) {\r\n                    debug('probe transport \"%s\" pong', name);\r\n                    this.upgrading = true;\r\n                    this.emitReserved(\"upgrading\", transport);\r\n                    if (!transport)\r\n                        return;\r\n                    Socket.priorWebsocketSuccess = \"websocket\" === transport.name;\r\n                    debug('pausing current transport \"%s\"', this.transport.name);\r\n                    this.transport.pause(() => {\r\n                        if (failed)\r\n                            return;\r\n                        if (\"closed\" === this.readyState)\r\n                            return;\r\n                        debug(\"changing transport and sending upgrade packet\");\r\n                        cleanup();\r\n                        this.setTransport(transport);\r\n                        transport.send([{ type: \"upgrade\" }]);\r\n                        this.emitReserved(\"upgrade\", transport);\r\n                        transport = null;\r\n                        this.upgrading = false;\r\n                        this.flush();\r\n                    });\r\n                }\r\n                else {\r\n                    debug('probe transport \"%s\" failed', name);\r\n                    const err = new Error(\"probe error\");\r\n                    // @ts-ignore\r\n                    err.transport = transport.name;\r\n                    this.emitReserved(\"upgradeError\", err);\r\n                }\r\n            });\r\n        };\r\n        function freezeTransport() {\r\n            if (failed)\r\n                return;\r\n            // Any callback called by transport should be ignored since now\r\n            failed = true;\r\n            cleanup();\r\n            transport.close();\r\n            transport = null;\r\n        }\r\n        // Handle any error that happens while probing\r\n        const onerror = err => {\r\n            const error = new Error(\"probe error: \" + err);\r\n            // @ts-ignore\r\n            error.transport = transport.name;\r\n            freezeTransport();\r\n            debug('probe transport \"%s\" failed because of error: %s', name, err);\r\n            this.emitReserved(\"upgradeError\", error);\r\n        };\r\n        function onTransportClose() {\r\n            onerror(\"transport closed\");\r\n        }\r\n        // When the socket is closed while we're probing\r\n        function onclose() {\r\n            onerror(\"socket closed\");\r\n        }\r\n        // When the socket is upgraded while we're probing\r\n        function onupgrade(to) {\r\n            if (transport && to.name !== transport.name) {\r\n                debug('\"%s\" works - aborting \"%s\"', to.name, transport.name);\r\n                freezeTransport();\r\n            }\r\n        }\r\n        // Remove all listeners on the transport and on self\r\n        const cleanup = () => {\r\n            transport.removeListener(\"open\", onTransportOpen);\r\n            transport.removeListener(\"error\", onerror);\r\n            transport.removeListener(\"close\", onTransportClose);\r\n            this.off(\"close\", onclose);\r\n            this.off(\"upgrading\", onupgrade);\r\n        };\r\n        transport.once(\"open\", onTransportOpen);\r\n        transport.once(\"error\", onerror);\r\n        transport.once(\"close\", onTransportClose);\r\n        this.once(\"close\", onclose);\r\n        this.once(\"upgrading\", onupgrade);\r\n        transport.open();\r\n    }\r\n    /**\r\n     * Called when connection is deemed open.\r\n     *\r\n     * @api private\r\n     */\r\n    onOpen() {\r\n        debug(\"socket open\");\r\n        this.readyState = \"open\";\r\n        Socket.priorWebsocketSuccess = \"websocket\" === this.transport.name;\r\n        this.emitReserved(\"open\");\r\n        this.flush();\r\n        // we check for `readyState` in case an `open`\r\n        // listener already closed the socket\r\n        if (\"open\" === this.readyState &&\r\n            this.opts.upgrade &&\r\n            this.transport.pause) {\r\n            debug(\"starting upgrade probes\");\r\n            let i = 0;\r\n            const l = this.upgrades.length;\r\n            for (; i < l; i++) {\r\n                this.probe(this.upgrades[i]);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Handles a packet.\r\n     *\r\n     * @api private\r\n     */\r\n    onPacket(packet) {\r\n        if (\"opening\" === this.readyState ||\r\n            \"open\" === this.readyState ||\r\n            \"closing\" === this.readyState) {\r\n            debug('socket receive: type \"%s\", data \"%s\"', packet.type, packet.data);\r\n            this.emitReserved(\"packet\", packet);\r\n            // Socket is live - any packet counts\r\n            this.emitReserved(\"heartbeat\");\r\n            switch (packet.type) {\r\n                case \"open\":\r\n                    this.onHandshake(JSON.parse(packet.data));\r\n                    break;\r\n                case \"ping\":\r\n                    this.resetPingTimeout();\r\n                    this.sendPacket(\"pong\");\r\n                    this.emitReserved(\"ping\");\r\n                    this.emitReserved(\"pong\");\r\n                    break;\r\n                case \"error\":\r\n                    const err = new Error(\"server error\");\r\n                    // @ts-ignore\r\n                    err.code = packet.data;\r\n                    this.onError(err);\r\n                    break;\r\n                case \"message\":\r\n                    this.emitReserved(\"data\", packet.data);\r\n                    this.emitReserved(\"message\", packet.data);\r\n                    break;\r\n            }\r\n        }\r\n        else {\r\n            debug('packet received with socket readyState \"%s\"', this.readyState);\r\n        }\r\n    }\r\n    /**\r\n     * Called upon handshake completion.\r\n     *\r\n     * @param {Object} data - handshake obj\r\n     * @api private\r\n     */\r\n    onHandshake(data) {\r\n        this.emitReserved(\"handshake\", data);\r\n        this.id = data.sid;\r\n        this.transport.query.sid = data.sid;\r\n        this.upgrades = this.filterUpgrades(data.upgrades);\r\n        this.pingInterval = data.pingInterval;\r\n        this.pingTimeout = data.pingTimeout;\r\n        this.maxPayload = data.maxPayload;\r\n        this.onOpen();\r\n        // In case open handler closes socket\r\n        if (\"closed\" === this.readyState)\r\n            return;\r\n        this.resetPingTimeout();\r\n    }\r\n    /**\r\n     * Sets and resets ping timeout timer based on server pings.\r\n     *\r\n     * @api private\r\n     */\r\n    resetPingTimeout() {\r\n        this.clearTimeoutFn(this.pingTimeoutTimer);\r\n        this.pingTimeoutTimer = this.setTimeoutFn(() => {\r\n            this.onClose(\"ping timeout\");\r\n        }, this.pingInterval + this.pingTimeout);\r\n        if (this.opts.autoUnref) {\r\n            this.pingTimeoutTimer.unref();\r\n        }\r\n    }\r\n    /**\r\n     * Called on `drain` event\r\n     *\r\n     * @api private\r\n     */\r\n    onDrain() {\r\n        this.writeBuffer.splice(0, this.prevBufferLen);\r\n        // setting prevBufferLen = 0 is very important\r\n        // for example, when upgrading, upgrade packet is sent over,\r\n        // and a nonzero prevBufferLen could cause problems on `drain`\r\n        this.prevBufferLen = 0;\r\n        if (0 === this.writeBuffer.length) {\r\n            this.emitReserved(\"drain\");\r\n        }\r\n        else {\r\n            this.flush();\r\n        }\r\n    }\r\n    /**\r\n     * Flush write buffers.\r\n     *\r\n     * @api private\r\n     */\r\n    flush() {\r\n        if (\"closed\" !== this.readyState &&\r\n            this.transport.writable &&\r\n            !this.upgrading &&\r\n            this.writeBuffer.length) {\r\n            const packets = this.getWritablePackets();\r\n            debug(\"flushing %d packets in socket\", packets.length);\r\n            this.transport.send(packets);\r\n            // keep track of current length of writeBuffer\r\n            // splice writeBuffer and callbackBuffer on `drain`\r\n            this.prevBufferLen = packets.length;\r\n            this.emitReserved(\"flush\");\r\n        }\r\n    }\r\n    /**\r\n     * Ensure the encoded size of the writeBuffer is below the maxPayload value sent by the server (only for HTTP\r\n     * long-polling)\r\n     *\r\n     * @private\r\n     */\r\n    getWritablePackets() {\r\n        const shouldCheckPayloadSize = this.maxPayload &&\r\n            this.transport.name === \"polling\" &&\r\n            this.writeBuffer.length > 1;\r\n        if (!shouldCheckPayloadSize) {\r\n            return this.writeBuffer;\r\n        }\r\n        let payloadSize = 1; // first packet type\r\n        for (let i = 0; i < this.writeBuffer.length; i++) {\r\n            const data = this.writeBuffer[i].data;\r\n            if (data) {\r\n                payloadSize += (0, util_js_1.byteLength)(data);\r\n            }\r\n            if (i > 0 && payloadSize > this.maxPayload) {\r\n                debug(\"only send %d out of %d packets\", i, this.writeBuffer.length);\r\n                return this.writeBuffer.slice(0, i);\r\n            }\r\n            payloadSize += 2; // separator + packet type\r\n        }\r\n        debug(\"payload size is %d (max: %d)\", payloadSize, this.maxPayload);\r\n        return this.writeBuffer;\r\n    }\r\n    /**\r\n     * Sends a message.\r\n     *\r\n     * @param {String} message.\r\n     * @param {Function} callback function.\r\n     * @param {Object} options.\r\n     * @return {Socket} for chaining.\r\n     * @api public\r\n     */\r\n    write(msg, options, fn) {\r\n        this.sendPacket(\"message\", msg, options, fn);\r\n        return this;\r\n    }\r\n    send(msg, options, fn) {\r\n        this.sendPacket(\"message\", msg, options, fn);\r\n        return this;\r\n    }\r\n    /**\r\n     * Sends a packet.\r\n     *\r\n     * @param {String} packet type.\r\n     * @param {String} data.\r\n     * @param {Object} options.\r\n     * @param {Function} callback function.\r\n     * @api private\r\n     */\r\n    sendPacket(type, data, options, fn) {\r\n        if (\"function\" === typeof data) {\r\n            fn = data;\r\n            data = undefined;\r\n        }\r\n        if (\"function\" === typeof options) {\r\n            fn = options;\r\n            options = null;\r\n        }\r\n        if (\"closing\" === this.readyState || \"closed\" === this.readyState) {\r\n            return;\r\n        }\r\n        options = options || {};\r\n        options.compress = false !== options.compress;\r\n        const packet = {\r\n            type: type,\r\n            data: data,\r\n            options: options\r\n        };\r\n        this.emitReserved(\"packetCreate\", packet);\r\n        this.writeBuffer.push(packet);\r\n        if (fn)\r\n            this.once(\"flush\", fn);\r\n        this.flush();\r\n    }\r\n    /**\r\n     * Closes the connection.\r\n     *\r\n     * @api public\r\n     */\r\n    close() {\r\n        const close = () => {\r\n            this.onClose(\"forced close\");\r\n            debug(\"socket closing - telling transport to close\");\r\n            this.transport.close();\r\n        };\r\n        const cleanupAndClose = () => {\r\n            this.off(\"upgrade\", cleanupAndClose);\r\n            this.off(\"upgradeError\", cleanupAndClose);\r\n            close();\r\n        };\r\n        const waitForUpgrade = () => {\r\n            // wait for upgrade to finish since we can't send packets while pausing a transport\r\n            this.once(\"upgrade\", cleanupAndClose);\r\n            this.once(\"upgradeError\", cleanupAndClose);\r\n        };\r\n        if (\"opening\" === this.readyState || \"open\" === this.readyState) {\r\n            this.readyState = \"closing\";\r\n            if (this.writeBuffer.length) {\r\n                this.once(\"drain\", () => {\r\n                    if (this.upgrading) {\r\n                        waitForUpgrade();\r\n                    }\r\n                    else {\r\n                        close();\r\n                    }\r\n                });\r\n            }\r\n            else if (this.upgrading) {\r\n                waitForUpgrade();\r\n            }\r\n            else {\r\n                close();\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n    /**\r\n     * Called upon transport error\r\n     *\r\n     * @api private\r\n     */\r\n    onError(err) {\r\n        debug(\"socket error %j\", err);\r\n        Socket.priorWebsocketSuccess = false;\r\n        this.emitReserved(\"error\", err);\r\n        this.onClose(\"transport error\", err);\r\n    }\r\n    /**\r\n     * Called upon transport close.\r\n     *\r\n     * @api private\r\n     */\r\n    onClose(reason, description) {\r\n        if (\"opening\" === this.readyState ||\r\n            \"open\" === this.readyState ||\r\n            \"closing\" === this.readyState) {\r\n            debug('socket close with reason: \"%s\"', reason);\r\n            // clear timers\r\n            this.clearTimeoutFn(this.pingTimeoutTimer);\r\n            // stop event from firing again for transport\r\n            this.transport.removeAllListeners(\"close\");\r\n            // ensure transport won't stay open\r\n            this.transport.close();\r\n            // ignore further transport communication\r\n            this.transport.removeAllListeners();\r\n            if (typeof removeEventListener === \"function\") {\r\n                removeEventListener(\"beforeunload\", this.beforeunloadEventListener, false);\r\n                removeEventListener(\"offline\", this.offlineEventListener, false);\r\n            }\r\n            // set ready state\r\n            this.readyState = \"closed\";\r\n            // clear session id\r\n            this.id = null;\r\n            // emit close event\r\n            this.emitReserved(\"close\", reason, description);\r\n            // clean buffers after, so users can still\r\n            // grab the buffers on `close` event\r\n            this.writeBuffer = [];\r\n            this.prevBufferLen = 0;\r\n        }\r\n    }\r\n    /**\r\n     * Filters upgrades, returning only those matching client transports.\r\n     *\r\n     * @param {Array} server upgrades\r\n     * @api private\r\n     *\r\n     */\r\n    filterUpgrades(upgrades) {\r\n        const filteredUpgrades = [];\r\n        let i = 0;\r\n        const j = upgrades.length;\r\n        for (; i < j; i++) {\r\n            if (~this.transports.indexOf(upgrades[i]))\r\n                filteredUpgrades.push(upgrades[i]);\r\n        }\r\n        return filteredUpgrades;\r\n    }\r\n}\r\nexports.Socket = Socket;\r\nSocket.protocol = engine_io_parser_1.protocol;\r\n"],"mappings":"AAAA,YAAY;;AACZ,IAAIA,eAAe,GAAI,IAAI,IAAI,IAAI,CAACA,eAAe,IAAK,UAAUC,GAAG,EAAE;EACnE,OAAQA,GAAG,IAAIA,GAAG,CAACC,UAAU,GAAID,GAAG,GAAG;IAAE,SAAS,EAAEA;EAAI,CAAC;AAC7D,CAAC;AACDE,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,MAAM,GAAG,KAAK,CAAC;AACvB,MAAMC,UAAU,GAAGC,OAAO,CAAC,uBAAuB,CAAC;AACnD,MAAMC,SAAS,GAAGD,OAAO,CAAC,WAAW,CAAC;AACtC,MAAME,YAAY,GAAGF,OAAO,CAAC,sBAAsB,CAAC;AACpD,MAAMG,aAAa,GAAGH,OAAO,CAAC,uBAAuB,CAAC;AACtD,MAAMI,OAAO,GAAGb,eAAe,CAACS,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;AACnD,MAAMK,mBAAmB,GAAGL,OAAO,CAAC,8BAA8B,CAAC;AACnE,MAAMM,kBAAkB,GAAGN,OAAO,CAAC,kBAAkB,CAAC;AACtD,MAAMO,KAAK,GAAG,CAAC,CAAC,EAAEH,OAAO,CAACI,OAAO,EAAE,yBAAyB,CAAC,CAAC,CAAC;AAC/D,MAAMV,MAAM,SAASO,mBAAmB,CAACI,OAAO,CAAC;EAC7C;AACJ;AACA;AACA;AACA;AACA;AACA;EACIC,WAAW,CAACC,GAAG,EAAa;IAAA,IAAXC,IAAI,uEAAG,CAAC,CAAC;IACtB,KAAK,EAAE;IACP,IAAID,GAAG,IAAI,QAAQ,KAAK,OAAOA,GAAG,EAAE;MAChCC,IAAI,GAAGD,GAAG;MACVA,GAAG,GAAG,IAAI;IACd;IACA,IAAIA,GAAG,EAAE;MACLA,GAAG,GAAG,CAAC,CAAC,EAAER,aAAa,CAACU,KAAK,EAAEF,GAAG,CAAC;MACnCC,IAAI,CAACE,QAAQ,GAAGH,GAAG,CAACI,IAAI;MACxBH,IAAI,CAACI,MAAM,GAAGL,GAAG,CAACM,QAAQ,KAAK,OAAO,IAAIN,GAAG,CAACM,QAAQ,KAAK,KAAK;MAChEL,IAAI,CAACM,IAAI,GAAGP,GAAG,CAACO,IAAI;MACpB,IAAIP,GAAG,CAACQ,KAAK,EACTP,IAAI,CAACO,KAAK,GAAGR,GAAG,CAACQ,KAAK;IAC9B,CAAC,MACI,IAAIP,IAAI,CAACG,IAAI,EAAE;MAChBH,IAAI,CAACE,QAAQ,GAAG,CAAC,CAAC,EAAEX,aAAa,CAACU,KAAK,EAAED,IAAI,CAACG,IAAI,CAAC,CAACA,IAAI;IAC5D;IACA,CAAC,CAAC,EAAEd,SAAS,CAACmB,qBAAqB,EAAE,IAAI,EAAER,IAAI,CAAC;IAChD,IAAI,CAACI,MAAM,GACP,IAAI,IAAIJ,IAAI,CAACI,MAAM,GACbJ,IAAI,CAACI,MAAM,GACX,OAAOK,QAAQ,KAAK,WAAW,IAAI,QAAQ,KAAKA,QAAQ,CAACJ,QAAQ;IAC3E,IAAIL,IAAI,CAACE,QAAQ,IAAI,CAACF,IAAI,CAACM,IAAI,EAAE;MAC7B;MACAN,IAAI,CAACM,IAAI,GAAG,IAAI,CAACF,MAAM,GAAG,KAAK,GAAG,IAAI;IAC1C;IACA,IAAI,CAACF,QAAQ,GACTF,IAAI,CAACE,QAAQ,KACR,OAAOO,QAAQ,KAAK,WAAW,GAAGA,QAAQ,CAACP,QAAQ,GAAG,WAAW,CAAC;IAC3E,IAAI,CAACI,IAAI,GACLN,IAAI,CAACM,IAAI,KACJ,OAAOG,QAAQ,KAAK,WAAW,IAAIA,QAAQ,CAACH,IAAI,GAC3CG,QAAQ,CAACH,IAAI,GACb,IAAI,CAACF,MAAM,GACP,KAAK,GACL,IAAI,CAAC;IACvB,IAAI,CAACM,UAAU,GAAGV,IAAI,CAACU,UAAU,IAAI,CAAC,SAAS,EAAE,WAAW,CAAC;IAC7D,IAAI,CAACC,UAAU,GAAG,EAAE;IACpB,IAAI,CAACC,WAAW,GAAG,EAAE;IACrB,IAAI,CAACC,aAAa,GAAG,CAAC;IACtB,IAAI,CAACb,IAAI,GAAGlB,MAAM,CAACgC,MAAM,CAAC;MACtBC,IAAI,EAAE,YAAY;MAClBC,KAAK,EAAE,KAAK;MACZC,eAAe,EAAE,KAAK;MACtBC,OAAO,EAAE,IAAI;MACbC,cAAc,EAAE,GAAG;MACnBC,eAAe,EAAE,KAAK;MACtBC,kBAAkB,EAAE,IAAI;MACxBC,iBAAiB,EAAE;QACfC,SAAS,EAAE;MACf,CAAC;MACDC,gBAAgB,EAAE,CAAC,CAAC;MACpBC,mBAAmB,EAAE;IACzB,CAAC,EAAEzB,IAAI,CAAC;IACR,IAAI,CAACA,IAAI,CAACe,IAAI,GAAG,IAAI,CAACf,IAAI,CAACe,IAAI,CAACW,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,GAAG,GAAG;IACxD,IAAI,OAAO,IAAI,CAAC1B,IAAI,CAACO,KAAK,KAAK,QAAQ,EAAE;MACrC,IAAI,CAACP,IAAI,CAACO,KAAK,GAAG,CAAC,CAAC,EAAEjB,YAAY,CAACqC,MAAM,EAAE,IAAI,CAAC3B,IAAI,CAACO,KAAK,CAAC;IAC/D;IACA;IACA,IAAI,CAACqB,EAAE,GAAG,IAAI;IACd,IAAI,CAACC,QAAQ,GAAG,IAAI;IACpB,IAAI,CAACC,YAAY,GAAG,IAAI;IACxB,IAAI,CAACC,WAAW,GAAG,IAAI;IACvB;IACA,IAAI,CAACC,gBAAgB,GAAG,IAAI;IAC5B,IAAI,OAAOC,gBAAgB,KAAK,UAAU,EAAE;MACxC,IAAI,IAAI,CAACjC,IAAI,CAACyB,mBAAmB,EAAE;QAC/B;QACA;QACA;QACA,IAAI,CAACS,yBAAyB,GAAG,MAAM;UACnC,IAAI,IAAI,CAACC,SAAS,EAAE;YAChB;YACA,IAAI,CAACA,SAAS,CAACC,kBAAkB,EAAE;YACnC,IAAI,CAACD,SAAS,CAACE,KAAK,EAAE;UAC1B;QACJ,CAAC;QACDJ,gBAAgB,CAAC,cAAc,EAAE,IAAI,CAACC,yBAAyB,EAAE,KAAK,CAAC;MAC3E;MACA,IAAI,IAAI,CAAChC,QAAQ,KAAK,WAAW,EAAE;QAC/B,IAAI,CAACoC,oBAAoB,GAAG,MAAM;UAC9B,IAAI,CAACC,OAAO,CAAC,iBAAiB,EAAE;YAC5BC,WAAW,EAAE;UACjB,CAAC,CAAC;QACN,CAAC;QACDP,gBAAgB,CAAC,SAAS,EAAE,IAAI,CAACK,oBAAoB,EAAE,KAAK,CAAC;MACjE;IACJ;IACA,IAAI,CAACG,IAAI,EAAE;EACf;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACIC,eAAe,CAACC,IAAI,EAAE;IAClBhD,KAAK,CAAC,yBAAyB,EAAEgD,IAAI,CAAC;IACtC,MAAMpC,KAAK,GAAGzB,MAAM,CAACgC,MAAM,CAAC,CAAC,CAAC,EAAE,IAAI,CAACd,IAAI,CAACO,KAAK,CAAC;IAChD;IACAA,KAAK,CAACqC,GAAG,GAAGlD,kBAAkB,CAACW,QAAQ;IACvC;IACAE,KAAK,CAAC4B,SAAS,GAAGQ,IAAI;IACtB;IACA,IAAI,IAAI,CAACf,EAAE,EACPrB,KAAK,CAACsC,GAAG,GAAG,IAAI,CAACjB,EAAE;IACvB,MAAM5B,IAAI,GAAGlB,MAAM,CAACgC,MAAM,CAAC,CAAC,CAAC,EAAE,IAAI,CAACd,IAAI,CAACwB,gBAAgB,CAACmB,IAAI,CAAC,EAAE,IAAI,CAAC3C,IAAI,EAAE;MACxEO,KAAK;MACLuC,MAAM,EAAE,IAAI;MACZ5C,QAAQ,EAAE,IAAI,CAACA,QAAQ;MACvBE,MAAM,EAAE,IAAI,CAACA,MAAM;MACnBE,IAAI,EAAE,IAAI,CAACA;IACf,CAAC,CAAC;IACFX,KAAK,CAAC,aAAa,EAAEK,IAAI,CAAC;IAC1B,OAAO,IAAIb,UAAU,CAACuB,UAAU,CAACiC,IAAI,CAAC,CAAC3C,IAAI,CAAC;EAChD;EACA;AACJ;AACA;AACA;AACA;EACIyC,IAAI,GAAG;IACH,IAAIN,SAAS;IACb,IAAI,IAAI,CAACnC,IAAI,CAACoB,eAAe,IACzBlC,MAAM,CAAC6D,qBAAqB,IAC5B,IAAI,CAACrC,UAAU,CAACsC,OAAO,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,EAAE;MAC7Cb,SAAS,GAAG,WAAW;IAC3B,CAAC,MACI,IAAI,CAAC,KAAK,IAAI,CAACzB,UAAU,CAACuC,MAAM,EAAE;MACnC;MACA,IAAI,CAACC,YAAY,CAAC,MAAM;QACpB,IAAI,CAACC,YAAY,CAAC,OAAO,EAAE,yBAAyB,CAAC;MACzD,CAAC,EAAE,CAAC,CAAC;MACL;IACJ,CAAC,MACI;MACDhB,SAAS,GAAG,IAAI,CAACzB,UAAU,CAAC,CAAC,CAAC;IAClC;IACA,IAAI,CAACC,UAAU,GAAG,SAAS;IAC3B;IACA,IAAI;MACAwB,SAAS,GAAG,IAAI,CAACO,eAAe,CAACP,SAAS,CAAC;IAC/C,CAAC,CACD,OAAOiB,CAAC,EAAE;MACNzD,KAAK,CAAC,oCAAoC,EAAEyD,CAAC,CAAC;MAC9C,IAAI,CAAC1C,UAAU,CAAC2C,KAAK,EAAE;MACvB,IAAI,CAACZ,IAAI,EAAE;MACX;IACJ;IACAN,SAAS,CAACM,IAAI,EAAE;IAChB,IAAI,CAACa,YAAY,CAACnB,SAAS,CAAC;EAChC;EACA;AACJ;AACA;AACA;AACA;EACImB,YAAY,CAACnB,SAAS,EAAE;IACpBxC,KAAK,CAAC,sBAAsB,EAAEwC,SAAS,CAACQ,IAAI,CAAC;IAC7C,IAAI,IAAI,CAACR,SAAS,EAAE;MAChBxC,KAAK,CAAC,gCAAgC,EAAE,IAAI,CAACwC,SAAS,CAACQ,IAAI,CAAC;MAC5D,IAAI,CAACR,SAAS,CAACC,kBAAkB,EAAE;IACvC;IACA;IACA,IAAI,CAACD,SAAS,GAAGA,SAAS;IAC1B;IACAA,SAAS,CACJoB,EAAE,CAAC,OAAO,EAAE,IAAI,CAACC,OAAO,CAACC,IAAI,CAAC,IAAI,CAAC,CAAC,CACpCF,EAAE,CAAC,QAAQ,EAAE,IAAI,CAACG,QAAQ,CAACD,IAAI,CAAC,IAAI,CAAC,CAAC,CACtCF,EAAE,CAAC,OAAO,EAAE,IAAI,CAACI,OAAO,CAACF,IAAI,CAAC,IAAI,CAAC,CAAC,CACpCF,EAAE,CAAC,OAAO,EAAEK,MAAM,IAAI,IAAI,CAACrB,OAAO,CAAC,iBAAiB,EAAEqB,MAAM,CAAC,CAAC;EACvE;EACA;AACJ;AACA;AACA;AACA;AACA;EACIC,KAAK,CAAClB,IAAI,EAAE;IACRhD,KAAK,CAAC,wBAAwB,EAAEgD,IAAI,CAAC;IACrC,IAAIR,SAAS,GAAG,IAAI,CAACO,eAAe,CAACC,IAAI,CAAC;IAC1C,IAAImB,MAAM,GAAG,KAAK;IAClB5E,MAAM,CAAC6D,qBAAqB,GAAG,KAAK;IACpC,MAAMgB,eAAe,GAAG,MAAM;MAC1B,IAAID,MAAM,EACN;MACJnE,KAAK,CAAC,6BAA6B,EAAEgD,IAAI,CAAC;MAC1CR,SAAS,CAAC6B,IAAI,CAAC,CAAC;QAAEC,IAAI,EAAE,MAAM;QAAEC,IAAI,EAAE;MAAQ,CAAC,CAAC,CAAC;MACjD/B,SAAS,CAACgC,IAAI,CAAC,QAAQ,EAAEC,GAAG,IAAI;QAC5B,IAAIN,MAAM,EACN;QACJ,IAAI,MAAM,KAAKM,GAAG,CAACH,IAAI,IAAI,OAAO,KAAKG,GAAG,CAACF,IAAI,EAAE;UAC7CvE,KAAK,CAAC,2BAA2B,EAAEgD,IAAI,CAAC;UACxC,IAAI,CAAC0B,SAAS,GAAG,IAAI;UACrB,IAAI,CAAClB,YAAY,CAAC,WAAW,EAAEhB,SAAS,CAAC;UACzC,IAAI,CAACA,SAAS,EACV;UACJjD,MAAM,CAAC6D,qBAAqB,GAAG,WAAW,KAAKZ,SAAS,CAACQ,IAAI;UAC7DhD,KAAK,CAAC,gCAAgC,EAAE,IAAI,CAACwC,SAAS,CAACQ,IAAI,CAAC;UAC5D,IAAI,CAACR,SAAS,CAACmC,KAAK,CAAC,MAAM;YACvB,IAAIR,MAAM,EACN;YACJ,IAAI,QAAQ,KAAK,IAAI,CAACnD,UAAU,EAC5B;YACJhB,KAAK,CAAC,+CAA+C,CAAC;YACtD4E,OAAO,EAAE;YACT,IAAI,CAACjB,YAAY,CAACnB,SAAS,CAAC;YAC5BA,SAAS,CAAC6B,IAAI,CAAC,CAAC;cAAEC,IAAI,EAAE;YAAU,CAAC,CAAC,CAAC;YACrC,IAAI,CAACd,YAAY,CAAC,SAAS,EAAEhB,SAAS,CAAC;YACvCA,SAAS,GAAG,IAAI;YAChB,IAAI,CAACkC,SAAS,GAAG,KAAK;YACtB,IAAI,CAACG,KAAK,EAAE;UAChB,CAAC,CAAC;QACN,CAAC,MACI;UACD7E,KAAK,CAAC,6BAA6B,EAAEgD,IAAI,CAAC;UAC1C,MAAM8B,GAAG,GAAG,IAAIC,KAAK,CAAC,aAAa,CAAC;UACpC;UACAD,GAAG,CAACtC,SAAS,GAAGA,SAAS,CAACQ,IAAI;UAC9B,IAAI,CAACQ,YAAY,CAAC,cAAc,EAAEsB,GAAG,CAAC;QAC1C;MACJ,CAAC,CAAC;IACN,CAAC;IACD,SAASE,eAAe,GAAG;MACvB,IAAIb,MAAM,EACN;MACJ;MACAA,MAAM,GAAG,IAAI;MACbS,OAAO,EAAE;MACTpC,SAAS,CAACE,KAAK,EAAE;MACjBF,SAAS,GAAG,IAAI;IACpB;IACA;IACA,MAAMyC,OAAO,GAAGH,GAAG,IAAI;MACnB,MAAMI,KAAK,GAAG,IAAIH,KAAK,CAAC,eAAe,GAAGD,GAAG,CAAC;MAC9C;MACAI,KAAK,CAAC1C,SAAS,GAAGA,SAAS,CAACQ,IAAI;MAChCgC,eAAe,EAAE;MACjBhF,KAAK,CAAC,kDAAkD,EAAEgD,IAAI,EAAE8B,GAAG,CAAC;MACpE,IAAI,CAACtB,YAAY,CAAC,cAAc,EAAE0B,KAAK,CAAC;IAC5C,CAAC;IACD,SAASC,gBAAgB,GAAG;MACxBF,OAAO,CAAC,kBAAkB,CAAC;IAC/B;IACA;IACA,SAASG,OAAO,GAAG;MACfH,OAAO,CAAC,eAAe,CAAC;IAC5B;IACA;IACA,SAASI,SAAS,CAACC,EAAE,EAAE;MACnB,IAAI9C,SAAS,IAAI8C,EAAE,CAACtC,IAAI,KAAKR,SAAS,CAACQ,IAAI,EAAE;QACzChD,KAAK,CAAC,4BAA4B,EAAEsF,EAAE,CAACtC,IAAI,EAAER,SAAS,CAACQ,IAAI,CAAC;QAC5DgC,eAAe,EAAE;MACrB;IACJ;IACA;IACA,MAAMJ,OAAO,GAAG,MAAM;MAClBpC,SAAS,CAAC+C,cAAc,CAAC,MAAM,EAAEnB,eAAe,CAAC;MACjD5B,SAAS,CAAC+C,cAAc,CAAC,OAAO,EAAEN,OAAO,CAAC;MAC1CzC,SAAS,CAAC+C,cAAc,CAAC,OAAO,EAAEJ,gBAAgB,CAAC;MACnD,IAAI,CAACK,GAAG,CAAC,OAAO,EAAEJ,OAAO,CAAC;MAC1B,IAAI,CAACI,GAAG,CAAC,WAAW,EAAEH,SAAS,CAAC;IACpC,CAAC;IACD7C,SAAS,CAACgC,IAAI,CAAC,MAAM,EAAEJ,eAAe,CAAC;IACvC5B,SAAS,CAACgC,IAAI,CAAC,OAAO,EAAES,OAAO,CAAC;IAChCzC,SAAS,CAACgC,IAAI,CAAC,OAAO,EAAEW,gBAAgB,CAAC;IACzC,IAAI,CAACX,IAAI,CAAC,OAAO,EAAEY,OAAO,CAAC;IAC3B,IAAI,CAACZ,IAAI,CAAC,WAAW,EAAEa,SAAS,CAAC;IACjC7C,SAAS,CAACM,IAAI,EAAE;EACpB;EACA;AACJ;AACA;AACA;AACA;EACI2C,MAAM,GAAG;IACLzF,KAAK,CAAC,aAAa,CAAC;IACpB,IAAI,CAACgB,UAAU,GAAG,MAAM;IACxBzB,MAAM,CAAC6D,qBAAqB,GAAG,WAAW,KAAK,IAAI,CAACZ,SAAS,CAACQ,IAAI;IAClE,IAAI,CAACQ,YAAY,CAAC,MAAM,CAAC;IACzB,IAAI,CAACqB,KAAK,EAAE;IACZ;IACA;IACA,IAAI,MAAM,KAAK,IAAI,CAAC7D,UAAU,IAC1B,IAAI,CAACX,IAAI,CAACkB,OAAO,IACjB,IAAI,CAACiB,SAAS,CAACmC,KAAK,EAAE;MACtB3E,KAAK,CAAC,yBAAyB,CAAC;MAChC,IAAI0F,CAAC,GAAG,CAAC;MACT,MAAMC,CAAC,GAAG,IAAI,CAACzD,QAAQ,CAACoB,MAAM;MAC9B,OAAOoC,CAAC,GAAGC,CAAC,EAAED,CAAC,EAAE,EAAE;QACf,IAAI,CAACxB,KAAK,CAAC,IAAI,CAAChC,QAAQ,CAACwD,CAAC,CAAC,CAAC;MAChC;IACJ;EACJ;EACA;AACJ;AACA;AACA;AACA;EACI3B,QAAQ,CAAC6B,MAAM,EAAE;IACb,IAAI,SAAS,KAAK,IAAI,CAAC5E,UAAU,IAC7B,MAAM,KAAK,IAAI,CAACA,UAAU,IAC1B,SAAS,KAAK,IAAI,CAACA,UAAU,EAAE;MAC/BhB,KAAK,CAAC,sCAAsC,EAAE4F,MAAM,CAACtB,IAAI,EAAEsB,MAAM,CAACrB,IAAI,CAAC;MACvE,IAAI,CAACf,YAAY,CAAC,QAAQ,EAAEoC,MAAM,CAAC;MACnC;MACA,IAAI,CAACpC,YAAY,CAAC,WAAW,CAAC;MAC9B,QAAQoC,MAAM,CAACtB,IAAI;QACf,KAAK,MAAM;UACP,IAAI,CAACuB,WAAW,CAACC,IAAI,CAACxF,KAAK,CAACsF,MAAM,CAACrB,IAAI,CAAC,CAAC;UACzC;QACJ,KAAK,MAAM;UACP,IAAI,CAACwB,gBAAgB,EAAE;UACvB,IAAI,CAACC,UAAU,CAAC,MAAM,CAAC;UACvB,IAAI,CAACxC,YAAY,CAAC,MAAM,CAAC;UACzB,IAAI,CAACA,YAAY,CAAC,MAAM,CAAC;UACzB;QACJ,KAAK,OAAO;UACR,MAAMsB,GAAG,GAAG,IAAIC,KAAK,CAAC,cAAc,CAAC;UACrC;UACAD,GAAG,CAACmB,IAAI,GAAGL,MAAM,CAACrB,IAAI;UACtB,IAAI,CAACP,OAAO,CAACc,GAAG,CAAC;UACjB;QACJ,KAAK,SAAS;UACV,IAAI,CAACtB,YAAY,CAAC,MAAM,EAAEoC,MAAM,CAACrB,IAAI,CAAC;UACtC,IAAI,CAACf,YAAY,CAAC,SAAS,EAAEoC,MAAM,CAACrB,IAAI,CAAC;UACzC;MAAM;IAElB,CAAC,MACI;MACDvE,KAAK,CAAC,6CAA6C,EAAE,IAAI,CAACgB,UAAU,CAAC;IACzE;EACJ;EACA;AACJ;AACA;AACA;AACA;AACA;EACI6E,WAAW,CAACtB,IAAI,EAAE;IACd,IAAI,CAACf,YAAY,CAAC,WAAW,EAAEe,IAAI,CAAC;IACpC,IAAI,CAACtC,EAAE,GAAGsC,IAAI,CAACrB,GAAG;IAClB,IAAI,CAACV,SAAS,CAAC5B,KAAK,CAACsC,GAAG,GAAGqB,IAAI,CAACrB,GAAG;IACnC,IAAI,CAAChB,QAAQ,GAAG,IAAI,CAACgE,cAAc,CAAC3B,IAAI,CAACrC,QAAQ,CAAC;IAClD,IAAI,CAACC,YAAY,GAAGoC,IAAI,CAACpC,YAAY;IACrC,IAAI,CAACC,WAAW,GAAGmC,IAAI,CAACnC,WAAW;IACnC,IAAI,CAAC+D,UAAU,GAAG5B,IAAI,CAAC4B,UAAU;IACjC,IAAI,CAACV,MAAM,EAAE;IACb;IACA,IAAI,QAAQ,KAAK,IAAI,CAACzE,UAAU,EAC5B;IACJ,IAAI,CAAC+E,gBAAgB,EAAE;EAC3B;EACA;AACJ;AACA;AACA;AACA;EACIA,gBAAgB,GAAG;IACf,IAAI,CAACK,cAAc,CAAC,IAAI,CAAC/D,gBAAgB,CAAC;IAC1C,IAAI,CAACA,gBAAgB,GAAG,IAAI,CAACkB,YAAY,CAAC,MAAM;MAC5C,IAAI,CAACX,OAAO,CAAC,cAAc,CAAC;IAChC,CAAC,EAAE,IAAI,CAACT,YAAY,GAAG,IAAI,CAACC,WAAW,CAAC;IACxC,IAAI,IAAI,CAAC/B,IAAI,CAACgG,SAAS,EAAE;MACrB,IAAI,CAAChE,gBAAgB,CAACiE,KAAK,EAAE;IACjC;EACJ;EACA;AACJ;AACA;AACA;AACA;EACIzC,OAAO,GAAG;IACN,IAAI,CAAC5C,WAAW,CAACsF,MAAM,CAAC,CAAC,EAAE,IAAI,CAACrF,aAAa,CAAC;IAC9C;IACA;IACA;IACA,IAAI,CAACA,aAAa,GAAG,CAAC;IACtB,IAAI,CAAC,KAAK,IAAI,CAACD,WAAW,CAACqC,MAAM,EAAE;MAC/B,IAAI,CAACE,YAAY,CAAC,OAAO,CAAC;IAC9B,CAAC,MACI;MACD,IAAI,CAACqB,KAAK,EAAE;IAChB;EACJ;EACA;AACJ;AACA;AACA;AACA;EACIA,KAAK,GAAG;IACJ,IAAI,QAAQ,KAAK,IAAI,CAAC7D,UAAU,IAC5B,IAAI,CAACwB,SAAS,CAACgE,QAAQ,IACvB,CAAC,IAAI,CAAC9B,SAAS,IACf,IAAI,CAACzD,WAAW,CAACqC,MAAM,EAAE;MACzB,MAAMmD,OAAO,GAAG,IAAI,CAACC,kBAAkB,EAAE;MACzC1G,KAAK,CAAC,+BAA+B,EAAEyG,OAAO,CAACnD,MAAM,CAAC;MACtD,IAAI,CAACd,SAAS,CAAC6B,IAAI,CAACoC,OAAO,CAAC;MAC5B;MACA;MACA,IAAI,CAACvF,aAAa,GAAGuF,OAAO,CAACnD,MAAM;MACnC,IAAI,CAACE,YAAY,CAAC,OAAO,CAAC;IAC9B;EACJ;EACA;AACJ;AACA;AACA;AACA;AACA;EACIkD,kBAAkB,GAAG;IACjB,MAAMC,sBAAsB,GAAG,IAAI,CAACR,UAAU,IAC1C,IAAI,CAAC3D,SAAS,CAACQ,IAAI,KAAK,SAAS,IACjC,IAAI,CAAC/B,WAAW,CAACqC,MAAM,GAAG,CAAC;IAC/B,IAAI,CAACqD,sBAAsB,EAAE;MACzB,OAAO,IAAI,CAAC1F,WAAW;IAC3B;IACA,IAAI2F,WAAW,GAAG,CAAC,CAAC,CAAC;IACrB,KAAK,IAAIlB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACzE,WAAW,CAACqC,MAAM,EAAEoC,CAAC,EAAE,EAAE;MAC9C,MAAMnB,IAAI,GAAG,IAAI,CAACtD,WAAW,CAACyE,CAAC,CAAC,CAACnB,IAAI;MACrC,IAAIA,IAAI,EAAE;QACNqC,WAAW,IAAI,CAAC,CAAC,EAAElH,SAAS,CAACmH,UAAU,EAAEtC,IAAI,CAAC;MAClD;MACA,IAAImB,CAAC,GAAG,CAAC,IAAIkB,WAAW,GAAG,IAAI,CAACT,UAAU,EAAE;QACxCnG,KAAK,CAAC,gCAAgC,EAAE0F,CAAC,EAAE,IAAI,CAACzE,WAAW,CAACqC,MAAM,CAAC;QACnE,OAAO,IAAI,CAACrC,WAAW,CAAC6F,KAAK,CAAC,CAAC,EAAEpB,CAAC,CAAC;MACvC;MACAkB,WAAW,IAAI,CAAC,CAAC,CAAC;IACtB;;IACA5G,KAAK,CAAC,8BAA8B,EAAE4G,WAAW,EAAE,IAAI,CAACT,UAAU,CAAC;IACnE,OAAO,IAAI,CAAClF,WAAW;EAC3B;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI8F,KAAK,CAACtC,GAAG,EAAEuC,OAAO,EAAEC,EAAE,EAAE;IACpB,IAAI,CAACjB,UAAU,CAAC,SAAS,EAAEvB,GAAG,EAAEuC,OAAO,EAAEC,EAAE,CAAC;IAC5C,OAAO,IAAI;EACf;EACA5C,IAAI,CAACI,GAAG,EAAEuC,OAAO,EAAEC,EAAE,EAAE;IACnB,IAAI,CAACjB,UAAU,CAAC,SAAS,EAAEvB,GAAG,EAAEuC,OAAO,EAAEC,EAAE,CAAC;IAC5C,OAAO,IAAI;EACf;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIjB,UAAU,CAAC1B,IAAI,EAAEC,IAAI,EAAEyC,OAAO,EAAEC,EAAE,EAAE;IAChC,IAAI,UAAU,KAAK,OAAO1C,IAAI,EAAE;MAC5B0C,EAAE,GAAG1C,IAAI;MACTA,IAAI,GAAG2C,SAAS;IACpB;IACA,IAAI,UAAU,KAAK,OAAOF,OAAO,EAAE;MAC/BC,EAAE,GAAGD,OAAO;MACZA,OAAO,GAAG,IAAI;IAClB;IACA,IAAI,SAAS,KAAK,IAAI,CAAChG,UAAU,IAAI,QAAQ,KAAK,IAAI,CAACA,UAAU,EAAE;MAC/D;IACJ;IACAgG,OAAO,GAAGA,OAAO,IAAI,CAAC,CAAC;IACvBA,OAAO,CAACG,QAAQ,GAAG,KAAK,KAAKH,OAAO,CAACG,QAAQ;IAC7C,MAAMvB,MAAM,GAAG;MACXtB,IAAI,EAAEA,IAAI;MACVC,IAAI,EAAEA,IAAI;MACVyC,OAAO,EAAEA;IACb,CAAC;IACD,IAAI,CAACxD,YAAY,CAAC,cAAc,EAAEoC,MAAM,CAAC;IACzC,IAAI,CAAC3E,WAAW,CAACmG,IAAI,CAACxB,MAAM,CAAC;IAC7B,IAAIqB,EAAE,EACF,IAAI,CAACzC,IAAI,CAAC,OAAO,EAAEyC,EAAE,CAAC;IAC1B,IAAI,CAACpC,KAAK,EAAE;EAChB;EACA;AACJ;AACA;AACA;AACA;EACInC,KAAK,GAAG;IACJ,MAAMA,KAAK,GAAG,MAAM;MAChB,IAAI,CAACE,OAAO,CAAC,cAAc,CAAC;MAC5B5C,KAAK,CAAC,6CAA6C,CAAC;MACpD,IAAI,CAACwC,SAAS,CAACE,KAAK,EAAE;IAC1B,CAAC;IACD,MAAM2E,eAAe,GAAG,MAAM;MAC1B,IAAI,CAAC7B,GAAG,CAAC,SAAS,EAAE6B,eAAe,CAAC;MACpC,IAAI,CAAC7B,GAAG,CAAC,cAAc,EAAE6B,eAAe,CAAC;MACzC3E,KAAK,EAAE;IACX,CAAC;IACD,MAAM4E,cAAc,GAAG,MAAM;MACzB;MACA,IAAI,CAAC9C,IAAI,CAAC,SAAS,EAAE6C,eAAe,CAAC;MACrC,IAAI,CAAC7C,IAAI,CAAC,cAAc,EAAE6C,eAAe,CAAC;IAC9C,CAAC;IACD,IAAI,SAAS,KAAK,IAAI,CAACrG,UAAU,IAAI,MAAM,KAAK,IAAI,CAACA,UAAU,EAAE;MAC7D,IAAI,CAACA,UAAU,GAAG,SAAS;MAC3B,IAAI,IAAI,CAACC,WAAW,CAACqC,MAAM,EAAE;QACzB,IAAI,CAACkB,IAAI,CAAC,OAAO,EAAE,MAAM;UACrB,IAAI,IAAI,CAACE,SAAS,EAAE;YAChB4C,cAAc,EAAE;UACpB,CAAC,MACI;YACD5E,KAAK,EAAE;UACX;QACJ,CAAC,CAAC;MACN,CAAC,MACI,IAAI,IAAI,CAACgC,SAAS,EAAE;QACrB4C,cAAc,EAAE;MACpB,CAAC,MACI;QACD5E,KAAK,EAAE;MACX;IACJ;IACA,OAAO,IAAI;EACf;EACA;AACJ;AACA;AACA;AACA;EACIsB,OAAO,CAACc,GAAG,EAAE;IACT9E,KAAK,CAAC,iBAAiB,EAAE8E,GAAG,CAAC;IAC7BvF,MAAM,CAAC6D,qBAAqB,GAAG,KAAK;IACpC,IAAI,CAACI,YAAY,CAAC,OAAO,EAAEsB,GAAG,CAAC;IAC/B,IAAI,CAAClC,OAAO,CAAC,iBAAiB,EAAEkC,GAAG,CAAC;EACxC;EACA;AACJ;AACA;AACA;AACA;EACIlC,OAAO,CAACqB,MAAM,EAAEpB,WAAW,EAAE;IACzB,IAAI,SAAS,KAAK,IAAI,CAAC7B,UAAU,IAC7B,MAAM,KAAK,IAAI,CAACA,UAAU,IAC1B,SAAS,KAAK,IAAI,CAACA,UAAU,EAAE;MAC/BhB,KAAK,CAAC,gCAAgC,EAAEiE,MAAM,CAAC;MAC/C;MACA,IAAI,CAACmC,cAAc,CAAC,IAAI,CAAC/D,gBAAgB,CAAC;MAC1C;MACA,IAAI,CAACG,SAAS,CAACC,kBAAkB,CAAC,OAAO,CAAC;MAC1C;MACA,IAAI,CAACD,SAAS,CAACE,KAAK,EAAE;MACtB;MACA,IAAI,CAACF,SAAS,CAACC,kBAAkB,EAAE;MACnC,IAAI,OAAO8E,mBAAmB,KAAK,UAAU,EAAE;QAC3CA,mBAAmB,CAAC,cAAc,EAAE,IAAI,CAAChF,yBAAyB,EAAE,KAAK,CAAC;QAC1EgF,mBAAmB,CAAC,SAAS,EAAE,IAAI,CAAC5E,oBAAoB,EAAE,KAAK,CAAC;MACpE;MACA;MACA,IAAI,CAAC3B,UAAU,GAAG,QAAQ;MAC1B;MACA,IAAI,CAACiB,EAAE,GAAG,IAAI;MACd;MACA,IAAI,CAACuB,YAAY,CAAC,OAAO,EAAES,MAAM,EAAEpB,WAAW,CAAC;MAC/C;MACA;MACA,IAAI,CAAC5B,WAAW,GAAG,EAAE;MACrB,IAAI,CAACC,aAAa,GAAG,CAAC;IAC1B;EACJ;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACIgF,cAAc,CAAChE,QAAQ,EAAE;IACrB,MAAMsF,gBAAgB,GAAG,EAAE;IAC3B,IAAI9B,CAAC,GAAG,CAAC;IACT,MAAM+B,CAAC,GAAGvF,QAAQ,CAACoB,MAAM;IACzB,OAAOoC,CAAC,GAAG+B,CAAC,EAAE/B,CAAC,EAAE,EAAE;MACf,IAAI,CAAC,IAAI,CAAC3E,UAAU,CAACsC,OAAO,CAACnB,QAAQ,CAACwD,CAAC,CAAC,CAAC,EACrC8B,gBAAgB,CAACJ,IAAI,CAAClF,QAAQ,CAACwD,CAAC,CAAC,CAAC;IAC1C;IACA,OAAO8B,gBAAgB;EAC3B;AACJ;AACAnI,OAAO,CAACE,MAAM,GAAGA,MAAM;AACvBA,MAAM,CAACmB,QAAQ,GAAGX,kBAAkB,CAACW,QAAQ"},"metadata":{},"sourceType":"script"}