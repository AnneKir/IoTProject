{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Subject } from './Subject';\nvar AsyncSubject = function (_super) {\n  __extends(AsyncSubject, _super);\n  function AsyncSubject() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    _this._value = null;\n    _this._hasValue = false;\n    _this._isComplete = false;\n    return _this;\n  }\n  AsyncSubject.prototype._checkFinalizedStatuses = function (subscriber) {\n    var _a = this,\n      hasError = _a.hasError,\n      _hasValue = _a._hasValue,\n      _value = _a._value,\n      thrownError = _a.thrownError,\n      isStopped = _a.isStopped,\n      _isComplete = _a._isComplete;\n    if (hasError) {\n      subscriber.error(thrownError);\n    } else if (isStopped || _isComplete) {\n      _hasValue && subscriber.next(_value);\n      subscriber.complete();\n    }\n  };\n  AsyncSubject.prototype.next = function (value) {\n    if (!this.isStopped) {\n      this._value = value;\n      this._hasValue = true;\n    }\n  };\n  AsyncSubject.prototype.complete = function () {\n    var _a = this,\n      _hasValue = _a._hasValue,\n      _value = _a._value,\n      _isComplete = _a._isComplete;\n    if (!_isComplete) {\n      this._isComplete = true;\n      _hasValue && _super.prototype.next.call(this, _value);\n      _super.prototype.complete.call(this);\n    }\n  };\n  return AsyncSubject;\n}(Subject);\nexport { AsyncSubject };","map":{"version":3,"mappings":";AAAA,SAASA,OAAO,QAAQ,WAAW;AASnC;EAAqCC;EAArC;IAAA;IACUC,YAAM,GAAa,IAAI;IACvBA,eAAS,GAAG,KAAK;IACjBA,iBAAW,GAAG,KAAK;;EA4B7B;EAzBYC,8CAAuB,GAAjC,UAAkCC,UAAyB;IACnD,SAAuE,IAAI;MAAzEC,QAAQ;MAAEC,SAAS;MAAEC,MAAM;MAAEC,WAAW;MAAEC,SAAS;MAAEC,WAAW,iBAAS;IACjF,IAAIL,QAAQ,EAAE;MACZD,UAAU,CAACO,KAAK,CAACH,WAAW,CAAC;KAC9B,MAAM,IAAIC,SAAS,IAAIC,WAAW,EAAE;MACnCJ,SAAS,IAAIF,UAAU,CAACQ,IAAI,CAACL,MAAO,CAAC;MACrCH,UAAU,CAACS,QAAQ,EAAE;;EAEzB,CAAC;EAEDV,2BAAI,GAAJ,UAAKW,KAAQ;IACX,IAAI,CAAC,IAAI,CAACL,SAAS,EAAE;MACnB,IAAI,CAACF,MAAM,GAAGO,KAAK;MACnB,IAAI,CAACR,SAAS,GAAG,IAAI;;EAEzB,CAAC;EAEDH,+BAAQ,GAAR;IACQ,SAAqC,IAAI;MAAvCG,SAAS;MAAEC,MAAM;MAAEG,WAAW,iBAAS;IAC/C,IAAI,CAACA,WAAW,EAAE;MAChB,IAAI,CAACA,WAAW,GAAG,IAAI;MACvBJ,SAAS,IAAIS,iBAAMH,IAAI,YAACL,MAAO,CAAC;MAChCQ,iBAAMF,QAAQ,WAAE;;EAEpB,CAAC;EACH,mBAAC;AAAD,CAAC,CA/BoCb,OAAO","names":["Subject","__extends","_this","AsyncSubject","subscriber","hasError","_hasValue","_value","thrownError","isStopped","_isComplete","error","next","complete","value","_super"],"sources":["C:\\Users\\Amali\\Desktop\\Building_the_IoT_w._P2P_and_Cloud_Computing\\IoTProject\\node_modules\\rxjs\\src\\internal\\AsyncSubject.ts"],"sourcesContent":["import { Subject } from './Subject';\r\nimport { Subscriber } from './Subscriber';\r\n\r\n/**\r\n * A variant of Subject that only emits a value when it completes. It will emit\r\n * its latest value to all its observers on completion.\r\n *\r\n * @class AsyncSubject<T>\r\n */\r\nexport class AsyncSubject<T> extends Subject<T> {\r\n  private _value: T | null = null;\r\n  private _hasValue = false;\r\n  private _isComplete = false;\r\n\r\n  /** @internal */\r\n  protected _checkFinalizedStatuses(subscriber: Subscriber<T>) {\r\n    const { hasError, _hasValue, _value, thrownError, isStopped, _isComplete } = this;\r\n    if (hasError) {\r\n      subscriber.error(thrownError);\r\n    } else if (isStopped || _isComplete) {\r\n      _hasValue && subscriber.next(_value!);\r\n      subscriber.complete();\r\n    }\r\n  }\r\n\r\n  next(value: T): void {\r\n    if (!this.isStopped) {\r\n      this._value = value;\r\n      this._hasValue = true;\r\n    }\r\n  }\r\n\r\n  complete(): void {\r\n    const { _hasValue, _value, _isComplete } = this;\r\n    if (!_isComplete) {\r\n      this._isComplete = true;\r\n      _hasValue && super.next(_value!);\r\n      super.complete();\r\n    }\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}