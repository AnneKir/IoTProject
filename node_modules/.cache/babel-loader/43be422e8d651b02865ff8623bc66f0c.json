{"ast":null,"code":"import { mergeMap } from './mergeMap';\nimport { isFunction } from '../util/isFunction';\nexport function mergeMapTo(innerObservable, resultSelector, concurrent) {\n  if (concurrent === void 0) {\n    concurrent = Infinity;\n  }\n  if (isFunction(resultSelector)) {\n    return mergeMap(function () {\n      return innerObservable;\n    }, resultSelector, concurrent);\n  }\n  if (typeof resultSelector === 'number') {\n    concurrent = resultSelector;\n  }\n  return mergeMap(function () {\n    return innerObservable;\n  }, concurrent);\n}","map":{"version":3,"mappings":"AACA,SAASA,QAAQ,QAAQ,YAAY;AACrC,SAASC,UAAU,QAAQ,oBAAoB;AA2D/C,OAAM,SAAUC,UAAU,CACxBC,eAAkB,EAClBC,cAAwH,EACxHC,UAA6B;EAA7B;IAAAA,qBAA6B;EAAA;EAE7B,IAAIJ,UAAU,CAACG,cAAc,CAAC,EAAE;IAC9B,OAAOJ,QAAQ,CAAC;MAAM,sBAAe;IAAf,CAAe,EAAEI,cAAc,EAAEC,UAAU,CAAC;;EAEpE,IAAI,OAAOD,cAAc,KAAK,QAAQ,EAAE;IACtCC,UAAU,GAAGD,cAAc;;EAE7B,OAAOJ,QAAQ,CAAC;IAAM,sBAAe;EAAf,CAAe,EAAEK,UAAU,CAAC;AACpD","names":["mergeMap","isFunction","mergeMapTo","innerObservable","resultSelector","concurrent"],"sources":["C:\\Users\\Amali\\Desktop\\Building_the_IoT_w._P2P_and_Cloud_Computing\\IoTProject\\node_modules\\rxjs\\src\\internal\\operators\\mergeMapTo.ts"],"sourcesContent":["import { OperatorFunction, ObservedValueOf, ObservableInput } from '../types';\r\nimport { mergeMap } from './mergeMap';\r\nimport { isFunction } from '../util/isFunction';\r\n\r\n/** @deprecated Will be removed in v9. Use {@link mergeMap} instead: `mergeMap(() => result)` */\r\nexport function mergeMapTo<O extends ObservableInput<unknown>>(\r\n  innerObservable: O,\r\n  concurrent?: number\r\n): OperatorFunction<unknown, ObservedValueOf<O>>;\r\n/**\r\n * @deprecated The `resultSelector` parameter will be removed in v8. Use an inner `map` instead.\r\n * Details: https://rxjs.dev/deprecations/resultSelector\r\n */\r\nexport function mergeMapTo<T, R, O extends ObservableInput<unknown>>(\r\n  innerObservable: O,\r\n  resultSelector: (outerValue: T, innerValue: ObservedValueOf<O>, outerIndex: number, innerIndex: number) => R,\r\n  concurrent?: number\r\n): OperatorFunction<T, R>;\r\n/* tslint:enable:max-line-length */\r\n\r\n/**\r\n * Projects each source value to the same Observable which is merged multiple\r\n * times in the output Observable.\r\n *\r\n * <span class=\"informal\">It's like {@link mergeMap}, but maps each value always\r\n * to the same inner Observable.</span>\r\n *\r\n * ![](mergeMapTo.png)\r\n *\r\n * Maps each source value to the given Observable `innerObservable` regardless\r\n * of the source value, and then merges those resulting Observables into one\r\n * single Observable, which is the output Observable.\r\n *\r\n * ## Example\r\n *\r\n * For each click event, start an interval Observable ticking every 1 second\r\n *\r\n * ```ts\r\n * import { fromEvent, mergeMapTo, interval } from 'rxjs';\r\n *\r\n * const clicks = fromEvent(document, 'click');\r\n * const result = clicks.pipe(mergeMapTo(interval(1000)));\r\n *\r\n * result.subscribe(x => console.log(x));\r\n * ```\r\n *\r\n * @see {@link concatMapTo}\r\n * @see {@link merge}\r\n * @see {@link mergeAll}\r\n * @see {@link mergeMap}\r\n * @see {@link mergeScan}\r\n * @see {@link switchMapTo}\r\n *\r\n * @param {ObservableInput} innerObservable An Observable to replace each value from\r\n * the source Observable.\r\n * @param {number} [concurrent=Infinity] Maximum number of input\r\n * Observables being subscribed to concurrently.\r\n * @return A function that returns an Observable that emits items from the\r\n * given `innerObservable`.\r\n * @deprecated Will be removed in v9. Use {@link mergeMap} instead: `mergeMap(() => result)`\r\n */\r\nexport function mergeMapTo<T, R, O extends ObservableInput<unknown>>(\r\n  innerObservable: O,\r\n  resultSelector?: ((outerValue: T, innerValue: ObservedValueOf<O>, outerIndex: number, innerIndex: number) => R) | number,\r\n  concurrent: number = Infinity\r\n): OperatorFunction<T, ObservedValueOf<O> | R> {\r\n  if (isFunction(resultSelector)) {\r\n    return mergeMap(() => innerObservable, resultSelector, concurrent);\r\n  }\r\n  if (typeof resultSelector === 'number') {\r\n    concurrent = resultSelector;\r\n  }\r\n  return mergeMap(() => innerObservable, concurrent);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}