{"ast":null,"code":"import { Observable } from '../Observable';\nimport { argsArgArrayOrObject } from '../util/argsArgArrayOrObject';\nimport { from } from './from';\nimport { identity } from '../util/identity';\nimport { mapOneOrManyArgs } from '../util/mapOneOrManyArgs';\nimport { popResultSelector, popScheduler } from '../util/args';\nimport { createObject } from '../util/createObject';\nimport { createOperatorSubscriber } from '../operators/OperatorSubscriber';\nimport { executeSchedule } from '../util/executeSchedule';\nexport function combineLatest() {\n  var args = [];\n  for (var _i = 0; _i < arguments.length; _i++) {\n    args[_i] = arguments[_i];\n  }\n  var scheduler = popScheduler(args);\n  var resultSelector = popResultSelector(args);\n  var _a = argsArgArrayOrObject(args),\n    observables = _a.args,\n    keys = _a.keys;\n  if (observables.length === 0) {\n    return from([], scheduler);\n  }\n  var result = new Observable(combineLatestInit(observables, scheduler, keys ? function (values) {\n    return createObject(keys, values);\n  } : identity));\n  return resultSelector ? result.pipe(mapOneOrManyArgs(resultSelector)) : result;\n}\nexport function combineLatestInit(observables, scheduler, valueTransform) {\n  if (valueTransform === void 0) {\n    valueTransform = identity;\n  }\n  return function (subscriber) {\n    maybeSchedule(scheduler, function () {\n      var length = observables.length;\n      var values = new Array(length);\n      var active = length;\n      var remainingFirstValues = length;\n      var _loop_1 = function (i) {\n        maybeSchedule(scheduler, function () {\n          var source = from(observables[i], scheduler);\n          var hasFirstValue = false;\n          source.subscribe(createOperatorSubscriber(subscriber, function (value) {\n            values[i] = value;\n            if (!hasFirstValue) {\n              hasFirstValue = true;\n              remainingFirstValues--;\n            }\n            if (!remainingFirstValues) {\n              subscriber.next(valueTransform(values.slice()));\n            }\n          }, function () {\n            if (! --active) {\n              subscriber.complete();\n            }\n          }));\n        }, subscriber);\n      };\n      for (var i = 0; i < length; i++) {\n        _loop_1(i);\n      }\n    }, subscriber);\n  };\n}\nfunction maybeSchedule(scheduler, execute, subscription) {\n  if (scheduler) {\n    executeSchedule(subscription, scheduler, execute);\n  } else {\n    execute();\n  }\n}","map":{"version":3,"mappings":"AAAA,SAASA,UAAU,QAAQ,eAAe;AAE1C,SAASC,oBAAoB,QAAQ,8BAA8B;AAEnE,SAASC,IAAI,QAAQ,QAAQ;AAC7B,SAASC,QAAQ,QAAQ,kBAAkB;AAE3C,SAASC,gBAAgB,QAAQ,0BAA0B;AAC3D,SAASC,iBAAiB,EAAEC,YAAY,QAAQ,cAAc;AAC9D,SAASC,YAAY,QAAQ,sBAAsB;AACnD,SAASC,wBAAwB,QAAQ,iCAAiC;AAE1E,SAASC,eAAe,QAAQ,yBAAyB;AA4LzD,OAAM,SAAUC,aAAa;EAAoC;OAAA,UAAc,EAAdC,qBAAc,EAAdA,IAAc;IAAdC;;EAC/D,IAAMC,SAAS,GAAGP,YAAY,CAACM,IAAI,CAAC;EACpC,IAAME,cAAc,GAAGT,iBAAiB,CAACO,IAAI,CAAC;EAExC,SAA8BX,oBAAoB,CAACW,IAAI,CAAC;IAAhDG,WAAW;IAAEC,IAAI,UAA+B;EAE9D,IAAID,WAAW,CAACE,MAAM,KAAK,CAAC,EAAE;IAI5B,OAAOf,IAAI,CAAC,EAAE,EAAEW,SAAgB,CAAC;;EAGnC,IAAMK,MAAM,GAAG,IAAIlB,UAAU,CAC3BmB,iBAAiB,CACfJ,WAAoD,EACpDF,SAAS,EACTG,IAAI,GAEA,UAACI,MAAM;IAAK,mBAAY,CAACJ,IAAI,EAAEI,MAAM,CAAC;EAA1B,CAA0B,GAEtCjB,QAAQ,CACb,CACF;EAED,OAAOW,cAAc,GAAII,MAAM,CAACG,IAAI,CAACjB,gBAAgB,CAACU,cAAc,CAAC,CAAmB,GAAGI,MAAM;AACnG;AAEA,OAAM,SAAUC,iBAAiB,CAC/BJ,WAAmC,EACnCF,SAAyB,EACzBS,cAAiD;EAAjD;IAAAA,yBAAiD;EAAA;EAEjD,OAAO,UAACC,UAA2B;IAGjCC,aAAa,CACXX,SAAS,EACT;MACU,UAAM,GAAKE,WAAW,OAAhB;MAEd,IAAMK,MAAM,GAAG,IAAIK,KAAK,CAACR,MAAM,CAAC;MAGhC,IAAIS,MAAM,GAAGT,MAAM;MAInB,IAAIU,oBAAoB,GAAGV,MAAM;8BAGxBW,CAAC;QACRJ,aAAa,CACXX,SAAS,EACT;UACE,IAAMgB,MAAM,GAAG3B,IAAI,CAACa,WAAW,CAACa,CAAC,CAAC,EAAEf,SAAgB,CAAC;UACrD,IAAIiB,aAAa,GAAG,KAAK;UACzBD,MAAM,CAACE,SAAS,CACdvB,wBAAwB,CACtBe,UAAU,EACV,UAACS,KAAK;YAEJZ,MAAM,CAACQ,CAAC,CAAC,GAAGI,KAAK;YACjB,IAAI,CAACF,aAAa,EAAE;cAElBA,aAAa,GAAG,IAAI;cACpBH,oBAAoB,EAAE;;YAExB,IAAI,CAACA,oBAAoB,EAAE;cAGzBJ,UAAU,CAACU,IAAI,CAACX,cAAc,CAACF,MAAM,CAACc,KAAK,EAAE,CAAC,CAAC;;UAEnD,CAAC,EACD;YACE,IAAI,CAAC,GAAER,MAAM,EAAE;cAGbH,UAAU,CAACY,QAAQ,EAAE;;UAEzB,CAAC,CACF,CACF;QACH,CAAC,EACDZ,UAAU,CACX;;MAlCH,KAAK,IAAIK,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGX,MAAM,EAAEW,CAAC,EAAE;gBAAtBA,CAAC;;IAoCZ,CAAC,EACDL,UAAU,CACX;EACH,CAAC;AACH;AAMA,SAASC,aAAa,CAACX,SAAoC,EAAEuB,OAAmB,EAAEC,YAA0B;EAC1G,IAAIxB,SAAS,EAAE;IACbJ,eAAe,CAAC4B,YAAY,EAAExB,SAAS,EAAEuB,OAAO,CAAC;GAClD,MAAM;IACLA,OAAO,EAAE;;AAEb","names":["Observable","argsArgArrayOrObject","from","identity","mapOneOrManyArgs","popResultSelector","popScheduler","createObject","createOperatorSubscriber","executeSchedule","combineLatest","_i","args","scheduler","resultSelector","observables","keys","length","result","combineLatestInit","values","pipe","valueTransform","subscriber","maybeSchedule","Array","active","remainingFirstValues","i","source","hasFirstValue","subscribe","value","next","slice","complete","execute","subscription"],"sources":["../../../../src/internal/observable/combineLatest.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}