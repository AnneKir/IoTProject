{"ast":null,"code":"import { mergeMap } from './mergeMap';\nimport { isFunction } from '../util/isFunction';\nexport function concatMap(project, resultSelector) {\n  return isFunction(resultSelector) ? mergeMap(project, resultSelector, 1) : mergeMap(project, 1);\n}","map":{"version":3,"mappings":"AAAA,SAASA,QAAQ,QAAQ,YAAY;AAErC,SAASC,UAAU,QAAQ,oBAAoB;AA4E/C,OAAM,SAAUC,SAAS,CACvBC,OAAuC,EACvCC,cAA6G;EAE7G,OAAOH,UAAU,CAACG,cAAc,CAAC,GAAGJ,QAAQ,CAACG,OAAO,EAAEC,cAAc,EAAE,CAAC,CAAC,GAAGJ,QAAQ,CAACG,OAAO,EAAE,CAAC,CAAC;AACjG","names":["mergeMap","isFunction","concatMap","project","resultSelector"],"sources":["C:\\Users\\Amali\\Desktop\\Building_the_IoT_w._P2P_and_Cloud_Computing\\IoTProject\\node_modules\\rxjs\\src\\internal\\operators\\concatMap.ts"],"sourcesContent":["import { mergeMap } from './mergeMap';\r\nimport { ObservableInput, OperatorFunction, ObservedValueOf } from '../types';\r\nimport { isFunction } from '../util/isFunction';\r\n\r\n/* tslint:disable:max-line-length */\r\nexport function concatMap<T, O extends ObservableInput<any>>(\r\n  project: (value: T, index: number) => O\r\n): OperatorFunction<T, ObservedValueOf<O>>;\r\n/** @deprecated The `resultSelector` parameter will be removed in v8. Use an inner `map` instead. Details: https://rxjs.dev/deprecations/resultSelector */\r\nexport function concatMap<T, O extends ObservableInput<any>>(\r\n  project: (value: T, index: number) => O,\r\n  resultSelector: undefined\r\n): OperatorFunction<T, ObservedValueOf<O>>;\r\n/** @deprecated The `resultSelector` parameter will be removed in v8. Use an inner `map` instead. Details: https://rxjs.dev/deprecations/resultSelector */\r\nexport function concatMap<T, R, O extends ObservableInput<any>>(\r\n  project: (value: T, index: number) => O,\r\n  resultSelector: (outerValue: T, innerValue: ObservedValueOf<O>, outerIndex: number, innerIndex: number) => R\r\n): OperatorFunction<T, R>;\r\n/* tslint:enable:max-line-length */\r\n\r\n/**\r\n * Projects each source value to an Observable which is merged in the output\r\n * Observable, in a serialized fashion waiting for each one to complete before\r\n * merging the next.\r\n *\r\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\r\n * these inner Observables using {@link concatAll}.</span>\r\n *\r\n * ![](concatMap.png)\r\n *\r\n * Returns an Observable that emits items based on applying a function that you\r\n * supply to each item emitted by the source Observable, where that function\r\n * returns an (so-called \"inner\") Observable. Each new inner Observable is\r\n * concatenated with the previous inner Observable.\r\n *\r\n * __Warning:__ if source values arrive endlessly and faster than their\r\n * corresponding inner Observables can complete, it will result in memory issues\r\n * as inner Observables amass in an unbounded buffer waiting for their turn to\r\n * be subscribed to.\r\n *\r\n * Note: `concatMap` is equivalent to `mergeMap` with concurrency parameter set\r\n * to `1`.\r\n *\r\n * ## Example\r\n *\r\n * For each click event, tick every second from 0 to 3, with no concurrency\r\n *\r\n * ```ts\r\n * import { fromEvent, concatMap, interval, take } from 'rxjs';\r\n *\r\n * const clicks = fromEvent(document, 'click');\r\n * const result = clicks.pipe(\r\n *   concatMap(ev => interval(1000).pipe(take(4)))\r\n * );\r\n * result.subscribe(x => console.log(x));\r\n *\r\n * // Results in the following:\r\n * // (results are not concurrent)\r\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\r\n * // on a 1000ms interval\r\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\r\n * ```\r\n *\r\n * @see {@link concat}\r\n * @see {@link concatAll}\r\n * @see {@link concatMapTo}\r\n * @see {@link exhaustMap}\r\n * @see {@link mergeMap}\r\n * @see {@link switchMap}\r\n *\r\n * @param {function(value: T, ?index: number): ObservableInput} project A function\r\n * that, when applied to an item emitted by the source Observable, returns an\r\n * Observable.\r\n * @return A function that returns an Observable that emits the result of\r\n * applying the projection function (and the optional deprecated\r\n * `resultSelector`) to each item emitted by the source Observable and taking\r\n * values from each projected inner Observable sequentially.\r\n */\r\nexport function concatMap<T, R, O extends ObservableInput<any>>(\r\n  project: (value: T, index: number) => O,\r\n  resultSelector?: (outerValue: T, innerValue: ObservedValueOf<O>, outerIndex: number, innerIndex: number) => R\r\n): OperatorFunction<T, ObservedValueOf<O> | R> {\r\n  return isFunction(resultSelector) ? mergeMap(project, resultSelector, 1) : mergeMap(project, 1);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}