{"ast":null,"code":"import { BehaviorSubject } from '../BehaviorSubject';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nexport function publishBehavior(initialValue) {\n  return function (source) {\n    var subject = new BehaviorSubject(initialValue);\n    return new ConnectableObservable(source, function () {\n      return subject;\n    });\n  };\n}","map":{"version":3,"mappings":"AACA,SAASA,eAAe,QAAQ,oBAAoB;AACpD,SAASC,qBAAqB,QAAQ,qCAAqC;AAiB3E,OAAM,SAAUC,eAAe,CAAIC,YAAe;EAEhD,OAAO,UAACC,MAAM;IACZ,IAAMC,OAAO,GAAG,IAAIL,eAAe,CAAIG,YAAY,CAAC;IACpD,OAAO,IAAIF,qBAAqB,CAACG,MAAM,EAAE;MAAM,cAAO;IAAP,CAAO,CAAC;EACzD,CAAC;AACH","names":["BehaviorSubject","ConnectableObservable","publishBehavior","initialValue","source","subject"],"sources":["C:\\Users\\Amali\\Desktop\\Building_the_IoT_w._P2P_and_Cloud_Computing\\IoTProject\\node_modules\\rxjs\\src\\internal\\operators\\publishBehavior.ts"],"sourcesContent":["import { Observable } from '../Observable';\r\nimport { BehaviorSubject } from '../BehaviorSubject';\r\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\r\nimport { UnaryFunction } from '../types';\r\n\r\n/**\r\n * Creates a {@link ConnectableObservable} that utilizes a {@link BehaviorSubject}.\r\n *\r\n * @param initialValue The initial value passed to the {@link BehaviorSubject}.\r\n * @return A function that returns a {@link ConnectableObservable}\r\n * @deprecated Will be removed in v8. To create a connectable observable that uses a\r\n * {@link BehaviorSubject} under the hood, use {@link connectable}.\r\n * `source.pipe(publishBehavior(initValue))` is equivalent to\r\n * `connectable(source, { connector: () => new BehaviorSubject(initValue), resetOnDisconnect: false })`.\r\n * If you're using {@link refCount} after `publishBehavior`, use the {@link share} operator instead.\r\n * `source.pipe(publishBehavior(initValue), refCount())` is equivalent to\r\n * `source.pipe(share({ connector: () => new BehaviorSubject(initValue), resetOnError: false, resetOnComplete: false, resetOnRefCountZero: false  }))`.\r\n * Details: https://rxjs.dev/deprecations/multicasting\r\n */\r\nexport function publishBehavior<T>(initialValue: T): UnaryFunction<Observable<T>, ConnectableObservable<T>> {\r\n  // Note that this has *never* supported the selector function.\r\n  return (source) => {\r\n    const subject = new BehaviorSubject<T>(initialValue);\r\n    return new ConnectableObservable(source, () => subject);\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}