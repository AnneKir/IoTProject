{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Scheduler } from '../Scheduler';\nvar AsyncScheduler = function (_super) {\n  __extends(AsyncScheduler, _super);\n  function AsyncScheduler(SchedulerAction, now) {\n    if (now === void 0) {\n      now = Scheduler.now;\n    }\n    var _this = _super.call(this, SchedulerAction, now) || this;\n    _this.actions = [];\n    _this._active = false;\n    return _this;\n  }\n  AsyncScheduler.prototype.flush = function (action) {\n    var actions = this.actions;\n    if (this._active) {\n      actions.push(action);\n      return;\n    }\n    var error;\n    this._active = true;\n    do {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    } while (action = actions.shift());\n    this._active = false;\n    if (error) {\n      while (action = actions.shift()) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  };\n  return AsyncScheduler;\n}(Scheduler);\nexport { AsyncScheduler };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAAQ,cAAc;AAKxC;EAAoCC;EAkBlC,wBAAYC,eAA8B,EAAEC,GAAiC;IAAjC;MAAAA,MAAoBH,SAAS,CAACG,GAAG;IAAA;IAA7E,YACEC,kBAAMF,eAAe,EAAEC,GAAG,CAAC;IAlBtBE,aAAO,GAA4B,EAAE;IAOrCA,aAAO,GAAY,KAAK;;EAY/B;EAEOC,8BAAK,GAAZ,UAAaC,MAAwB;IAC3B,WAAO,GAAK,IAAI,QAAT;IAEf,IAAI,IAAI,CAACC,OAAO,EAAE;MAChBC,OAAO,CAACC,IAAI,CAACH,MAAM,CAAC;MACpB;;IAGF,IAAII,KAAU;IACd,IAAI,CAACH,OAAO,GAAG,IAAI;IAEnB,GAAG;MACD,IAAKG,KAAK,GAAGJ,MAAM,CAACK,OAAO,CAACL,MAAM,CAACM,KAAK,EAAEN,MAAM,CAACO,KAAK,CAAC,EAAG;QACxD;;KAEH,QAASP,MAAM,GAAGE,OAAO,CAACM,KAAK,EAAG;IAEnC,IAAI,CAACP,OAAO,GAAG,KAAK;IAEpB,IAAIG,KAAK,EAAE;MACT,OAAQJ,MAAM,GAAGE,OAAO,CAACM,KAAK,EAAG,EAAG;QAClCR,MAAM,CAACS,WAAW,EAAE;;MAEtB,MAAML,KAAK;;EAEf,CAAC;EACH,qBAAC;AAAD,CAAC,CAhDmCX,SAAS","names":["Scheduler","__extends","SchedulerAction","now","_super","_this","AsyncScheduler","action","_active","actions","push","error","execute","state","delay","shift","unsubscribe"],"sources":["C:\\Users\\Amali\\Desktop\\Building_the_IoT_w._P2P_and_Cloud_Computing\\IoTProject\\node_modules\\rxjs\\src\\internal\\scheduler\\AsyncScheduler.ts"],"sourcesContent":["import { Scheduler } from '../Scheduler';\r\nimport { Action } from './Action';\r\nimport { AsyncAction } from './AsyncAction';\r\nimport { TimerHandle } from './timerHandle';\r\n\r\nexport class AsyncScheduler extends Scheduler {\r\n  public actions: Array<AsyncAction<any>> = [];\r\n  /**\r\n   * A flag to indicate whether the Scheduler is currently executing a batch of\r\n   * queued actions.\r\n   * @type {boolean}\r\n   * @internal\r\n   */\r\n  public _active: boolean = false;\r\n  /**\r\n   * An internal ID used to track the latest asynchronous task such as those\r\n   * coming from `setTimeout`, `setInterval`, `requestAnimationFrame`, and\r\n   * others.\r\n   * @type {any}\r\n   * @internal\r\n   */\r\n  public _scheduled: TimerHandle | undefined;\r\n\r\n  constructor(SchedulerAction: typeof Action, now: () => number = Scheduler.now) {\r\n    super(SchedulerAction, now);\r\n  }\r\n\r\n  public flush(action: AsyncAction<any>): void {\r\n    const { actions } = this;\r\n\r\n    if (this._active) {\r\n      actions.push(action);\r\n      return;\r\n    }\r\n\r\n    let error: any;\r\n    this._active = true;\r\n\r\n    do {\r\n      if ((error = action.execute(action.state, action.delay))) {\r\n        break;\r\n      }\r\n    } while ((action = actions.shift()!)); // exhaust the scheduler queue\r\n\r\n    this._active = false;\r\n\r\n    if (error) {\r\n      while ((action = actions.shift()!)) {\r\n        action.unsubscribe();\r\n      }\r\n      throw error;\r\n    }\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}