{"ast":null,"code":"// https://github.com/lisajamhoury/simple-peer-wrapper\n\nimport React from 'react';\n// import Grid from '@material-ui/core/Grid';\n// import ReactDOM from 'react-dom/client';\n\nimport SimplePeerWrapper from 'simple-peer-wrapper';\nimport wrtc from 'wrtc';\nconst id = Math.floor(Math.random() * 100);\n// in your client code - create a wrapper and connect to your server\nconst options = {\n  serverUrl: 'http://localhost:8081',\n  debugger: true,\n  simplePeerOptions: {\n    initiator: false,\n    trickle: false,\n    wrtc: wrtc\n  }\n};\nconst spw = new SimplePeerWrapper(options); // creates a socket connection to signaling server\nexport function startClient() {\n  spw.connect(); // initiates peer connection via socket connection\n  spw.on('connect', gotConnect);\n  spw.on('data', gotData);\n}\n\n// document.getElementById(\"incoming\");\n\n// make sure you close the connection before you close the window\n// window.onbeforeunload = () => {\n//   spw.close();\n// };\n\n// a global variable to hold data\nlet partnerMouse;\n\n// when we receive data, call the gotData function\n\n// this runs each time data is received\n// the incoming data is passed into the function\nexport function gotData(data) {\n  // put the incoming data somewhere to use later\n  partnerMouse = data.data;\n  console.log(\"got data: \" + partnerMouse.toString());\n  return partnerMouse.toString;\n}\n// document.querySelector()\n\nfunction gotConnect() {\n  console.log('peer connection open');\n  console.log(\"sending: hej from \" + id.toString());\n  spw.send(\"hej from \" + id.toString());\n}\nfunction sendMessage(msg) {\n  console.log('Sending: ' + msg.toString());\n  spw.send(msg);\n}\n\n// spw.on('close', () => {spw.close()})\n// window.onbeforeunload = () => {\n//   spw.close();\n// };\n\nspw.on('error', err => console.log('error', err));","map":{"version":3,"names":["React","SimplePeerWrapper","wrtc","id","Math","floor","random","options","serverUrl","debugger","simplePeerOptions","initiator","trickle","spw","startClient","connect","on","gotConnect","gotData","partnerMouse","data","console","log","toString","send","sendMessage","msg","err"],"sources":["C:/Users/Amali/Desktop/Building_the_IoT_w._P2P_and_Cloud_Computing/IoTProject/src/client.js"],"sourcesContent":["// https://github.com/lisajamhoury/simple-peer-wrapper\r\n\r\nimport React from 'react';\r\n// import Grid from '@material-ui/core/Grid';\r\n// import ReactDOM from 'react-dom/client';\r\n\r\nimport SimplePeerWrapper from 'simple-peer-wrapper';\r\nimport wrtc  from 'wrtc';\r\nconst id = Math.floor(Math.random() * 100);\r\n// in your client code - create a wrapper and connect to your server\r\nconst options = {\r\n  serverUrl: 'http://localhost:8081',\r\n  debugger: true,\r\n  simplePeerOptions: {\r\n    initiator: false,\r\n    trickle: false,\r\n    wrtc: wrtc\r\n  }\r\n};\r\n\r\nconst spw = new SimplePeerWrapper(options); // creates a socket connection to signaling server\r\nexport function startClient() {\r\n  spw.connect();  // initiates peer connection via socket connection\r\n  spw.on('connect', gotConnect);\r\n  spw.on('data', gotData);\r\n\r\n}\r\n\r\n\r\n\r\n// document.getElementById(\"incoming\");\r\n\r\n// make sure you close the connection before you close the window\r\n// window.onbeforeunload = () => {\r\n//   spw.close();\r\n// };\r\n\r\n// a global variable to hold data\r\nlet partnerMouse;\r\n\r\n// when we receive data, call the gotData function\r\n\r\n// this runs each time data is received\r\n// the incoming data is passed into the function\r\nexport function gotData(data) {\r\n  // put the incoming data somewhere to use later\r\n  partnerMouse = data.data;\r\n  console.log(\"got data: \" + partnerMouse.toString())\r\n  return partnerMouse.toString;\r\n}\r\n// document.querySelector()\r\n\r\nfunction gotConnect() {\r\n  console.log('peer connection open');\r\n  console.log(\"sending: hej from \" + id.toString());\r\n  spw.send(\"hej from \" + id.toString());\r\n}\r\n\r\nfunction sendMessage(msg) {\r\n  console.log('Sending: ' + msg.toString())\r\n  spw.send(msg);\r\n}\r\n\r\n// spw.on('close', () => {spw.close()})\r\n// window.onbeforeunload = () => {\r\n//   spw.close();\r\n// };\r\n\r\nspw.on('error', err => console.log('error', err))\r\n\r\n\r\n\r\n\r\n\r\n"],"mappings":"AAAA;;AAEA,OAAOA,KAAK,MAAM,OAAO;AACzB;AACA;;AAEA,OAAOC,iBAAiB,MAAM,qBAAqB;AACnD,OAAOC,IAAI,MAAO,MAAM;AACxB,MAAMC,EAAE,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAG,GAAG,CAAC;AAC1C;AACA,MAAMC,OAAO,GAAG;EACdC,SAAS,EAAE,uBAAuB;EAClCC,QAAQ,EAAE,IAAI;EACdC,iBAAiB,EAAE;IACjBC,SAAS,EAAE,KAAK;IAChBC,OAAO,EAAE,KAAK;IACdV,IAAI,EAAEA;EACR;AACF,CAAC;AAED,MAAMW,GAAG,GAAG,IAAIZ,iBAAiB,CAACM,OAAO,CAAC,CAAC,CAAC;AAC5C,OAAO,SAASO,WAAW,GAAG;EAC5BD,GAAG,CAACE,OAAO,EAAE,CAAC,CAAE;EAChBF,GAAG,CAACG,EAAE,CAAC,SAAS,EAAEC,UAAU,CAAC;EAC7BJ,GAAG,CAACG,EAAE,CAAC,MAAM,EAAEE,OAAO,CAAC;AAEzB;;AAIA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,IAAIC,YAAY;;AAEhB;;AAEA;AACA;AACA,OAAO,SAASD,OAAO,CAACE,IAAI,EAAE;EAC5B;EACAD,YAAY,GAAGC,IAAI,CAACA,IAAI;EACxBC,OAAO,CAACC,GAAG,CAAC,YAAY,GAAGH,YAAY,CAACI,QAAQ,EAAE,CAAC;EACnD,OAAOJ,YAAY,CAACI,QAAQ;AAC9B;AACA;;AAEA,SAASN,UAAU,GAAG;EACpBI,OAAO,CAACC,GAAG,CAAC,sBAAsB,CAAC;EACnCD,OAAO,CAACC,GAAG,CAAC,oBAAoB,GAAGnB,EAAE,CAACoB,QAAQ,EAAE,CAAC;EACjDV,GAAG,CAACW,IAAI,CAAC,WAAW,GAAGrB,EAAE,CAACoB,QAAQ,EAAE,CAAC;AACvC;AAEA,SAASE,WAAW,CAACC,GAAG,EAAE;EACxBL,OAAO,CAACC,GAAG,CAAC,WAAW,GAAGI,GAAG,CAACH,QAAQ,EAAE,CAAC;EACzCV,GAAG,CAACW,IAAI,CAACE,GAAG,CAAC;AACf;;AAEA;AACA;AACA;AACA;;AAEAb,GAAG,CAACG,EAAE,CAAC,OAAO,EAAEW,GAAG,IAAIN,OAAO,CAACC,GAAG,CAAC,OAAO,EAAEK,GAAG,CAAC,CAAC"},"metadata":{},"sourceType":"module"}