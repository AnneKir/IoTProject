{"ast":null,"code":"// https://github.com/lisajamhoury/simple-peer-wrapper\nimport React from'react';// import Grid from '@material-ui/core/Grid';\n// import ReactDOM from 'react-dom/client';\nimport SimplePeerWrapper from'simple-peer-wrapper';import wrtc from'wrtc';var id=Math.floor(Math.random()*100);// in your client code - create a wrapper and connect to your server\nvar options={serverUrl:'http://localhost:8081',debugger:true,simplePeerOptions:{initiator:false,trickle:false,wrtc:wrtc}};var spw=new SimplePeerWrapper(options);// creates a socket connection to signaling server\nexport function startClient(){spw.connect();// initiates peer connection via socket connection\nspw.on('connect',gotConnect);spw.on('data',gotData);}// document.getElementById(\"incoming\");\n// make sure you close the connection before you close the window\n// window.onbeforeunload = () => {\n//   spw.close();\n// };\n// a global variable to hold data\nvar partnerMouse;// when we receive data, call the gotData function\n// this runs each time data is received\n// the incoming data is passed into the function\nfunction gotData(data){// put the incoming data somewhere to use later\npartnerMouse=data.data;console.log(\"got data: \"+partnerMouse.toString());}// document.querySelector()\nfunction gotConnect(){console.log('peer connection open');console.log(\"sending: hej from \"+id.toString());spw.send(\"hej from \"+id.toString());}function sendMessage(msg){console.log('Sending: '+msg.toString());spw.send(msg);}// spw.on('close', () => {spw.close()})\n// window.onbeforeunload = () => {\n//   spw.close();\n// };\nspw.on('error',function(err){return console.log('error',err);});","map":{"version":3,"names":["React","SimplePeerWrapper","wrtc","id","Math","floor","random","options","serverUrl","debugger","simplePeerOptions","initiator","trickle","spw","startClient","connect","on","gotConnect","gotData","partnerMouse","data","console","log","toString","send","sendMessage","msg","err"],"sources":["C:/Users/Amali/Desktop/Building_the_IoT_w._P2P_and_Cloud_Computing/IoTProject/src/client.js"],"sourcesContent":["// https://github.com/lisajamhoury/simple-peer-wrapper\r\n\r\nimport React from 'react';\r\n// import Grid from '@material-ui/core/Grid';\r\n// import ReactDOM from 'react-dom/client';\r\n\r\nimport SimplePeerWrapper from 'simple-peer-wrapper';\r\nimport wrtc  from 'wrtc';\r\nconst id = Math.floor(Math.random() * 100);\r\n// in your client code - create a wrapper and connect to your server\r\nconst options = {\r\n  serverUrl: 'http://localhost:8081',\r\n  debugger: true,\r\n  simplePeerOptions: {\r\n    initiator: false,\r\n    trickle: false,\r\n    wrtc: wrtc\r\n  }\r\n};\r\n\r\nconst spw = new SimplePeerWrapper(options); // creates a socket connection to signaling server\r\nexport function startClient() {\r\n  spw.connect();  // initiates peer connection via socket connection\r\n  spw.on('connect', gotConnect);\r\n  spw.on('data', gotData);\r\n\r\n}\r\n\r\n\r\n\r\n// document.getElementById(\"incoming\");\r\n\r\n// make sure you close the connection before you close the window\r\n// window.onbeforeunload = () => {\r\n//   spw.close();\r\n// };\r\n\r\n// a global variable to hold data\r\nlet partnerMouse;\r\n\r\n// when we receive data, call the gotData function\r\n\r\n// this runs each time data is received\r\n// the incoming data is passed into the function\r\nfunction gotData(data) {\r\n  // put the incoming data somewhere to use later\r\n  partnerMouse = data.data;\r\n  console.log(\"got data: \" + partnerMouse.toString())\r\n}\r\n// document.querySelector()\r\n\r\nfunction gotConnect() {\r\n  console.log('peer connection open');\r\n  console.log(\"sending: hej from \" + id.toString());\r\n  spw.send(\"hej from \" + id.toString());\r\n}\r\n\r\nfunction sendMessage(msg) {\r\n  console.log('Sending: ' + msg.toString())\r\n  spw.send(msg);\r\n}\r\n\r\n// spw.on('close', () => {spw.close()})\r\n// window.onbeforeunload = () => {\r\n//   spw.close();\r\n// };\r\n\r\nspw.on('error', err => console.log('error', err))\r\n\r\n\r\n\r\n\r\n\r\n"],"mappings":"AAAA;AAEA,MAAOA,MAAK,KAAM,OAAO,CACzB;AACA;AAEA,MAAOC,kBAAiB,KAAM,qBAAqB,CACnD,MAAOC,KAAI,KAAO,MAAM,CACxB,GAAMC,GAAE,CAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,CAAG,GAAG,CAAC,CAC1C;AACA,GAAMC,QAAO,CAAG,CACdC,SAAS,CAAE,uBAAuB,CAClCC,QAAQ,CAAE,IAAI,CACdC,iBAAiB,CAAE,CACjBC,SAAS,CAAE,KAAK,CAChBC,OAAO,CAAE,KAAK,CACdV,IAAI,CAAEA,IACR,CACF,CAAC,CAED,GAAMW,IAAG,CAAG,GAAIZ,kBAAiB,CAACM,OAAO,CAAC,CAAE;AAC5C,MAAO,SAASO,YAAW,EAAG,CAC5BD,GAAG,CAACE,OAAO,EAAE,CAAG;AAChBF,GAAG,CAACG,EAAE,CAAC,SAAS,CAAEC,UAAU,CAAC,CAC7BJ,GAAG,CAACG,EAAE,CAAC,MAAM,CAAEE,OAAO,CAAC,CAEzB,CAIA;AAEA;AACA;AACA;AACA;AAEA;AACA,GAAIC,aAAY,CAEhB;AAEA;AACA;AACA,QAASD,QAAO,CAACE,IAAI,CAAE,CACrB;AACAD,YAAY,CAAGC,IAAI,CAACA,IAAI,CACxBC,OAAO,CAACC,GAAG,CAAC,YAAY,CAAGH,YAAY,CAACI,QAAQ,EAAE,CAAC,CACrD,CACA;AAEA,QAASN,WAAU,EAAG,CACpBI,OAAO,CAACC,GAAG,CAAC,sBAAsB,CAAC,CACnCD,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAGnB,EAAE,CAACoB,QAAQ,EAAE,CAAC,CACjDV,GAAG,CAACW,IAAI,CAAC,WAAW,CAAGrB,EAAE,CAACoB,QAAQ,EAAE,CAAC,CACvC,CAEA,QAASE,YAAW,CAACC,GAAG,CAAE,CACxBL,OAAO,CAACC,GAAG,CAAC,WAAW,CAAGI,GAAG,CAACH,QAAQ,EAAE,CAAC,CACzCV,GAAG,CAACW,IAAI,CAACE,GAAG,CAAC,CACf,CAEA;AACA;AACA;AACA;AAEAb,GAAG,CAACG,EAAE,CAAC,OAAO,CAAE,SAAAW,GAAG,QAAIN,QAAO,CAACC,GAAG,CAAC,OAAO,CAAEK,GAAG,CAAC,GAAC"},"metadata":{},"sourceType":"module"}