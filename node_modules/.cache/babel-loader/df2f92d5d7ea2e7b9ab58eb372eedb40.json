{"ast":null,"code":"import { operate } from '../util/lift';\nexport function finalize(callback) {\n  return operate(function (source, subscriber) {\n    try {\n      source.subscribe(subscriber);\n    } finally {\n      subscriber.add(callback);\n    }\n  });\n}","map":{"version":3,"mappings":"AACA,SAASA,OAAO,QAAQ,cAAc;AA+DtC,OAAM,SAAUC,QAAQ,CAAIC,QAAoB;EAC9C,OAAOF,OAAO,CAAC,UAACG,MAAM,EAAEC,UAAU;IAGhC,IAAI;MACFD,MAAM,CAACE,SAAS,CAACD,UAAU,CAAC;KAC7B,SAAS;MACRA,UAAU,CAACE,GAAG,CAACJ,QAAQ,CAAC;;EAE5B,CAAC,CAAC;AACJ","names":["operate","finalize","callback","source","subscriber","subscribe","add"],"sources":["C:\\Users\\Amali\\Desktop\\Building_the_IoT_w._P2P_and_Cloud_Computing\\IoTProject\\node_modules\\rxjs\\src\\internal\\operators\\finalize.ts"],"sourcesContent":["import { MonoTypeOperatorFunction } from '../types';\r\nimport { operate } from '../util/lift';\r\n\r\n/**\r\n * Returns an Observable that mirrors the source Observable, but will call a specified function when\r\n * the source terminates on complete or error.\r\n * The specified function will also be called when the subscriber explicitly unsubscribes.\r\n *\r\n * ## Examples\r\n *\r\n * Execute callback function when the observable completes\r\n *\r\n * ```ts\r\n * import { interval, take, finalize } from 'rxjs';\r\n *\r\n * // emit value in sequence every 1 second\r\n * const source = interval(1000);\r\n * const example = source.pipe(\r\n *   take(5), //take only the first 5 values\r\n *   finalize(() => console.log('Sequence complete')) // Execute when the observable completes\r\n * );\r\n * const subscribe = example.subscribe(val => console.log(val));\r\n *\r\n * // results:\r\n * // 0\r\n * // 1\r\n * // 2\r\n * // 3\r\n * // 4\r\n * // 'Sequence complete'\r\n * ```\r\n *\r\n * Execute callback function when the subscriber explicitly unsubscribes\r\n *\r\n * ```ts\r\n * import { interval, finalize, tap, noop, timer } from 'rxjs';\r\n *\r\n * const source = interval(100).pipe(\r\n *   finalize(() => console.log('[finalize] Called')),\r\n *   tap({\r\n *     next: () => console.log('[next] Called'),\r\n *     error: () => console.log('[error] Not called'),\r\n *     complete: () => console.log('[tap complete] Not called')\r\n *   })\r\n * );\r\n *\r\n * const sub = source.subscribe({\r\n *   next: x => console.log(x),\r\n *   error: noop,\r\n *   complete: () => console.log('[complete] Not called')\r\n * });\r\n *\r\n * timer(150).subscribe(() => sub.unsubscribe());\r\n *\r\n * // results:\r\n * // '[next] Called'\r\n * // 0\r\n * // '[finalize] Called'\r\n * ```\r\n *\r\n * @param {function} callback Function to be called when source terminates.\r\n * @return A function that returns an Observable that mirrors the source, but\r\n * will call the specified function on termination.\r\n */\r\nexport function finalize<T>(callback: () => void): MonoTypeOperatorFunction<T> {\r\n  return operate((source, subscriber) => {\r\n    // TODO: This try/finally was only added for `useDeprecatedSynchronousErrorHandling`.\r\n    // REMOVE THIS WHEN THAT HOT GARBAGE IS REMOVED IN V8.\r\n    try {\r\n      source.subscribe(subscriber);\r\n    } finally {\r\n      subscriber.add(callback);\r\n    }\r\n  });\r\n}\r\n"]},"metadata":{},"sourceType":"module"}