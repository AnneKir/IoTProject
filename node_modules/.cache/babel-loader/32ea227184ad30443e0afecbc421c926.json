{"ast":null,"code":"import { scanInternals } from './scanInternals';\nimport { operate } from '../util/lift';\nexport function reduce(accumulator, seed) {\n  return operate(scanInternals(accumulator, seed, arguments.length >= 2, false, true));\n}","map":{"version":3,"mappings":"AAAA,SAASA,aAAa,QAAQ,iBAAiB;AAE/C,SAASC,OAAO,QAAQ,cAAc;AAyDtC,OAAM,SAAUC,MAAM,CAAOC,WAAuD,EAAEC,IAAU;EAC9F,OAAOH,OAAO,CAACD,aAAa,CAACG,WAAW,EAAEC,IAAI,EAAEC,SAAS,CAACC,MAAM,IAAI,CAAC,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC;AACtF","names":["scanInternals","operate","reduce","accumulator","seed","arguments","length"],"sources":["C:\\Users\\Amali\\Desktop\\Building_the_IoT_w._P2P_and_Cloud_Computing\\IoTProject\\node_modules\\rxjs\\src\\internal\\operators\\reduce.ts"],"sourcesContent":["import { scanInternals } from './scanInternals';\r\nimport { OperatorFunction } from '../types';\r\nimport { operate } from '../util/lift';\r\n\r\nexport function reduce<V, A = V>(accumulator: (acc: A | V, value: V, index: number) => A): OperatorFunction<V, V | A>;\r\nexport function reduce<V, A>(accumulator: (acc: A, value: V, index: number) => A, seed: A): OperatorFunction<V, A>;\r\nexport function reduce<V, A, S = A>(accumulator: (acc: A | S, value: V, index: number) => A, seed: S): OperatorFunction<V, A>;\r\n\r\n/**\r\n * Applies an accumulator function over the source Observable, and returns the\r\n * accumulated result when the source completes, given an optional seed value.\r\n *\r\n * <span class=\"informal\">Combines together all values emitted on the source,\r\n * using an accumulator function that knows how to join a new source value into\r\n * the accumulation from the past.</span>\r\n *\r\n * ![](reduce.png)\r\n *\r\n * Like\r\n * [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce),\r\n * `reduce` applies an `accumulator` function against an accumulation and each\r\n * value of the source Observable (from the past) to reduce it to a single\r\n * value, emitted on the output Observable. Note that `reduce` will only emit\r\n * one value, only when the source Observable completes. It is equivalent to\r\n * applying operator {@link scan} followed by operator {@link last}.\r\n *\r\n * Returns an Observable that applies a specified `accumulator` function to each\r\n * item emitted by the source Observable. If a `seed` value is specified, then\r\n * that value will be used as the initial value for the accumulator. If no seed\r\n * value is specified, the first item of the source is used as the seed.\r\n *\r\n * ## Example\r\n *\r\n * Count the number of click events that happened in 5 seconds\r\n *\r\n * ```ts\r\n * import { fromEvent, takeUntil, interval, map, reduce } from 'rxjs';\r\n *\r\n * const clicksInFiveSeconds = fromEvent(document, 'click')\r\n *   .pipe(takeUntil(interval(5000)));\r\n *\r\n * const ones = clicksInFiveSeconds.pipe(map(() => 1));\r\n * const seed = 0;\r\n * const count = ones.pipe(reduce((acc, one) => acc + one, seed));\r\n *\r\n * count.subscribe(x => console.log(x));\r\n * ```\r\n *\r\n * @see {@link count}\r\n * @see {@link expand}\r\n * @see {@link mergeScan}\r\n * @see {@link scan}\r\n *\r\n * @param {function(acc: A, value: V, index: number): A} accumulator The accumulator function\r\n * called on each source value.\r\n * @param {A} [seed] The initial accumulation value.\r\n * @return A function that returns an Observable that emits a single value that\r\n * is the result of accumulating the values emitted by the source Observable.\r\n */\r\nexport function reduce<V, A>(accumulator: (acc: V | A, value: V, index: number) => A, seed?: any): OperatorFunction<V, V | A> {\r\n  return operate(scanInternals(accumulator, seed, arguments.length >= 2, false, true));\r\n}\r\n"]},"metadata":{},"sourceType":"module"}