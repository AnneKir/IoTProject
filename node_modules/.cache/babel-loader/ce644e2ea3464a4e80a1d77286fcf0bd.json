{"ast":null,"code":"import { switchMap } from './switchMap';\nimport { isFunction } from '../util/isFunction';\nexport function switchMapTo(innerObservable, resultSelector) {\n  return isFunction(resultSelector) ? switchMap(function () {\n    return innerObservable;\n  }, resultSelector) : switchMap(function () {\n    return innerObservable;\n  });\n}","map":{"version":3,"mappings":"AAAA,SAASA,SAAS,QAAQ,aAAa;AAEvC,SAASC,UAAU,QAAQ,oBAAoB;AAwD/C,OAAM,SAAUC,WAAW,CACzBC,eAAkB,EAClBC,cAA6G;EAE7G,OAAOH,UAAU,CAACG,cAAc,CAAC,GAAGJ,SAAS,CAAC;IAAM,sBAAe;EAAf,CAAe,EAAEI,cAAc,CAAC,GAAGJ,SAAS,CAAC;IAAM,sBAAe;EAAf,CAAe,CAAC;AACzH","names":["switchMap","isFunction","switchMapTo","innerObservable","resultSelector"],"sources":["C:\\Users\\Amali\\Desktop\\Building_the_IoT_w._P2P_and_Cloud_Computing\\IoTProject\\node_modules\\rxjs\\src\\internal\\operators\\switchMapTo.ts"],"sourcesContent":["import { switchMap } from './switchMap';\r\nimport { ObservableInput, OperatorFunction, ObservedValueOf } from '../types';\r\nimport { isFunction } from '../util/isFunction';\r\n\r\n/** @deprecated Will be removed in v9. Use {@link switchMap} instead: `switchMap(() => result)` */\r\nexport function switchMapTo<O extends ObservableInput<unknown>>(observable: O): OperatorFunction<unknown, ObservedValueOf<O>>;\r\n/** @deprecated The `resultSelector` parameter will be removed in v8. Use an inner `map` instead. Details: https://rxjs.dev/deprecations/resultSelector */\r\nexport function switchMapTo<O extends ObservableInput<unknown>>(\r\n  observable: O,\r\n  resultSelector: undefined\r\n): OperatorFunction<unknown, ObservedValueOf<O>>;\r\n/** @deprecated The `resultSelector` parameter will be removed in v8. Use an inner `map` instead. Details: https://rxjs.dev/deprecations/resultSelector */\r\nexport function switchMapTo<T, R, O extends ObservableInput<unknown>>(\r\n  observable: O,\r\n  resultSelector: (outerValue: T, innerValue: ObservedValueOf<O>, outerIndex: number, innerIndex: number) => R\r\n): OperatorFunction<T, R>;\r\n\r\n/**\r\n * Projects each source value to the same Observable which is flattened multiple\r\n * times with {@link switchMap} in the output Observable.\r\n *\r\n * <span class=\"informal\">It's like {@link switchMap}, but maps each value\r\n * always to the same inner Observable.</span>\r\n *\r\n * ![](switchMapTo.png)\r\n *\r\n * Maps each source value to the given Observable `innerObservable` regardless\r\n * of the source value, and then flattens those resulting Observables into one\r\n * single Observable, which is the output Observable. The output Observables\r\n * emits values only from the most recently emitted instance of\r\n * `innerObservable`.\r\n *\r\n * ## Example\r\n *\r\n * Restart an interval Observable on every click event\r\n *\r\n * ```ts\r\n * import { fromEvent, switchMapTo, interval } from 'rxjs';\r\n *\r\n * const clicks = fromEvent(document, 'click');\r\n * const result = clicks.pipe(switchMapTo(interval(1000)));\r\n * result.subscribe(x => console.log(x));\r\n * ```\r\n *\r\n * @see {@link concatMapTo}\r\n * @see {@link switchAll}\r\n * @see {@link switchMap}\r\n * @see {@link mergeMapTo}\r\n *\r\n * @param {ObservableInput} innerObservable An Observable to replace each value from\r\n * the source Observable.\r\n * @return A function that returns an Observable that emits items from the\r\n * given `innerObservable` (and optionally transformed through the deprecated\r\n * `resultSelector`) every time a value is emitted on the source Observable,\r\n * and taking only the values from the most recently projected inner\r\n * Observable.\r\n * @deprecated Will be removed in v9. Use {@link switchMap} instead: `switchMap(() => result)`\r\n */\r\nexport function switchMapTo<T, R, O extends ObservableInput<unknown>>(\r\n  innerObservable: O,\r\n  resultSelector?: (outerValue: T, innerValue: ObservedValueOf<O>, outerIndex: number, innerIndex: number) => R\r\n): OperatorFunction<T, ObservedValueOf<O> | R> {\r\n  return isFunction(resultSelector) ? switchMap(() => innerObservable, resultSelector) : switchMap(() => innerObservable);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}