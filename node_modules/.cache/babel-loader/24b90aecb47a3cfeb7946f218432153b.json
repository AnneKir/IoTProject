{"ast":null,"code":"// imported from https://github.com/unshiftio/yeast\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.yeast = exports.decode = exports.encode = void 0;\nvar alphabet = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_'.split(''),\n  length = 64,\n  map = {};\nvar seed = 0,\n  i = 0,\n  prev;\n/**\n * Return a string representing the specified number.\n *\n * @param {Number} num The number to convert.\n * @returns {String} The string representation of the number.\n * @api public\n */\nfunction encode(num) {\n  var encoded = '';\n  do {\n    encoded = alphabet[num % length] + encoded;\n    num = Math.floor(num / length);\n  } while (num > 0);\n  return encoded;\n}\nexports.encode = encode;\n/**\n * Return the integer value specified by the given string.\n *\n * @param {String} str The string to convert.\n * @returns {Number} The integer value represented by the string.\n * @api public\n */\nfunction decode(str) {\n  var decoded = 0;\n  for (i = 0; i < str.length; i++) {\n    decoded = decoded * length + map[str.charAt(i)];\n  }\n  return decoded;\n}\nexports.decode = decode;\n/**\n * Yeast: A tiny growing id generator.\n *\n * @returns {String} A unique id.\n * @api public\n */\nfunction yeast() {\n  var now = encode(+new Date());\n  if (now !== prev) return seed = 0, prev = now;\n  return now + '.' + encode(seed++);\n}\nexports.yeast = yeast;\n//\n// Map each character to its index.\n//\nfor (; i < length; i++) {\n  map[alphabet[i]] = i;\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","yeast","decode","encode","alphabet","split","length","map","seed","i","prev","num","encoded","Math","floor","str","decoded","charAt","now","Date"],"sources":["C:/Users/Amali/Desktop/Building_the_IoT_w._P2P_and_Cloud_Computing/IoTProject/node_modules/engine.io-client/build/cjs/contrib/yeast.js"],"sourcesContent":["// imported from https://github.com/unshiftio/yeast\n'use strict';\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.yeast = exports.decode = exports.encode = void 0;\nconst alphabet = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_'.split(''), length = 64, map = {};\nlet seed = 0, i = 0, prev;\n/**\n * Return a string representing the specified number.\n *\n * @param {Number} num The number to convert.\n * @returns {String} The string representation of the number.\n * @api public\n */\nfunction encode(num) {\n    let encoded = '';\n    do {\n        encoded = alphabet[num % length] + encoded;\n        num = Math.floor(num / length);\n    } while (num > 0);\n    return encoded;\n}\nexports.encode = encode;\n/**\n * Return the integer value specified by the given string.\n *\n * @param {String} str The string to convert.\n * @returns {Number} The integer value represented by the string.\n * @api public\n */\nfunction decode(str) {\n    let decoded = 0;\n    for (i = 0; i < str.length; i++) {\n        decoded = decoded * length + map[str.charAt(i)];\n    }\n    return decoded;\n}\nexports.decode = decode;\n/**\n * Yeast: A tiny growing id generator.\n *\n * @returns {String} A unique id.\n * @api public\n */\nfunction yeast() {\n    const now = encode(+new Date());\n    if (now !== prev)\n        return seed = 0, prev = now;\n    return now + '.' + encode(seed++);\n}\nexports.yeast = yeast;\n//\n// Map each character to its index.\n//\nfor (; i < length; i++)\n    map[alphabet[i]] = i;\n"],"mappings":"AAAA;AACA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,KAAK,GAAGF,OAAO,CAACG,MAAM,GAAGH,OAAO,CAACI,MAAM,GAAG,KAAK,CAAC;AACxD,IAAMC,QAAQ,GAAG,kEAAkE,CAACC,KAAK,CAAC,EAAE,CAAC;EAAEC,MAAM,GAAG,EAAE;EAAEC,GAAG,GAAG,CAAC,CAAC;AACpH,IAAIC,IAAI,GAAG,CAAC;EAAEC,CAAC,GAAG,CAAC;EAAEC,IAAI;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASP,MAAM,CAACQ,GAAG,EAAE;EACjB,IAAIC,OAAO,GAAG,EAAE;EAChB,GAAG;IACCA,OAAO,GAAGR,QAAQ,CAACO,GAAG,GAAGL,MAAM,CAAC,GAAGM,OAAO;IAC1CD,GAAG,GAAGE,IAAI,CAACC,KAAK,CAACH,GAAG,GAAGL,MAAM,CAAC;EAClC,CAAC,QAAQK,GAAG,GAAG,CAAC;EAChB,OAAOC,OAAO;AAClB;AACAb,OAAO,CAACI,MAAM,GAAGA,MAAM;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASD,MAAM,CAACa,GAAG,EAAE;EACjB,IAAIC,OAAO,GAAG,CAAC;EACf,KAAKP,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGM,GAAG,CAACT,MAAM,EAAEG,CAAC,EAAE,EAAE;IAC7BO,OAAO,GAAGA,OAAO,GAAGV,MAAM,GAAGC,GAAG,CAACQ,GAAG,CAACE,MAAM,CAACR,CAAC,CAAC,CAAC;EACnD;EACA,OAAOO,OAAO;AAClB;AACAjB,OAAO,CAACG,MAAM,GAAGA,MAAM;AACvB;AACA;AACA;AACA;AACA;AACA;AACA,SAASD,KAAK,GAAG;EACb,IAAMiB,GAAG,GAAGf,MAAM,CAAC,CAAC,IAAIgB,IAAI,EAAE,CAAC;EAC/B,IAAID,GAAG,KAAKR,IAAI,EACZ,OAAOF,IAAI,GAAG,CAAC,EAAEE,IAAI,GAAGQ,GAAG;EAC/B,OAAOA,GAAG,GAAG,GAAG,GAAGf,MAAM,CAACK,IAAI,EAAE,CAAC;AACrC;AACAT,OAAO,CAACE,KAAK,GAAGA,KAAK;AACrB;AACA;AACA;AACA,OAAOQ,CAAC,GAAGH,MAAM,EAAEG,CAAC,EAAE;EAClBF,GAAG,CAACH,QAAQ,CAACK,CAAC,CAAC,CAAC,GAAGA,CAAC;AAAC"},"metadata":{},"sourceType":"script"}