{"ast":null,"code":"import { Subject } from '../Subject';\nimport { asyncScheduler } from '../scheduler/async';\nimport { Subscription } from '../Subscription';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nimport { arrRemove } from '../util/arrRemove';\nimport { popScheduler } from '../util/args';\nimport { executeSchedule } from '../util/executeSchedule';\nexport function windowTime(windowTimeSpan) {\n  var _a, _b;\n  var otherArgs = [];\n  for (var _i = 1; _i < arguments.length; _i++) {\n    otherArgs[_i - 1] = arguments[_i];\n  }\n  var scheduler = (_a = popScheduler(otherArgs)) !== null && _a !== void 0 ? _a : asyncScheduler;\n  var windowCreationInterval = (_b = otherArgs[0]) !== null && _b !== void 0 ? _b : null;\n  var maxWindowSize = otherArgs[1] || Infinity;\n  return operate(function (source, subscriber) {\n    var windowRecords = [];\n    var restartOnClose = false;\n    var closeWindow = function closeWindow(record) {\n      var window = record.window,\n        subs = record.subs;\n      window.complete();\n      subs.unsubscribe();\n      arrRemove(windowRecords, record);\n      restartOnClose && startWindow();\n    };\n    var startWindow = function startWindow() {\n      if (windowRecords) {\n        var subs = new Subscription();\n        subscriber.add(subs);\n        var window_1 = new Subject();\n        var record_1 = {\n          window: window_1,\n          subs: subs,\n          seen: 0\n        };\n        windowRecords.push(record_1);\n        subscriber.next(window_1.asObservable());\n        executeSchedule(subs, scheduler, function () {\n          return closeWindow(record_1);\n        }, windowTimeSpan);\n      }\n    };\n    if (windowCreationInterval !== null && windowCreationInterval >= 0) {\n      executeSchedule(subscriber, scheduler, startWindow, windowCreationInterval, true);\n    } else {\n      restartOnClose = true;\n    }\n    startWindow();\n    var loop = function loop(cb) {\n      return windowRecords.slice().forEach(cb);\n    };\n    var terminate = function terminate(cb) {\n      loop(function (_a) {\n        var window = _a.window;\n        return cb(window);\n      });\n      cb(subscriber);\n      subscriber.unsubscribe();\n    };\n    source.subscribe(createOperatorSubscriber(subscriber, function (value) {\n      loop(function (record) {\n        record.window.next(value);\n        maxWindowSize <= ++record.seen && closeWindow(record);\n      });\n    }, function () {\n      return terminate(function (consumer) {\n        return consumer.complete();\n      });\n    }, function (err) {\n      return terminate(function (consumer) {\n        return consumer.error(err);\n      });\n    }));\n    return function () {\n      windowRecords = null;\n    };\n  });\n}","map":{"version":3,"mappings":"AAAA,SAASA,OAAO,QAAQ,YAAY;AACpC,SAASC,cAAc,QAAQ,oBAAoB;AAEnD,SAASC,YAAY,QAAQ,iBAAiB;AAE9C,SAASC,OAAO,QAAQ,cAAc;AACtC,SAASC,wBAAwB,QAAQ,sBAAsB;AAC/D,SAASC,SAAS,QAAQ,mBAAmB;AAC7C,SAASC,YAAY,QAAQ,cAAc;AAC3C,SAASC,eAAe,QAAQ,yBAAyB;AAgGzD,OAAM,SAAUC,UAAU,CAAIC,cAAsB;;EAAE;OAAA,UAAmB,EAAnBC,qBAAmB,EAAnBA,IAAmB;IAAnBC;;EACpD,IAAMC,SAAS,GAAG,kBAAY,CAACD,SAAS,CAAC,mCAAIV,cAAc;EAC3D,IAAMY,sBAAsB,GAAG,MAACF,SAAS,CAAC,CAAC,CAAY,mCAAI,IAAI;EAC/D,IAAMG,aAAa,GAAIH,SAAS,CAAC,CAAC,CAAY,IAAII,QAAQ;EAE1D,OAAOZ,OAAO,CAAC,UAACa,MAAM,EAAEC,UAAU;IAEhC,IAAIC,aAAa,GAA6B,EAAE;IAGhD,IAAIC,cAAc,GAAG,KAAK;IAE1B,IAAMC,WAAW,GAAG,SAAdA,WAAW,CAAIC,MAAkD;MAC7D,UAAM,GAAWA,MAAM,OAAjB;QAAEC,IAAI,GAAKD,MAAM,KAAX;MACpBE,MAAM,CAACC,QAAQ,EAAE;MACjBF,IAAI,CAACG,WAAW,EAAE;MAClBpB,SAAS,CAACa,aAAa,EAAEG,MAAM,CAAC;MAChCF,cAAc,IAAIO,WAAW,EAAE;IACjC,CAAC;IAMD,IAAMA,WAAW,GAAG,SAAdA,WAAW,GAAG;MAClB,IAAIR,aAAa,EAAE;QACjB,IAAMI,IAAI,GAAG,IAAIpB,YAAY,EAAE;QAC/Be,UAAU,CAACU,GAAG,CAACL,IAAI,CAAC;QACpB,IAAMM,QAAM,GAAG,IAAI5B,OAAO,EAAK;QAC/B,IAAM6B,QAAM,GAAG;UACbN,MAAM;UACND,IAAI;UACJQ,IAAI,EAAE;SACP;QACDZ,aAAa,CAACa,IAAI,CAACF,QAAM,CAAC;QAC1BZ,UAAU,CAACe,IAAI,CAACJ,QAAM,CAACK,YAAY,EAAE,CAAC;QACtC1B,eAAe,CAACe,IAAI,EAAEV,SAAS,EAAE;UAAM,kBAAW,CAACiB,QAAM,CAAC;QAAnB,CAAmB,EAAEpB,cAAc,CAAC;;IAE/E,CAAC;IAED,IAAII,sBAAsB,KAAK,IAAI,IAAIA,sBAAsB,IAAI,CAAC,EAAE;MAIlEN,eAAe,CAACU,UAAU,EAAEL,SAAS,EAAEc,WAAW,EAAEb,sBAAsB,EAAE,IAAI,CAAC;KAClF,MAAM;MACLM,cAAc,GAAG,IAAI;;IAGvBO,WAAW,EAAE;IAQb,IAAMQ,IAAI,GAAG,SAAPA,IAAI,CAAIC,EAAqC;MAAK,oBAAc,CAACC,KAAK,EAAE,CAACC,OAAO,CAACF,EAAE,CAAC;IAAlC,CAAkC;IAM1F,IAAMG,SAAS,GAAG,SAAZA,SAAS,CAAIH,EAAqC;MACtDD,IAAI,CAAC,UAACK,EAAU;YAARhB,MAAM;QAAO,SAAE,CAACA,MAAM,CAAC;MAAV,CAAU,CAAC;MAChCY,EAAE,CAAClB,UAAU,CAAC;MACdA,UAAU,CAACQ,WAAW,EAAE;IAC1B,CAAC;IAEDT,MAAM,CAACwB,SAAS,CACdpC,wBAAwB,CACtBa,UAAU,EACV,UAACwB,KAAQ;MAEPP,IAAI,CAAC,UAACb,MAAM;QACVA,MAAM,CAACE,MAAM,CAACS,IAAI,CAACS,KAAK,CAAC;QAEzB3B,aAAa,IAAI,EAAEO,MAAM,CAACS,IAAI,IAAIV,WAAW,CAACC,MAAM,CAAC;MACvD,CAAC,CAAC;IACJ,CAAC,EAED;MAAM,gBAAS,CAAC,UAACqB,QAAQ;QAAK,eAAQ,CAAClB,QAAQ,EAAE;MAAnB,CAAmB,CAAC;IAA5C,CAA4C,EAElD,UAACmB,GAAG;MAAK,gBAAS,CAAC,UAACD,QAAQ;QAAK,eAAQ,CAACE,KAAK,CAACD,GAAG,CAAC;MAAnB,CAAmB,CAAC;IAA5C,CAA4C,CACtD,CACF;IAKD,OAAO;MAELzB,aAAa,GAAG,IAAK;IACvB,CAAC;EACH,CAAC,CAAC;AACJ","names":["Subject","asyncScheduler","Subscription","operate","createOperatorSubscriber","arrRemove","popScheduler","executeSchedule","windowTime","windowTimeSpan","_i","otherArgs","scheduler","windowCreationInterval","maxWindowSize","Infinity","source","subscriber","windowRecords","restartOnClose","closeWindow","record","subs","window","complete","unsubscribe","startWindow","add","window_1","record_1","seen","push","next","asObservable","loop","cb","slice","forEach","terminate","_a","subscribe","value","consumer","err","error"],"sources":["C:\\Users\\Amali\\Desktop\\Building_the_IoT_w._P2P_and_Cloud_Computing\\IoTProject\\node_modules\\rxjs\\src\\internal\\operators\\windowTime.ts"],"sourcesContent":["import { Subject } from '../Subject';\r\nimport { asyncScheduler } from '../scheduler/async';\r\nimport { Observable } from '../Observable';\r\nimport { Subscription } from '../Subscription';\r\nimport { Observer, OperatorFunction, SchedulerLike } from '../types';\r\nimport { operate } from '../util/lift';\r\nimport { createOperatorSubscriber } from './OperatorSubscriber';\r\nimport { arrRemove } from '../util/arrRemove';\r\nimport { popScheduler } from '../util/args';\r\nimport { executeSchedule } from '../util/executeSchedule';\r\n\r\nexport function windowTime<T>(windowTimeSpan: number, scheduler?: SchedulerLike): OperatorFunction<T, Observable<T>>;\r\nexport function windowTime<T>(\r\n  windowTimeSpan: number,\r\n  windowCreationInterval: number,\r\n  scheduler?: SchedulerLike\r\n): OperatorFunction<T, Observable<T>>;\r\nexport function windowTime<T>(\r\n  windowTimeSpan: number,\r\n  windowCreationInterval: number | null | void,\r\n  maxWindowSize: number,\r\n  scheduler?: SchedulerLike\r\n): OperatorFunction<T, Observable<T>>;\r\n\r\n/**\r\n * Branch out the source Observable values as a nested Observable periodically\r\n * in time.\r\n *\r\n * <span class=\"informal\">It's like {@link bufferTime}, but emits a nested\r\n * Observable instead of an array.</span>\r\n *\r\n * ![](windowTime.png)\r\n *\r\n * Returns an Observable that emits windows of items it collects from the source\r\n * Observable. The output Observable starts a new window periodically, as\r\n * determined by the `windowCreationInterval` argument. It emits each window\r\n * after a fixed timespan, specified by the `windowTimeSpan` argument. When the\r\n * source Observable completes or encounters an error, the output Observable\r\n * emits the current window and propagates the notification from the source\r\n * Observable. If `windowCreationInterval` is not provided, the output\r\n * Observable starts a new window when the previous window of duration\r\n * `windowTimeSpan` completes. If `maxWindowCount` is provided, each window\r\n * will emit at most fixed number of values. Window will complete immediately\r\n * after emitting last value and next one still will open as specified by\r\n * `windowTimeSpan` and `windowCreationInterval` arguments.\r\n *\r\n * ## Examples\r\n *\r\n * In every window of 1 second each, emit at most 2 click events\r\n *\r\n * ```ts\r\n * import { fromEvent, windowTime, map, take, mergeAll } from 'rxjs';\r\n *\r\n * const clicks = fromEvent(document, 'click');\r\n * const result = clicks.pipe(\r\n *   windowTime(1000),\r\n *   map(win => win.pipe(take(2))), // take at most 2 emissions from each window\r\n *   mergeAll()                     // flatten the Observable-of-Observables\r\n * );\r\n * result.subscribe(x => console.log(x));\r\n * ```\r\n *\r\n * Every 5 seconds start a window 1 second long, and emit at most 2 click events per window\r\n *\r\n * ```ts\r\n * import { fromEvent, windowTime, map, take, mergeAll } from 'rxjs';\r\n *\r\n * const clicks = fromEvent(document, 'click');\r\n * const result = clicks.pipe(\r\n *   windowTime(1000, 5000),\r\n *   map(win => win.pipe(take(2))), // take at most 2 emissions from each window\r\n *   mergeAll()                     // flatten the Observable-of-Observables\r\n * );\r\n * result.subscribe(x => console.log(x));\r\n * ```\r\n *\r\n * Same as example above but with `maxWindowCount` instead of `take`\r\n *\r\n * ```ts\r\n * import { fromEvent, windowTime, mergeAll } from 'rxjs';\r\n *\r\n * const clicks = fromEvent(document, 'click');\r\n * const result = clicks.pipe(\r\n *   windowTime(1000, 5000, 2), // take at most 2 emissions from each window\r\n *   mergeAll()                 // flatten the Observable-of-Observables\r\n * );\r\n * result.subscribe(x => console.log(x));\r\n * ```\r\n *\r\n * @see {@link window}\r\n * @see {@link windowCount}\r\n * @see {@link windowToggle}\r\n * @see {@link windowWhen}\r\n * @see {@link bufferTime}\r\n *\r\n * @param windowTimeSpan The amount of time, in milliseconds, to fill each window.\r\n * @param windowCreationInterval The interval at which to start new\r\n * windows.\r\n * @param maxWindowSize Max number of\r\n * values each window can emit before completion.\r\n * @param scheduler The scheduler on which to schedule the\r\n * intervals that determine window boundaries.\r\n * @return A function that returns an Observable of windows, which in turn are\r\n * Observables.\r\n */\r\nexport function windowTime<T>(windowTimeSpan: number, ...otherArgs: any[]): OperatorFunction<T, Observable<T>> {\r\n  const scheduler = popScheduler(otherArgs) ?? asyncScheduler;\r\n  const windowCreationInterval = (otherArgs[0] as number) ?? null;\r\n  const maxWindowSize = (otherArgs[1] as number) || Infinity;\r\n\r\n  return operate((source, subscriber) => {\r\n    // The active windows, their related subscriptions, and removal functions.\r\n    let windowRecords: WindowRecord<T>[] | null = [];\r\n    // If true, it means that every time we close a window, we want to start a new window.\r\n    // This is only really used for when *just* the time span is passed.\r\n    let restartOnClose = false;\r\n\r\n    const closeWindow = (record: { window: Subject<T>; subs: Subscription }) => {\r\n      const { window, subs } = record;\r\n      window.complete();\r\n      subs.unsubscribe();\r\n      arrRemove(windowRecords, record);\r\n      restartOnClose && startWindow();\r\n    };\r\n\r\n    /**\r\n     * Called every time we start a new window. This also does\r\n     * the work of scheduling the job to close the window.\r\n     */\r\n    const startWindow = () => {\r\n      if (windowRecords) {\r\n        const subs = new Subscription();\r\n        subscriber.add(subs);\r\n        const window = new Subject<T>();\r\n        const record = {\r\n          window,\r\n          subs,\r\n          seen: 0,\r\n        };\r\n        windowRecords.push(record);\r\n        subscriber.next(window.asObservable());\r\n        executeSchedule(subs, scheduler, () => closeWindow(record), windowTimeSpan);\r\n      }\r\n    };\r\n\r\n    if (windowCreationInterval !== null && windowCreationInterval >= 0) {\r\n      // The user passed both a windowTimeSpan (required), and a creation interval\r\n      // That means we need to start new window on the interval, and those windows need\r\n      // to wait the required time span before completing.\r\n      executeSchedule(subscriber, scheduler, startWindow, windowCreationInterval, true);\r\n    } else {\r\n      restartOnClose = true;\r\n    }\r\n\r\n    startWindow();\r\n\r\n    /**\r\n     * We need to loop over a copy of the window records several times in this operator.\r\n     * This is to save bytes over the wire more than anything.\r\n     * The reason we copy the array is that reentrant code could mutate the array while\r\n     * we are iterating over it.\r\n     */\r\n    const loop = (cb: (record: WindowRecord<T>) => void) => windowRecords!.slice().forEach(cb);\r\n\r\n    /**\r\n     * Used to notify all of the windows and the subscriber in the same way\r\n     * in the error and complete handlers.\r\n     */\r\n    const terminate = (cb: (consumer: Observer<any>) => void) => {\r\n      loop(({ window }) => cb(window));\r\n      cb(subscriber);\r\n      subscriber.unsubscribe();\r\n    };\r\n\r\n    source.subscribe(\r\n      createOperatorSubscriber(\r\n        subscriber,\r\n        (value: T) => {\r\n          // Notify all windows of the value.\r\n          loop((record) => {\r\n            record.window.next(value);\r\n            // If the window is over the max size, we need to close it.\r\n            maxWindowSize <= ++record.seen && closeWindow(record);\r\n          });\r\n        },\r\n        // Complete the windows and the downstream subscriber and clean up.\r\n        () => terminate((consumer) => consumer.complete()),\r\n        // Notify the windows and the downstream subscriber of the error and clean up.\r\n        (err) => terminate((consumer) => consumer.error(err))\r\n      )\r\n    );\r\n\r\n    // Additional finalization. This will be called when the\r\n    // destination tears down. Other finalizations are registered implicitly\r\n    // above via subscription.\r\n    return () => {\r\n      // Ensure that the buffer is released.\r\n      windowRecords = null!;\r\n    };\r\n  });\r\n}\r\n\r\ninterface WindowRecord<T> {\r\n  seen: number;\r\n  window: Subject<T>;\r\n  subs: Subscription;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}