{"ast":null,"code":"import { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nimport { innerFrom } from '../observable/innerFrom';\nimport { noop } from '../util/noop';\nexport function takeUntil(notifier) {\n  return operate(function (source, subscriber) {\n    innerFrom(notifier).subscribe(createOperatorSubscriber(subscriber, function () {\n      return subscriber.complete();\n    }, noop));\n    !subscriber.closed && source.subscribe(subscriber);\n  });\n}","map":{"version":3,"mappings":"AACA,SAASA,OAAO,QAAQ,cAAc;AACtC,SAASC,wBAAwB,QAAQ,sBAAsB;AAC/D,SAASC,SAAS,QAAQ,yBAAyB;AACnD,SAASC,IAAI,QAAQ,cAAc;AAyCnC,OAAM,SAAUC,SAAS,CAAIC,QAA8B;EACzD,OAAOL,OAAO,CAAC,UAACM,MAAM,EAAEC,UAAU;IAChCL,SAAS,CAACG,QAAQ,CAAC,CAACG,SAAS,CAACP,wBAAwB,CAACM,UAAU,EAAE;MAAM,iBAAU,CAACE,QAAQ,EAAE;IAArB,CAAqB,EAAEN,IAAI,CAAC,CAAC;IACtG,CAACI,UAAU,CAACG,MAAM,IAAIJ,MAAM,CAACE,SAAS,CAACD,UAAU,CAAC;EACpD,CAAC,CAAC;AACJ","names":["operate","createOperatorSubscriber","innerFrom","noop","takeUntil","notifier","source","subscriber","subscribe","complete","closed"],"sources":["C:\\Users\\Amali\\Desktop\\Building_the_IoT_w._P2P_and_Cloud_Computing\\IoTProject\\node_modules\\rxjs\\src\\internal\\operators\\takeUntil.ts"],"sourcesContent":["import { MonoTypeOperatorFunction, ObservableInput } from '../types';\r\nimport { operate } from '../util/lift';\r\nimport { createOperatorSubscriber } from './OperatorSubscriber';\r\nimport { innerFrom } from '../observable/innerFrom';\r\nimport { noop } from '../util/noop';\r\n\r\n/**\r\n * Emits the values emitted by the source Observable until a `notifier`\r\n * Observable emits a value.\r\n *\r\n * <span class=\"informal\">Lets values pass until a second Observable,\r\n * `notifier`, emits a value. Then, it completes.</span>\r\n *\r\n * ![](takeUntil.png)\r\n *\r\n * `takeUntil` subscribes and begins mirroring the source Observable. It also\r\n * monitors a second Observable, `notifier` that you provide. If the `notifier`\r\n * emits a value, the output Observable stops mirroring the source Observable\r\n * and completes. If the `notifier` doesn't emit any value and completes\r\n * then `takeUntil` will pass all values.\r\n *\r\n * ## Example\r\n *\r\n * Tick every second until the first click happens\r\n *\r\n * ```ts\r\n * import { interval, fromEvent, takeUntil } from 'rxjs';\r\n *\r\n * const source = interval(1000);\r\n * const clicks = fromEvent(document, 'click');\r\n * const result = source.pipe(takeUntil(clicks));\r\n * result.subscribe(x => console.log(x));\r\n * ```\r\n *\r\n * @see {@link take}\r\n * @see {@link takeLast}\r\n * @see {@link takeWhile}\r\n * @see {@link skip}\r\n *\r\n * @param {Observable} notifier The Observable whose first emitted value will\r\n * cause the output Observable of `takeUntil` to stop emitting values from the\r\n * source Observable.\r\n * @return A function that returns an Observable that emits the values from the\r\n * source Observable until `notifier` emits its first value.\r\n */\r\nexport function takeUntil<T>(notifier: ObservableInput<any>): MonoTypeOperatorFunction<T> {\r\n  return operate((source, subscriber) => {\r\n    innerFrom(notifier).subscribe(createOperatorSubscriber(subscriber, () => subscriber.complete(), noop));\r\n    !subscriber.closed && source.subscribe(subscriber);\r\n  });\r\n}\r\n"]},"metadata":{},"sourceType":"module"}