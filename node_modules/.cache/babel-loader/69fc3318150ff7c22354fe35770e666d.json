{"ast":null,"code":"import { dateTimestampProvider } from '../scheduler/dateTimestampProvider';\nimport { map } from './map';\nexport function timestamp(timestampProvider) {\n  if (timestampProvider === void 0) {\n    timestampProvider = dateTimestampProvider;\n  }\n  return map(function (value) {\n    return {\n      value: value,\n      timestamp: timestampProvider.now()\n    };\n  });\n}","map":{"version":3,"mappings":"AACA,SAASA,qBAAqB,QAAQ,oCAAoC;AAC1E,SAASC,GAAG,QAAQ,OAAO;AAkC3B,OAAM,SAAUC,SAAS,CAAIC,iBAA4D;EAA5D;IAAAA,yCAA4D;EAAA;EACvF,OAAOF,GAAG,CAAC,UAACG,KAAQ;IAAK,OAAC;MAAEA,KAAK;MAAEF,SAAS,EAAEC,iBAAiB,CAACE,GAAG;IAAE,CAAE;EAA9C,CAA+C,CAAC;AAC3E","names":["dateTimestampProvider","map","timestamp","timestampProvider","value","now"],"sources":["C:\\Users\\Amali\\Desktop\\Building_the_IoT_w._P2P_and_Cloud_Computing\\IoTProject\\node_modules\\rxjs\\src\\internal\\operators\\timestamp.ts"],"sourcesContent":["import { OperatorFunction, TimestampProvider, Timestamp } from '../types';\r\nimport { dateTimestampProvider } from '../scheduler/dateTimestampProvider';\r\nimport { map } from './map';\r\n\r\n/**\r\n * Attaches a timestamp to each item emitted by an observable indicating when it was emitted\r\n *\r\n * The `timestamp` operator maps the *source* observable stream to an object of type\r\n * `{value: T, timestamp: R}`. The properties are generically typed. The `value` property contains the value\r\n * and type of the *source* observable. The `timestamp` is generated by the schedulers `now` function. By\r\n * default, it uses the `asyncScheduler` which simply returns `Date.now()` (milliseconds since 1970/01/01\r\n * 00:00:00:000) and therefore is of type `number`.\r\n *\r\n * ![](timestamp.png)\r\n *\r\n * ## Example\r\n *\r\n * In this example there is a timestamp attached to the document's click events\r\n *\r\n * ```ts\r\n * import { fromEvent, timestamp } from 'rxjs';\r\n *\r\n * const clickWithTimestamp = fromEvent(document, 'click').pipe(\r\n *   timestamp()\r\n * );\r\n *\r\n * // Emits data of type { value: PointerEvent, timestamp: number }\r\n * clickWithTimestamp.subscribe(data => {\r\n *   console.log(data);\r\n * });\r\n * ```\r\n *\r\n * @param timestampProvider An object with a `now()` method used to get the current timestamp.\r\n * @return A function that returns an Observable that attaches a timestamp to\r\n * each item emitted by the source Observable indicating when it was emitted.\r\n */\r\nexport function timestamp<T>(timestampProvider: TimestampProvider = dateTimestampProvider): OperatorFunction<T, Timestamp<T>> {\r\n  return map((value: T) => ({ value, timestamp: timestampProvider.now() }));\r\n}\r\n"]},"metadata":{},"sourceType":"module"}