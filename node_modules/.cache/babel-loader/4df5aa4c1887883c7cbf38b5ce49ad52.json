{"ast":null,"code":"import { __values } from \"tslib\";\nimport { EMPTY } from '../observable/empty';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function takeLast(count) {\n  return count <= 0 ? function () {\n    return EMPTY;\n  } : operate(function (source, subscriber) {\n    var buffer = [];\n    source.subscribe(createOperatorSubscriber(subscriber, function (value) {\n      buffer.push(value);\n      count < buffer.length && buffer.shift();\n    }, function () {\n      var e_1, _a;\n      try {\n        for (var buffer_1 = __values(buffer), buffer_1_1 = buffer_1.next(); !buffer_1_1.done; buffer_1_1 = buffer_1.next()) {\n          var value = buffer_1_1.value;\n          subscriber.next(value);\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (buffer_1_1 && !buffer_1_1.done && (_a = buffer_1.return)) _a.call(buffer_1);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n      subscriber.complete();\n    }, undefined, function () {\n      buffer = null;\n    }));\n  });\n}","map":{"version":3,"mappings":";AAAA,SAASA,KAAK,QAAQ,qBAAqB;AAE3C,SAASC,OAAO,QAAQ,cAAc;AACtC,SAASC,wBAAwB,QAAQ,sBAAsB;AAyC/D,OAAM,SAAUC,QAAQ,CAAIC,KAAa;EACvC,OAAOA,KAAK,IAAI,CAAC,GACb;IAAM,YAAK;EAAL,CAAK,GACXH,OAAO,CAAC,UAACI,MAAM,EAAEC,UAAU;IAKzB,IAAIC,MAAM,GAAQ,EAAE;IACpBF,MAAM,CAACG,SAAS,CACdN,wBAAwB,CACtBI,UAAU,EACV,UAACG,KAAK;MAEJF,MAAM,CAACG,IAAI,CAACD,KAAK,CAAC;MAGlBL,KAAK,GAAGG,MAAM,CAACI,MAAM,IAAIJ,MAAM,CAACK,KAAK,EAAE;IACzC,CAAC,EACD;;;QAGE,KAAoB,8BAAM,iFAAE;UAAvB,IAAMH,KAAK;UACdH,UAAU,CAACO,IAAI,CAACJ,KAAK,CAAC;;;;;;;;;;;;;MAExBH,UAAU,CAACQ,QAAQ,EAAE;IACvB,CAAC,EAEDC,SAAS,EACT;MAEER,MAAM,GAAG,IAAK;IAChB,CAAC,CACF,CACF;EACH,CAAC,CAAC;AACR","names":["EMPTY","operate","createOperatorSubscriber","takeLast","count","source","subscriber","buffer","subscribe","value","push","length","shift","next","complete","undefined"],"sources":["C:\\Users\\Amali\\Desktop\\Building_the_IoT_w._P2P_and_Cloud_Computing\\IoTProject\\node_modules\\rxjs\\src\\internal\\operators\\takeLast.ts"],"sourcesContent":["import { EMPTY } from '../observable/empty';\r\nimport { MonoTypeOperatorFunction } from '../types';\r\nimport { operate } from '../util/lift';\r\nimport { createOperatorSubscriber } from './OperatorSubscriber';\r\n\r\n/**\r\n * Waits for the source to complete, then emits the last N values from the source,\r\n * as specified by the `count` argument.\r\n *\r\n * ![](takeLast.png)\r\n *\r\n * `takeLast` results in an observable that will hold values up to `count` values in memory,\r\n * until the source completes. It then pushes all values in memory to the consumer, in the\r\n * order they were received from the source, then notifies the consumer that it is\r\n * complete.\r\n *\r\n * If for some reason the source completes before the `count` supplied to `takeLast` is reached,\r\n * all values received until that point are emitted, and then completion is notified.\r\n *\r\n * **Warning**: Using `takeLast` with an observable that never completes will result\r\n * in an observable that never emits a value.\r\n *\r\n * ## Example\r\n *\r\n * Take the last 3 values of an Observable with many values\r\n *\r\n * ```ts\r\n * import { range, takeLast } from 'rxjs';\r\n *\r\n * const many = range(1, 100);\r\n * const lastThree = many.pipe(takeLast(3));\r\n * lastThree.subscribe(x => console.log(x));\r\n * ```\r\n *\r\n * @see {@link take}\r\n * @see {@link takeUntil}\r\n * @see {@link takeWhile}\r\n * @see {@link skip}\r\n *\r\n * @param count The maximum number of values to emit from the end of\r\n * the sequence of values emitted by the source Observable.\r\n * @return A function that returns an Observable that emits at most the last\r\n * `count` values emitted by the source Observable.\r\n */\r\nexport function takeLast<T>(count: number): MonoTypeOperatorFunction<T> {\r\n  return count <= 0\r\n    ? () => EMPTY\r\n    : operate((source, subscriber) => {\r\n        // This buffer will hold the values we are going to emit\r\n        // when the source completes. Since we only want to take the\r\n        // last N values, we can't emit until we're sure we're not getting\r\n        // any more values.\r\n        let buffer: T[] = [];\r\n        source.subscribe(\r\n          createOperatorSubscriber(\r\n            subscriber,\r\n            (value) => {\r\n              // Add the most recent value onto the end of our buffer.\r\n              buffer.push(value);\r\n              // If our buffer is now larger than the number of values we\r\n              // want to take, we remove the oldest value from the buffer.\r\n              count < buffer.length && buffer.shift();\r\n            },\r\n            () => {\r\n              // The source completed, we now know what are last values\r\n              // are, emit them in the order they were received.\r\n              for (const value of buffer) {\r\n                subscriber.next(value);\r\n              }\r\n              subscriber.complete();\r\n            },\r\n            // Errors are passed through to the consumer\r\n            undefined,\r\n            () => {\r\n              // During finalization release the values in our buffer.\r\n              buffer = null!;\r\n            }\r\n          )\r\n        );\r\n      });\r\n}\r\n"]},"metadata":{},"sourceType":"module"}