{"ast":null,"code":"import { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function isEmpty() {\n  return operate(function (source, subscriber) {\n    source.subscribe(createOperatorSubscriber(subscriber, function () {\n      subscriber.next(false);\n      subscriber.complete();\n    }, function () {\n      subscriber.next(true);\n      subscriber.complete();\n    }));\n  });\n}","map":{"version":3,"mappings":"AACA,SAASA,OAAO,QAAQ,cAAc;AACtC,SAASC,wBAAwB,QAAQ,sBAAsB;AA+D/D,OAAM,SAAUC,OAAO;EACrB,OAAOF,OAAO,CAAC,UAACG,MAAM,EAAEC,UAAU;IAChCD,MAAM,CAACE,SAAS,CACdJ,wBAAwB,CACtBG,UAAU,EACV;MACEA,UAAU,CAACE,IAAI,CAAC,KAAK,CAAC;MACtBF,UAAU,CAACG,QAAQ,EAAE;IACvB,CAAC,EACD;MACEH,UAAU,CAACE,IAAI,CAAC,IAAI,CAAC;MACrBF,UAAU,CAACG,QAAQ,EAAE;IACvB,CAAC,CACF,CACF;EACH,CAAC,CAAC;AACJ","names":["operate","createOperatorSubscriber","isEmpty","source","subscriber","subscribe","next","complete"],"sources":["C:\\Users\\Amali\\Desktop\\Building_the_IoT_w._P2P_and_Cloud_Computing\\IoTProject\\node_modules\\rxjs\\src\\internal\\operators\\isEmpty.ts"],"sourcesContent":["import { OperatorFunction } from '../types';\r\nimport { operate } from '../util/lift';\r\nimport { createOperatorSubscriber } from './OperatorSubscriber';\r\n\r\n/**\r\n * Emits `false` if the input Observable emits any values, or emits `true` if the\r\n * input Observable completes without emitting any values.\r\n *\r\n * <span class=\"informal\">Tells whether any values are emitted by an Observable.</span>\r\n *\r\n * ![](isEmpty.png)\r\n *\r\n * `isEmpty` transforms an Observable that emits values into an Observable that\r\n * emits a single boolean value representing whether or not any values were\r\n * emitted by the source Observable. As soon as the source Observable emits a\r\n * value, `isEmpty` will emit a `false` and complete.  If the source Observable\r\n * completes having not emitted anything, `isEmpty` will emit a `true` and\r\n * complete.\r\n *\r\n * A similar effect could be achieved with {@link count}, but `isEmpty` can emit\r\n * a `false` value sooner.\r\n *\r\n * ## Examples\r\n *\r\n * Emit `false` for a non-empty Observable\r\n *\r\n * ```ts\r\n * import { Subject, isEmpty } from 'rxjs';\r\n *\r\n * const source = new Subject<string>();\r\n * const result = source.pipe(isEmpty());\r\n *\r\n * source.subscribe(x => console.log(x));\r\n * result.subscribe(x => console.log(x));\r\n *\r\n * source.next('a');\r\n * source.next('b');\r\n * source.next('c');\r\n * source.complete();\r\n *\r\n * // Outputs\r\n * // 'a'\r\n * // false\r\n * // 'b'\r\n * // 'c'\r\n * ```\r\n *\r\n * Emit `true` for an empty Observable\r\n *\r\n * ```ts\r\n * import { EMPTY, isEmpty } from 'rxjs';\r\n *\r\n * const result = EMPTY.pipe(isEmpty());\r\n * result.subscribe(x => console.log(x));\r\n *\r\n * // Outputs\r\n * // true\r\n * ```\r\n *\r\n * @see {@link count}\r\n * @see {@link EMPTY}\r\n *\r\n * @return A function that returns an Observable that emits boolean value\r\n * indicating whether the source Observable was empty or not.\r\n */\r\nexport function isEmpty<T>(): OperatorFunction<T, boolean> {\r\n  return operate((source, subscriber) => {\r\n    source.subscribe(\r\n      createOperatorSubscriber(\r\n        subscriber,\r\n        () => {\r\n          subscriber.next(false);\r\n          subscriber.complete();\r\n        },\r\n        () => {\r\n          subscriber.next(true);\r\n          subscriber.complete();\r\n        }\r\n      )\r\n    );\r\n  });\r\n}\r\n"]},"metadata":{},"sourceType":"module"}