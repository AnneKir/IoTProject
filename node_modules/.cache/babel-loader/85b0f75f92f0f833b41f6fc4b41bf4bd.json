{"ast":null,"code":"import { asyncScheduler } from '../scheduler/async';\nimport { audit } from './audit';\nimport { timer } from '../observable/timer';\nexport function auditTime(duration, scheduler) {\n  if (scheduler === void 0) {\n    scheduler = asyncScheduler;\n  }\n  return audit(function () {\n    return timer(duration, scheduler);\n  });\n}","map":{"version":3,"mappings":"AAAA,SAASA,cAAc,QAAQ,oBAAoB;AACnD,SAASC,KAAK,QAAQ,SAAS;AAC/B,SAASC,KAAK,QAAQ,qBAAqB;AAkD3C,OAAM,SAAUC,SAAS,CAAIC,QAAgB,EAAEC,SAAyC;EAAzC;IAAAA,0BAAyC;EAAA;EACtF,OAAOJ,KAAK,CAAC;IAAM,YAAK,CAACG,QAAQ,EAAEC,SAAS,CAAC;EAA1B,CAA0B,CAAC;AAChD","names":["asyncScheduler","audit","timer","auditTime","duration","scheduler"],"sources":["C:\\Users\\Amali\\Desktop\\Building_the_IoT_w._P2P_and_Cloud_Computing\\IoTProject\\node_modules\\rxjs\\src\\internal\\operators\\auditTime.ts"],"sourcesContent":["import { asyncScheduler } from '../scheduler/async';\r\nimport { audit } from './audit';\r\nimport { timer } from '../observable/timer';\r\nimport { MonoTypeOperatorFunction, SchedulerLike } from '../types';\r\n\r\n/**\r\n * Ignores source values for `duration` milliseconds, then emits the most recent\r\n * value from the source Observable, then repeats this process.\r\n *\r\n * <span class=\"informal\">When it sees a source value, it ignores that plus\r\n * the next ones for `duration` milliseconds, and then it emits the most recent\r\n * value from the source.</span>\r\n *\r\n * ![](auditTime.png)\r\n *\r\n * `auditTime` is similar to `throttleTime`, but emits the last value from the\r\n * silenced time window, instead of the first value. `auditTime` emits the most\r\n * recent value from the source Observable on the output Observable as soon as\r\n * its internal timer becomes disabled, and ignores source values while the\r\n * timer is enabled. Initially, the timer is disabled. As soon as the first\r\n * source value arrives, the timer is enabled. After `duration` milliseconds (or\r\n * the time unit determined internally by the optional `scheduler`) has passed,\r\n * the timer is disabled, then the most recent source value is emitted on the\r\n * output Observable, and this process repeats for the next source value.\r\n * Optionally takes a {@link SchedulerLike} for managing timers.\r\n *\r\n * ## Example\r\n *\r\n * Emit clicks at a rate of at most one click per second\r\n *\r\n * ```ts\r\n * import { fromEvent, auditTime } from 'rxjs';\r\n *\r\n * const clicks = fromEvent(document, 'click');\r\n * const result = clicks.pipe(auditTime(1000));\r\n * result.subscribe(x => console.log(x));\r\n * ```\r\n *\r\n * @see {@link audit}\r\n * @see {@link debounceTime}\r\n * @see {@link delay}\r\n * @see {@link sampleTime}\r\n * @see {@link throttleTime}\r\n *\r\n * @param {number} duration Time to wait before emitting the most recent source\r\n * value, measured in milliseconds or the time unit determined internally\r\n * by the optional `scheduler`.\r\n * @param {SchedulerLike} [scheduler=async] The {@link SchedulerLike} to use for\r\n * managing the timers that handle the rate-limiting behavior.\r\n * @return A function that returns an Observable that performs rate-limiting of\r\n * emissions from the source Observable.\r\n */\r\nexport function auditTime<T>(duration: number, scheduler: SchedulerLike = asyncScheduler): MonoTypeOperatorFunction<T> {\r\n  return audit(() => timer(duration, scheduler));\r\n}\r\n"]},"metadata":{},"sourceType":"module"}