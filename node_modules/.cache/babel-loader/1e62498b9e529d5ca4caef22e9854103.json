{"ast":null,"code":"import { Observable } from '../Observable';\nimport { EMPTY } from './empty';\nexport function range(start, count, scheduler) {\n  if (count == null) {\n    count = start;\n    start = 0;\n  }\n  if (count <= 0) {\n    return EMPTY;\n  }\n  var end = count + start;\n  return new Observable(scheduler ? function (subscriber) {\n    var n = start;\n    return scheduler.schedule(function () {\n      if (n < end) {\n        subscriber.next(n++);\n        this.schedule();\n      } else {\n        subscriber.complete();\n      }\n    });\n  } : function (subscriber) {\n    var n = start;\n    while (n < end && !subscriber.closed) {\n      subscriber.next(n++);\n    }\n    subscriber.complete();\n  });\n}","map":{"version":3,"mappings":"AACA,SAASA,UAAU,QAAQ,eAAe;AAC1C,SAASC,KAAK,QAAQ,SAAS;AAqD/B,OAAM,SAAUC,KAAK,CAACC,KAAa,EAAEC,KAAc,EAAEC,SAAyB;EAC5E,IAAID,KAAK,IAAI,IAAI,EAAE;IAEjBA,KAAK,GAAGD,KAAK;IACbA,KAAK,GAAG,CAAC;;EAGX,IAAIC,KAAK,IAAI,CAAC,EAAE;IAEd,OAAOH,KAAK;;EAId,IAAMK,GAAG,GAAGF,KAAK,GAAGD,KAAK;EAEzB,OAAO,IAAIH,UAAU,CACnBK,SAAS,GAEL,UAACE,UAAU;IACT,IAAIC,CAAC,GAAGL,KAAK;IACb,OAAOE,SAAS,CAACI,QAAQ,CAAC;MACxB,IAAID,CAAC,GAAGF,GAAG,EAAE;QACXC,UAAU,CAACG,IAAI,CAACF,CAAC,EAAE,CAAC;QACpB,IAAI,CAACC,QAAQ,EAAE;OAChB,MAAM;QACLF,UAAU,CAACI,QAAQ,EAAE;;IAEzB,CAAC,CAAC;EACJ,CAAC,GAED,UAACJ,UAAU;IACT,IAAIC,CAAC,GAAGL,KAAK;IACb,OAAOK,CAAC,GAAGF,GAAG,IAAI,CAACC,UAAU,CAACK,MAAM,EAAE;MACpCL,UAAU,CAACG,IAAI,CAACF,CAAC,EAAE,CAAC;;IAEtBD,UAAU,CAACI,QAAQ,EAAE;EACvB,CAAC,CACN;AACH","names":["Observable","EMPTY","range","start","count","scheduler","end","subscriber","n","schedule","next","complete","closed"],"sources":["C:\\Users\\Amali\\Desktop\\Building_the_IoT_w._P2P_and_Cloud_Computing\\IoTProject\\node_modules\\rxjs\\src\\internal\\observable\\range.ts"],"sourcesContent":["import { SchedulerLike } from '../types';\r\nimport { Observable } from '../Observable';\r\nimport { EMPTY } from './empty';\r\n\r\nexport function range(start: number, count?: number): Observable<number>;\r\n\r\n/**\r\n * @deprecated The `scheduler` parameter will be removed in v8. Use `range(start, count).pipe(observeOn(scheduler))` instead. Details: Details: https://rxjs.dev/deprecations/scheduler-argument\r\n */\r\nexport function range(start: number, count: number | undefined, scheduler: SchedulerLike): Observable<number>;\r\n\r\n/**\r\n * Creates an Observable that emits a sequence of numbers within a specified\r\n * range.\r\n *\r\n * <span class=\"informal\">Emits a sequence of numbers in a range.</span>\r\n *\r\n * ![](range.png)\r\n *\r\n * `range` operator emits a range of sequential integers, in order, where you\r\n * select the `start` of the range and its `length`. By default, uses no\r\n * {@link SchedulerLike} and just delivers the notifications synchronously, but may use\r\n * an optional {@link SchedulerLike} to regulate those deliveries.\r\n *\r\n * ## Example\r\n *\r\n * Produce a range of numbers\r\n *\r\n * ```ts\r\n * import { range } from 'rxjs';\r\n *\r\n * const numbers = range(1, 3);\r\n *\r\n * numbers.subscribe({\r\n *   next: value => console.log(value),\r\n *   complete: () => console.log('Complete!')\r\n * });\r\n *\r\n * // Logs:\r\n * // 1\r\n * // 2\r\n * // 3\r\n * // 'Complete!'\r\n * ```\r\n *\r\n * @see {@link timer}\r\n * @see {@link interval}\r\n *\r\n * @param {number} [start=0] The value of the first integer in the sequence.\r\n * @param {number} count The number of sequential integers to generate.\r\n * @param {SchedulerLike} [scheduler] A {@link SchedulerLike} to use for scheduling\r\n * the emissions of the notifications.\r\n * @return {Observable} An Observable of numbers that emits a finite range of\r\n * sequential integers.\r\n */\r\nexport function range(start: number, count?: number, scheduler?: SchedulerLike): Observable<number> {\r\n  if (count == null) {\r\n    // If one argument was passed, it's the count, not the start.\r\n    count = start;\r\n    start = 0;\r\n  }\r\n\r\n  if (count <= 0) {\r\n    // No count? We're going nowhere. Return EMPTY.\r\n    return EMPTY;\r\n  }\r\n\r\n  // Where the range should stop.\r\n  const end = count + start;\r\n\r\n  return new Observable(\r\n    scheduler\r\n      ? // The deprecated scheduled path.\r\n        (subscriber) => {\r\n          let n = start;\r\n          return scheduler.schedule(function () {\r\n            if (n < end) {\r\n              subscriber.next(n++);\r\n              this.schedule();\r\n            } else {\r\n              subscriber.complete();\r\n            }\r\n          });\r\n        }\r\n      : // Standard synchronous range.\r\n        (subscriber) => {\r\n          let n = start;\r\n          while (n < end && !subscriber.closed) {\r\n            subscriber.next(n++);\r\n          }\r\n          subscriber.complete();\r\n        }\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}