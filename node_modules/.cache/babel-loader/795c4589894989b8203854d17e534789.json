{"ast":null,"code":"import { Subject } from '../Subject';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function retryWhen(notifier) {\n  return operate(function (source, subscriber) {\n    var innerSub;\n    var syncResub = false;\n    var errors$;\n    var subscribeForRetryWhen = function () {\n      innerSub = source.subscribe(createOperatorSubscriber(subscriber, undefined, undefined, function (err) {\n        if (!errors$) {\n          errors$ = new Subject();\n          notifier(errors$).subscribe(createOperatorSubscriber(subscriber, function () {\n            return innerSub ? subscribeForRetryWhen() : syncResub = true;\n          }));\n        }\n        if (errors$) {\n          errors$.next(err);\n        }\n      }));\n      if (syncResub) {\n        innerSub.unsubscribe();\n        innerSub = null;\n        syncResub = false;\n        subscribeForRetryWhen();\n      }\n    };\n    subscribeForRetryWhen();\n  });\n}","map":{"version":3,"mappings":"AACA,SAASA,OAAO,QAAQ,YAAY;AAIpC,SAASC,OAAO,QAAQ,cAAc;AACtC,SAASC,wBAAwB,QAAQ,sBAAsB;AAyD/D,OAAM,SAAUC,SAAS,CAAIC,QAAsD;EACjF,OAAOH,OAAO,CAAC,UAACI,MAAM,EAAEC,UAAU;IAChC,IAAIC,QAA6B;IACjC,IAAIC,SAAS,GAAG,KAAK;IACrB,IAAIC,OAAqB;IAEzB,IAAMC,qBAAqB,GAAG;MAC5BH,QAAQ,GAAGF,MAAM,CAACM,SAAS,CACzBT,wBAAwB,CAACI,UAAU,EAAEM,SAAS,EAAEA,SAAS,EAAE,UAACC,GAAG;QAC7D,IAAI,CAACJ,OAAO,EAAE;UACZA,OAAO,GAAG,IAAIT,OAAO,EAAE;UACvBI,QAAQ,CAACK,OAAO,CAAC,CAACE,SAAS,CACzBT,wBAAwB,CAACI,UAAU,EAAE;YAMnC,eAAQ,GAAGI,qBAAqB,EAAE,GAAIF,SAAS,GAAG,IAAK;UAAvD,CAAuD,CACxD,CACF;;QAEH,IAAIC,OAAO,EAAE;UAEXA,OAAO,CAACK,IAAI,CAACD,GAAG,CAAC;;MAErB,CAAC,CAAC,CACH;MAED,IAAIL,SAAS,EAAE;QAKbD,QAAQ,CAACQ,WAAW,EAAE;QACtBR,QAAQ,GAAG,IAAI;QAEfC,SAAS,GAAG,KAAK;QAEjBE,qBAAqB,EAAE;;IAE3B,CAAC;IAGDA,qBAAqB,EAAE;EACzB,CAAC,CAAC;AACJ","names":["Subject","operate","createOperatorSubscriber","retryWhen","notifier","source","subscriber","innerSub","syncResub","errors$","subscribeForRetryWhen","subscribe","undefined","err","next","unsubscribe"],"sources":["C:\\Users\\Amali\\Desktop\\Building_the_IoT_w._P2P_and_Cloud_Computing\\IoTProject\\node_modules\\rxjs\\src\\internal\\operators\\retryWhen.ts"],"sourcesContent":["import { Observable } from '../Observable';\r\nimport { Subject } from '../Subject';\r\nimport { Subscription } from '../Subscription';\r\n\r\nimport { MonoTypeOperatorFunction } from '../types';\r\nimport { operate } from '../util/lift';\r\nimport { createOperatorSubscriber } from './OperatorSubscriber';\r\n\r\n/**\r\n * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable\r\n * calls `error`, this method will emit the Throwable that caused the error to the Observable returned from `notifier`.\r\n * If that Observable calls `complete` or `error` then this method will call `complete` or `error` on the child\r\n * subscription. Otherwise this method will resubscribe to the source Observable.\r\n *\r\n * ![](retryWhen.png)\r\n *\r\n * Retry an observable sequence on error based on custom criteria.\r\n *\r\n * ## Example\r\n *\r\n * ```ts\r\n * import { interval, map, retryWhen, tap, delayWhen, timer } from 'rxjs';\r\n *\r\n * const source = interval(1000);\r\n * const result = source.pipe(\r\n *   map(value => {\r\n *     if (value > 5) {\r\n *       // error will be picked up by retryWhen\r\n *       throw value;\r\n *     }\r\n *     return value;\r\n *   }),\r\n *   retryWhen(errors =>\r\n *     errors.pipe(\r\n *       // log error message\r\n *       tap(value => console.log(`Value ${ value } was too high!`)),\r\n *       // restart in 5 seconds\r\n *       delayWhen(value => timer(value * 1000))\r\n *     )\r\n *   )\r\n * );\r\n *\r\n * result.subscribe(value => console.log(value));\r\n *\r\n * // results:\r\n * // 0\r\n * // 1\r\n * // 2\r\n * // 3\r\n * // 4\r\n * // 5\r\n * // 'Value 6 was too high!'\r\n * // - Wait 5 seconds then repeat\r\n * ```\r\n *\r\n * @see {@link retry}\r\n *\r\n * @param {function(errors: Observable): Observable} notifier - Receives an Observable of notifications with which a\r\n * user can `complete` or `error`, aborting the retry.\r\n * @return A function that returns an Observable that mirrors the source\r\n * Observable with the exception of an `error`.\r\n * @deprecated Will be removed in v9 or v10, use {@link retry}'s `delay` option instead.\r\n */\r\nexport function retryWhen<T>(notifier: (errors: Observable<any>) => Observable<any>): MonoTypeOperatorFunction<T> {\r\n  return operate((source, subscriber) => {\r\n    let innerSub: Subscription | null;\r\n    let syncResub = false;\r\n    let errors$: Subject<any>;\r\n\r\n    const subscribeForRetryWhen = () => {\r\n      innerSub = source.subscribe(\r\n        createOperatorSubscriber(subscriber, undefined, undefined, (err) => {\r\n          if (!errors$) {\r\n            errors$ = new Subject();\r\n            notifier(errors$).subscribe(\r\n              createOperatorSubscriber(subscriber, () =>\r\n                // If we have an innerSub, this was an asynchronous call, kick off the retry.\r\n                // Otherwise, if we don't have an innerSub yet, that's because the inner subscription\r\n                // call hasn't even returned yet. We've arrived here synchronously.\r\n                // So we flag that we want to resub, such that we can ensure finalization\r\n                // happens before we resubscribe.\r\n                innerSub ? subscribeForRetryWhen() : (syncResub = true)\r\n              )\r\n            );\r\n          }\r\n          if (errors$) {\r\n            // We have set up the notifier without error.\r\n            errors$.next(err);\r\n          }\r\n        })\r\n      );\r\n\r\n      if (syncResub) {\r\n        // Ensure that the inner subscription is torn down before\r\n        // moving on to the next subscription in the synchronous case.\r\n        // If we don't do this here, all inner subscriptions will not be\r\n        // torn down until the entire observable is done.\r\n        innerSub.unsubscribe();\r\n        innerSub = null;\r\n        // We may need to do this multiple times, so reset the flag.\r\n        syncResub = false;\r\n        // Resubscribe\r\n        subscribeForRetryWhen();\r\n      }\r\n    };\r\n\r\n    // Start the subscription\r\n    subscribeForRetryWhen();\r\n  });\r\n}\r\n"]},"metadata":{},"sourceType":"module"}