{"ast":null,"code":"var isArray = Array.isArray;\nvar getPrototypeOf = Object.getPrototypeOf,\n  objectProto = Object.prototype,\n  getKeys = Object.keys;\nexport function argsArgArrayOrObject(args) {\n  if (args.length === 1) {\n    var first_1 = args[0];\n    if (isArray(first_1)) {\n      return {\n        args: first_1,\n        keys: null\n      };\n    }\n    if (isPOJO(first_1)) {\n      var keys = getKeys(first_1);\n      return {\n        args: keys.map(function (key) {\n          return first_1[key];\n        }),\n        keys: keys\n      };\n    }\n  }\n  return {\n    args: args,\n    keys: null\n  };\n}\nfunction isPOJO(obj) {\n  return obj && typeof obj === 'object' && getPrototypeOf(obj) === objectProto;\n}","map":{"version":3,"mappings":"AAAQ,WAAO,GAAKA,KAAK,QAAV;AACP,kBAAc,GAA4CC,MAAM,eAAlD;EAAaC,WAAW,GAAoBD,MAAM,UAA1B;EAAQE,OAAO,GAAKF,MAAM,KAAX;AAQ7D,OAAM,SAAUG,oBAAoB,CAAiCC,IAAuB;EAC1F,IAAIA,IAAI,CAACC,MAAM,KAAK,CAAC,EAAE;IACrB,IAAMC,OAAK,GAAGF,IAAI,CAAC,CAAC,CAAC;IACrB,IAAIG,OAAO,CAACD,OAAK,CAAC,EAAE;MAClB,OAAO;QAAEF,IAAI,EAAEE,OAAK;QAAEE,IAAI,EAAE;MAAI,CAAE;;IAEpC,IAAIC,MAAM,CAACH,OAAK,CAAC,EAAE;MACjB,IAAME,IAAI,GAAGN,OAAO,CAACI,OAAK,CAAC;MAC3B,OAAO;QACLF,IAAI,EAAEI,IAAI,CAACE,GAAG,CAAC,UAACC,GAAG;UAAK,cAAK,CAACA,GAAG,CAAC;QAAV,CAAU,CAAC;QACnCH,IAAI;OACL;;;EAIL,OAAO;IAAEJ,IAAI,EAAEA,IAAW;IAAEI,IAAI,EAAE;EAAI,CAAE;AAC1C;AAEA,SAASC,MAAM,CAACG,GAAQ;EACtB,OAAOA,GAAG,IAAI,OAAOA,GAAG,KAAK,QAAQ,IAAIC,cAAc,CAACD,GAAG,CAAC,KAAKX,WAAW;AAC9E","names":["Array","Object","objectProto","getKeys","argsArgArrayOrObject","args","length","first_1","isArray","keys","isPOJO","map","key","obj","getPrototypeOf"],"sources":["C:\\Users\\Amali\\Desktop\\Building_the_IoT_w._P2P_and_Cloud_Computing\\IoTProject\\node_modules\\rxjs\\src\\internal\\util\\argsArgArrayOrObject.ts"],"sourcesContent":["const { isArray } = Array;\r\nconst { getPrototypeOf, prototype: objectProto, keys: getKeys } = Object;\r\n\r\n/**\r\n * Used in functions where either a list of arguments, a single array of arguments, or a\r\n * dictionary of arguments can be returned. Returns an object with an `args` property with\r\n * the arguments in an array, if it is a dictionary, it will also return the `keys` in another\r\n * property.\r\n */\r\nexport function argsArgArrayOrObject<T, O extends Record<string, T>>(args: T[] | [O] | [T[]]): { args: T[]; keys: string[] | null } {\r\n  if (args.length === 1) {\r\n    const first = args[0];\r\n    if (isArray(first)) {\r\n      return { args: first, keys: null };\r\n    }\r\n    if (isPOJO(first)) {\r\n      const keys = getKeys(first);\r\n      return {\r\n        args: keys.map((key) => first[key]),\r\n        keys,\r\n      };\r\n    }\r\n  }\r\n\r\n  return { args: args as T[], keys: null };\r\n}\r\n\r\nfunction isPOJO(obj: any): obj is object {\r\n  return obj && typeof obj === 'object' && getPrototypeOf(obj) === objectProto;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}