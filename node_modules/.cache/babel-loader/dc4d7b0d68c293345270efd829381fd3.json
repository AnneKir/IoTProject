{"ast":null,"code":"import { __extends, __values } from \"tslib\";\nimport { Observable } from './Observable';\nimport { Subscription, EMPTY_SUBSCRIPTION } from './Subscription';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { arrRemove } from './util/arrRemove';\nimport { errorContext } from './util/errorContext';\nvar Subject = function (_super) {\n  __extends(Subject, _super);\n  function Subject() {\n    var _this = _super.call(this) || this;\n    _this.closed = false;\n    _this.currentObservers = null;\n    _this.observers = [];\n    _this.isStopped = false;\n    _this.hasError = false;\n    _this.thrownError = null;\n    return _this;\n  }\n  Subject.prototype.lift = function (operator) {\n    var subject = new AnonymousSubject(this, this);\n    subject.operator = operator;\n    return subject;\n  };\n  Subject.prototype._throwIfClosed = function () {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n  };\n  Subject.prototype.next = function (value) {\n    var _this = this;\n    errorContext(function () {\n      var e_1, _a;\n      _this._throwIfClosed();\n      if (!_this.isStopped) {\n        if (!_this.currentObservers) {\n          _this.currentObservers = Array.from(_this.observers);\n        }\n        try {\n          for (var _b = __values(_this.currentObservers), _c = _b.next(); !_c.done; _c = _b.next()) {\n            var observer = _c.value;\n            observer.next(value);\n          }\n        } catch (e_1_1) {\n          e_1 = {\n            error: e_1_1\n          };\n        } finally {\n          try {\n            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n          } finally {\n            if (e_1) throw e_1.error;\n          }\n        }\n      }\n    });\n  };\n  Subject.prototype.error = function (err) {\n    var _this = this;\n    errorContext(function () {\n      _this._throwIfClosed();\n      if (!_this.isStopped) {\n        _this.hasError = _this.isStopped = true;\n        _this.thrownError = err;\n        var observers = _this.observers;\n        while (observers.length) {\n          observers.shift().error(err);\n        }\n      }\n    });\n  };\n  Subject.prototype.complete = function () {\n    var _this = this;\n    errorContext(function () {\n      _this._throwIfClosed();\n      if (!_this.isStopped) {\n        _this.isStopped = true;\n        var observers = _this.observers;\n        while (observers.length) {\n          observers.shift().complete();\n        }\n      }\n    });\n  };\n  Subject.prototype.unsubscribe = function () {\n    this.isStopped = this.closed = true;\n    this.observers = this.currentObservers = null;\n  };\n  Object.defineProperty(Subject.prototype, \"observed\", {\n    get: function get() {\n      var _a;\n      return ((_a = this.observers) === null || _a === void 0 ? void 0 : _a.length) > 0;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Subject.prototype._trySubscribe = function (subscriber) {\n    this._throwIfClosed();\n    return _super.prototype._trySubscribe.call(this, subscriber);\n  };\n  Subject.prototype._subscribe = function (subscriber) {\n    this._throwIfClosed();\n    this._checkFinalizedStatuses(subscriber);\n    return this._innerSubscribe(subscriber);\n  };\n  Subject.prototype._innerSubscribe = function (subscriber) {\n    var _this = this;\n    var _a = this,\n      hasError = _a.hasError,\n      isStopped = _a.isStopped,\n      observers = _a.observers;\n    if (hasError || isStopped) {\n      return EMPTY_SUBSCRIPTION;\n    }\n    this.currentObservers = null;\n    observers.push(subscriber);\n    return new Subscription(function () {\n      _this.currentObservers = null;\n      arrRemove(observers, subscriber);\n    });\n  };\n  Subject.prototype._checkFinalizedStatuses = function (subscriber) {\n    var _a = this,\n      hasError = _a.hasError,\n      thrownError = _a.thrownError,\n      isStopped = _a.isStopped;\n    if (hasError) {\n      subscriber.error(thrownError);\n    } else if (isStopped) {\n      subscriber.complete();\n    }\n  };\n  Subject.prototype.asObservable = function () {\n    var observable = new Observable();\n    observable.source = this;\n    return observable;\n  };\n  Subject.create = function (destination, source) {\n    return new AnonymousSubject(destination, source);\n  };\n  return Subject;\n}(Observable);\nexport { Subject };\nvar AnonymousSubject = function (_super) {\n  __extends(AnonymousSubject, _super);\n  function AnonymousSubject(destination, source) {\n    var _this = _super.call(this) || this;\n    _this.destination = destination;\n    _this.source = source;\n    return _this;\n  }\n  AnonymousSubject.prototype.next = function (value) {\n    var _a, _b;\n    (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.next) === null || _b === void 0 ? void 0 : _b.call(_a, value);\n  };\n  AnonymousSubject.prototype.error = function (err) {\n    var _a, _b;\n    (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.error) === null || _b === void 0 ? void 0 : _b.call(_a, err);\n  };\n  AnonymousSubject.prototype.complete = function () {\n    var _a, _b;\n    (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.complete) === null || _b === void 0 ? void 0 : _b.call(_a);\n  };\n  AnonymousSubject.prototype._subscribe = function (subscriber) {\n    var _a, _b;\n    return (_b = (_a = this.source) === null || _a === void 0 ? void 0 : _a.subscribe(subscriber)) !== null && _b !== void 0 ? _b : EMPTY_SUBSCRIPTION;\n  };\n  return AnonymousSubject;\n}(Subject);\nexport { AnonymousSubject };","map":{"version":3,"mappings":"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","names":["Observable","Subscription","EMPTY_SUBSCRIPTION","ObjectUnsubscribedError","arrRemove","errorContext","__extends","_super","_this","Subject","operator","subject","AnonymousSubject","closed","value","_throwIfClosed","isStopped","currentObservers","Array","from","observers","observer","next","err","hasError","thrownError","length","shift","error","complete","Object","subscriber","_trySubscribe","_checkFinalizedStatuses","_innerSubscribe","push","observable","source","destination","subscribe"],"sources":["C:\\Users\\Amali\\Desktop\\Building_the_IoT_w._P2P_and_Cloud_Computing\\IoTProject\\node_modules\\rxjs\\src\\internal\\Subject.ts"],"sourcesContent":["import { Operator } from './Operator';\r\nimport { Observable } from './Observable';\r\nimport { Subscriber } from './Subscriber';\r\nimport { Subscription, EMPTY_SUBSCRIPTION } from './Subscription';\r\nimport { Observer, SubscriptionLike, TeardownLogic } from './types';\r\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\r\nimport { arrRemove } from './util/arrRemove';\r\nimport { errorContext } from './util/errorContext';\r\n\r\n/**\r\n * A Subject is a special type of Observable that allows values to be\r\n * multicasted to many Observers. Subjects are like EventEmitters.\r\n *\r\n * Every Subject is an Observable and an Observer. You can subscribe to a\r\n * Subject, and you can call next to feed values as well as error and complete.\r\n */\r\nexport class Subject<T> extends Observable<T> implements SubscriptionLike {\r\n  closed = false;\r\n\r\n  private currentObservers: Observer<T>[] | null = null;\r\n\r\n  /** @deprecated Internal implementation detail, do not use directly. Will be made internal in v8. */\r\n  observers: Observer<T>[] = [];\r\n  /** @deprecated Internal implementation detail, do not use directly. Will be made internal in v8. */\r\n  isStopped = false;\r\n  /** @deprecated Internal implementation detail, do not use directly. Will be made internal in v8. */\r\n  hasError = false;\r\n  /** @deprecated Internal implementation detail, do not use directly. Will be made internal in v8. */\r\n  thrownError: any = null;\r\n\r\n  /**\r\n   * Creates a \"subject\" by basically gluing an observer to an observable.\r\n   *\r\n   * @nocollapse\r\n   * @deprecated Recommended you do not use. Will be removed at some point in the future. Plans for replacement still under discussion.\r\n   */\r\n  static create: (...args: any[]) => any = <T>(destination: Observer<T>, source: Observable<T>): AnonymousSubject<T> => {\r\n    return new AnonymousSubject<T>(destination, source);\r\n  };\r\n\r\n  constructor() {\r\n    // NOTE: This must be here to obscure Observable's constructor.\r\n    super();\r\n  }\r\n\r\n  /** @deprecated Internal implementation detail, do not use directly. Will be made internal in v8. */\r\n  lift<R>(operator: Operator<T, R>): Observable<R> {\r\n    const subject = new AnonymousSubject(this, this);\r\n    subject.operator = operator as any;\r\n    return subject as any;\r\n  }\r\n\r\n  /** @internal */\r\n  protected _throwIfClosed() {\r\n    if (this.closed) {\r\n      throw new ObjectUnsubscribedError();\r\n    }\r\n  }\r\n\r\n  next(value: T) {\r\n    errorContext(() => {\r\n      this._throwIfClosed();\r\n      if (!this.isStopped) {\r\n        if (!this.currentObservers) {\r\n          this.currentObservers = Array.from(this.observers);\r\n        }\r\n        for (const observer of this.currentObservers) {\r\n          observer.next(value);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  error(err: any) {\r\n    errorContext(() => {\r\n      this._throwIfClosed();\r\n      if (!this.isStopped) {\r\n        this.hasError = this.isStopped = true;\r\n        this.thrownError = err;\r\n        const { observers } = this;\r\n        while (observers.length) {\r\n          observers.shift()!.error(err);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  complete() {\r\n    errorContext(() => {\r\n      this._throwIfClosed();\r\n      if (!this.isStopped) {\r\n        this.isStopped = true;\r\n        const { observers } = this;\r\n        while (observers.length) {\r\n          observers.shift()!.complete();\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  unsubscribe() {\r\n    this.isStopped = this.closed = true;\r\n    this.observers = this.currentObservers = null!;\r\n  }\r\n\r\n  get observed() {\r\n    return this.observers?.length > 0;\r\n  }\r\n\r\n  /** @internal */\r\n  protected _trySubscribe(subscriber: Subscriber<T>): TeardownLogic {\r\n    this._throwIfClosed();\r\n    return super._trySubscribe(subscriber);\r\n  }\r\n\r\n  /** @internal */\r\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\r\n    this._throwIfClosed();\r\n    this._checkFinalizedStatuses(subscriber);\r\n    return this._innerSubscribe(subscriber);\r\n  }\r\n\r\n  /** @internal */\r\n  protected _innerSubscribe(subscriber: Subscriber<any>) {\r\n    const { hasError, isStopped, observers } = this;\r\n    if (hasError || isStopped) {\r\n      return EMPTY_SUBSCRIPTION;\r\n    }\r\n    this.currentObservers = null;\r\n    observers.push(subscriber);\r\n    return new Subscription(() => {\r\n      this.currentObservers = null;\r\n      arrRemove(observers, subscriber);\r\n    });\r\n  }\r\n\r\n  /** @internal */\r\n  protected _checkFinalizedStatuses(subscriber: Subscriber<any>) {\r\n    const { hasError, thrownError, isStopped } = this;\r\n    if (hasError) {\r\n      subscriber.error(thrownError);\r\n    } else if (isStopped) {\r\n      subscriber.complete();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Creates a new Observable with this Subject as the source. You can do this\r\n   * to create custom Observer-side logic of the Subject and conceal it from\r\n   * code that uses the Observable.\r\n   * @return {Observable} Observable that the Subject casts to\r\n   */\r\n  asObservable(): Observable<T> {\r\n    const observable: any = new Observable<T>();\r\n    observable.source = this;\r\n    return observable;\r\n  }\r\n}\r\n\r\n/**\r\n * @class AnonymousSubject<T>\r\n */\r\nexport class AnonymousSubject<T> extends Subject<T> {\r\n  constructor(\r\n    /** @deprecated Internal implementation detail, do not use directly. Will be made internal in v8. */\r\n    public destination?: Observer<T>,\r\n    source?: Observable<T>\r\n  ) {\r\n    super();\r\n    this.source = source;\r\n  }\r\n\r\n  next(value: T) {\r\n    this.destination?.next?.(value);\r\n  }\r\n\r\n  error(err: any) {\r\n    this.destination?.error?.(err);\r\n  }\r\n\r\n  complete() {\r\n    this.destination?.complete?.();\r\n  }\r\n\r\n  /** @internal */\r\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\r\n    return this.source?.subscribe(subscriber) ?? EMPTY_SUBSCRIPTION;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}