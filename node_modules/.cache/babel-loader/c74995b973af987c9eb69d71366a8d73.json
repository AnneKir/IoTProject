{"ast":null,"code":"import { createOperatorSubscriber } from './OperatorSubscriber';\nexport function scanInternals(accumulator, seed, hasSeed, emitOnNext, emitBeforeComplete) {\n  return function (source, subscriber) {\n    var hasState = hasSeed;\n    var state = seed;\n    var index = 0;\n    source.subscribe(createOperatorSubscriber(subscriber, function (value) {\n      var i = index++;\n      state = hasState ? accumulator(state, value, i) : (hasState = true, value);\n      emitOnNext && subscriber.next(state);\n    }, emitBeforeComplete && function () {\n      hasState && subscriber.next(state);\n      subscriber.complete();\n    }));\n  };\n}","map":{"version":3,"mappings":"AAEA,SAASA,wBAAwB,QAAQ,sBAAsB;AAW/D,OAAM,SAAUC,aAAa,CAC3BC,WAA2D,EAC3DC,IAAO,EACPC,OAAgB,EAChBC,UAAmB,EACnBC,kBAAqC;EAErC,OAAO,UAACC,MAAqB,EAAEC,UAA2B;IAIxD,IAAIC,QAAQ,GAAGL,OAAO;IAItB,IAAIM,KAAK,GAAQP,IAAI;IAErB,IAAIQ,KAAK,GAAG,CAAC;IAGbJ,MAAM,CAACK,SAAS,CACdZ,wBAAwB,CACtBQ,UAAU,EACV,UAACK,KAAK;MAEJ,IAAMC,CAAC,GAAGH,KAAK,EAAE;MAEjBD,KAAK,GAAGD,QAAQ,GAEZP,WAAW,CAACQ,KAAK,EAAEG,KAAK,EAAEC,CAAC,CAAC,IAI1BL,QAAQ,GAAG,IAAI,EAAGI,KAAK,CAAC;MAG9BR,UAAU,IAAIG,UAAU,CAACO,IAAI,CAACL,KAAK,CAAC;IACtC,CAAC,EAGDJ,kBAAkB,IACf;MACCG,QAAQ,IAAID,UAAU,CAACO,IAAI,CAACL,KAAK,CAAC;MAClCF,UAAU,CAACQ,QAAQ,EAAE;IACvB,CAAE,CACL,CACF;EACH,CAAC;AACH","names":["createOperatorSubscriber","scanInternals","accumulator","seed","hasSeed","emitOnNext","emitBeforeComplete","source","subscriber","hasState","state","index","subscribe","value","i","next","complete"],"sources":["C:\\Users\\Amali\\Desktop\\Building_the_IoT_w._P2P_and_Cloud_Computing\\IoTProject\\node_modules\\rxjs\\src\\internal\\operators\\scanInternals.ts"],"sourcesContent":["import { Observable } from '../Observable';\r\nimport { Subscriber } from '../Subscriber';\r\nimport { createOperatorSubscriber } from './OperatorSubscriber';\r\n\r\n/**\r\n * A basic scan operation. This is used for `scan` and `reduce`.\r\n * @param accumulator The accumulator to use\r\n * @param seed The seed value for the state to accumulate\r\n * @param hasSeed Whether or not a seed was provided\r\n * @param emitOnNext Whether or not to emit the state on next\r\n * @param emitBeforeComplete Whether or not to emit the before completion\r\n */\r\n\r\nexport function scanInternals<V, A, S>(\r\n  accumulator: (acc: V | A | S, value: V, index: number) => A,\r\n  seed: S,\r\n  hasSeed: boolean,\r\n  emitOnNext: boolean,\r\n  emitBeforeComplete?: undefined | true\r\n) {\r\n  return (source: Observable<V>, subscriber: Subscriber<any>) => {\r\n    // Whether or not we have state yet. This will only be\r\n    // false before the first value arrives if we didn't get\r\n    // a seed value.\r\n    let hasState = hasSeed;\r\n    // The state that we're tracking, starting with the seed,\r\n    // if there is one, and then updated by the return value\r\n    // from the accumulator on each emission.\r\n    let state: any = seed;\r\n    // An index to pass to the accumulator function.\r\n    let index = 0;\r\n\r\n    // Subscribe to our source. All errors and completions are passed through.\r\n    source.subscribe(\r\n      createOperatorSubscriber(\r\n        subscriber,\r\n        (value) => {\r\n          // Always increment the index.\r\n          const i = index++;\r\n          // Set the state\r\n          state = hasState\r\n            ? // We already have state, so we can get the new state from the accumulator\r\n              accumulator(state, value, i)\r\n            : // We didn't have state yet, a seed value was not provided, so\r\n\r\n              // we set the state to the first value, and mark that we have state now\r\n              ((hasState = true), value);\r\n\r\n          // Maybe send it to the consumer.\r\n          emitOnNext && subscriber.next(state);\r\n        },\r\n        // If an onComplete was given, call it, otherwise\r\n        // just pass through the complete notification to the consumer.\r\n        emitBeforeComplete &&\r\n          (() => {\r\n            hasState && subscriber.next(state);\r\n            subscriber.complete();\r\n          })\r\n      )\r\n    );\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}