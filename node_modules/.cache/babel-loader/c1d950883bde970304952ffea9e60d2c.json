{"ast":null,"code":"import { Observable } from '../Observable';\nimport { innerFrom } from './innerFrom';\nexport function defer(observableFactory) {\n  return new Observable(function (subscriber) {\n    innerFrom(observableFactory()).subscribe(subscriber);\n  });\n}","map":{"version":3,"mappings":"AAAA,SAASA,UAAU,QAAQ,eAAe;AAE1C,SAASC,SAAS,QAAQ,aAAa;AAkDvC,OAAM,SAAUC,KAAK,CAAiCC,iBAA0B;EAC9E,OAAO,IAAIH,UAAU,CAAqB,UAACI,UAAU;IACnDH,SAAS,CAACE,iBAAiB,EAAE,CAAC,CAACE,SAAS,CAACD,UAAU,CAAC;EACtD,CAAC,CAAC;AACJ","names":["Observable","innerFrom","defer","observableFactory","subscriber","subscribe"],"sources":["C:\\Users\\Amali\\Desktop\\Building_the_IoT_w._P2P_and_Cloud_Computing\\IoTProject\\node_modules\\rxjs\\src\\internal\\observable\\defer.ts"],"sourcesContent":["import { Observable } from '../Observable';\r\nimport { ObservedValueOf, ObservableInput } from '../types';\r\nimport { innerFrom } from './innerFrom';\r\n\r\n/**\r\n * Creates an Observable that, on subscribe, calls an Observable factory to\r\n * make an Observable for each new Observer.\r\n *\r\n * <span class=\"informal\">Creates the Observable lazily, that is, only when it\r\n * is subscribed.\r\n * </span>\r\n *\r\n * ![](defer.png)\r\n *\r\n * `defer` allows you to create an Observable only when the Observer\r\n * subscribes. It waits until an Observer subscribes to it, calls the given\r\n * factory function to get an Observable -- where a factory function typically\r\n * generates a new Observable -- and subscribes the Observer to this Observable.\r\n * In case the factory function returns a falsy value, then EMPTY is used as\r\n * Observable instead. Last but not least, an exception during the factory\r\n * function call is transferred to the Observer by calling `error`.\r\n *\r\n * ## Example\r\n *\r\n * Subscribe to either an Observable of clicks or an Observable of interval, at random\r\n *\r\n * ```ts\r\n * import { defer, fromEvent, interval } from 'rxjs';\r\n *\r\n * const clicksOrInterval = defer(() => {\r\n *   return Math.random() > 0.5\r\n *     ? fromEvent(document, 'click')\r\n *     : interval(1000);\r\n * });\r\n * clicksOrInterval.subscribe(x => console.log(x));\r\n *\r\n * // Results in the following behavior:\r\n * // If the result of Math.random() is greater than 0.5 it will listen\r\n * // for clicks anywhere on the \"document\"; when document is clicked it\r\n * // will log a MouseEvent object to the console. If the result is less\r\n * // than 0.5 it will emit ascending numbers, one every second(1000ms).\r\n * ```\r\n *\r\n * @see {@link Observable}\r\n *\r\n * @param {function(): ObservableInput} observableFactory The Observable\r\n * factory function to invoke for each Observer that subscribes to the output\r\n * Observable. May also return a Promise, which will be converted on the fly\r\n * to an Observable.\r\n * @return {Observable} An Observable whose Observers' subscriptions trigger\r\n * an invocation of the given Observable factory function.\r\n */\r\nexport function defer<R extends ObservableInput<any>>(observableFactory: () => R): Observable<ObservedValueOf<R>> {\r\n  return new Observable<ObservedValueOf<R>>((subscriber) => {\r\n    innerFrom(observableFactory()).subscribe(subscriber);\r\n  });\r\n}\r\n"]},"metadata":{},"sourceType":"module"}