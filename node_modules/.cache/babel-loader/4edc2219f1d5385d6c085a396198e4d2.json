{"ast":null,"code":"import { __values } from \"tslib\";\nimport { Subject } from '../Subject';\nimport { Subscription } from '../Subscription';\nimport { operate } from '../util/lift';\nimport { innerFrom } from '../observable/innerFrom';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nimport { noop } from '../util/noop';\nimport { arrRemove } from '../util/arrRemove';\nexport function windowToggle(openings, closingSelector) {\n  return operate(function (source, subscriber) {\n    var windows = [];\n    var handleError = function (err) {\n      while (0 < windows.length) {\n        windows.shift().error(err);\n      }\n      subscriber.error(err);\n    };\n    innerFrom(openings).subscribe(createOperatorSubscriber(subscriber, function (openValue) {\n      var window = new Subject();\n      windows.push(window);\n      var closingSubscription = new Subscription();\n      var closeWindow = function () {\n        arrRemove(windows, window);\n        window.complete();\n        closingSubscription.unsubscribe();\n      };\n      var closingNotifier;\n      try {\n        closingNotifier = innerFrom(closingSelector(openValue));\n      } catch (err) {\n        handleError(err);\n        return;\n      }\n      subscriber.next(window.asObservable());\n      closingSubscription.add(closingNotifier.subscribe(createOperatorSubscriber(subscriber, closeWindow, noop, handleError)));\n    }, noop));\n    source.subscribe(createOperatorSubscriber(subscriber, function (value) {\n      var e_1, _a;\n      var windowsCopy = windows.slice();\n      try {\n        for (var windowsCopy_1 = __values(windowsCopy), windowsCopy_1_1 = windowsCopy_1.next(); !windowsCopy_1_1.done; windowsCopy_1_1 = windowsCopy_1.next()) {\n          var window_1 = windowsCopy_1_1.value;\n          window_1.next(value);\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (windowsCopy_1_1 && !windowsCopy_1_1.done && (_a = windowsCopy_1.return)) _a.call(windowsCopy_1);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n    }, function () {\n      while (0 < windows.length) {\n        windows.shift().complete();\n      }\n      subscriber.complete();\n    }, handleError, function () {\n      while (0 < windows.length) {\n        windows.shift().unsubscribe();\n      }\n    }));\n  });\n}","map":{"version":3,"mappings":";AACA,SAASA,OAAO,QAAQ,YAAY;AACpC,SAASC,YAAY,QAAQ,iBAAiB;AAE9C,SAASC,OAAO,QAAQ,cAAc;AACtC,SAASC,SAAS,QAAQ,yBAAyB;AACnD,SAASC,wBAAwB,QAAQ,sBAAsB;AAC/D,SAASC,IAAI,QAAQ,cAAc;AACnC,SAASC,SAAS,QAAQ,mBAAmB;AAiD7C,OAAM,SAAUC,YAAY,CAC1BC,QAA4B,EAC5BC,eAAuD;EAEvD,OAAOP,OAAO,CAAC,UAACQ,MAAM,EAAEC,UAAU;IAChC,IAAMC,OAAO,GAAiB,EAAE;IAEhC,IAAMC,WAAW,GAAG,UAACC,GAAQ;MAC3B,OAAO,CAAC,GAAGF,OAAO,CAACG,MAAM,EAAE;QACzBH,OAAO,CAACI,KAAK,EAAG,CAACC,KAAK,CAACH,GAAG,CAAC;;MAE7BH,UAAU,CAACM,KAAK,CAACH,GAAG,CAAC;IACvB,CAAC;IAEDX,SAAS,CAACK,QAAQ,CAAC,CAACU,SAAS,CAC3Bd,wBAAwB,CACtBO,UAAU,EACV,UAACQ,SAAS;MACR,IAAMC,MAAM,GAAG,IAAIpB,OAAO,EAAK;MAC/BY,OAAO,CAACS,IAAI,CAACD,MAAM,CAAC;MACpB,IAAME,mBAAmB,GAAG,IAAIrB,YAAY,EAAE;MAC9C,IAAMsB,WAAW,GAAG;QAClBjB,SAAS,CAACM,OAAO,EAAEQ,MAAM,CAAC;QAC1BA,MAAM,CAACI,QAAQ,EAAE;QACjBF,mBAAmB,CAACG,WAAW,EAAE;MACnC,CAAC;MAED,IAAIC,eAAgC;MACpC,IAAI;QACFA,eAAe,GAAGvB,SAAS,CAACM,eAAe,CAACU,SAAS,CAAC,CAAC;OACxD,CAAC,OAAOL,GAAG,EAAE;QACZD,WAAW,CAACC,GAAG,CAAC;QAChB;;MAGFH,UAAU,CAACgB,IAAI,CAACP,MAAM,CAACQ,YAAY,EAAE,CAAC;MAEtCN,mBAAmB,CAACO,GAAG,CAACH,eAAe,CAACR,SAAS,CAACd,wBAAwB,CAACO,UAAU,EAAEY,WAAW,EAAElB,IAAI,EAAEQ,WAAW,CAAC,CAAC,CAAC;IAC1H,CAAC,EACDR,IAAI,CACL,CACF;IAGDK,MAAM,CAACQ,SAAS,CACdd,wBAAwB,CACtBO,UAAU,EACV,UAACmB,KAAQ;;MAGP,IAAMC,WAAW,GAAGnB,OAAO,CAACoB,KAAK,EAAE;;QACnC,KAAqB,wCAAW,0GAAE;UAA7B,IAAMC,QAAM;UACfA,QAAM,CAACN,IAAI,CAACG,KAAK,CAAC;;;;;;;;;;;;;IAEtB,CAAC,EACD;MAEE,OAAO,CAAC,GAAGlB,OAAO,CAACG,MAAM,EAAE;QACzBH,OAAO,CAACI,KAAK,EAAG,CAACQ,QAAQ,EAAE;;MAE7Bb,UAAU,CAACa,QAAQ,EAAE;IACvB,CAAC,EACDX,WAAW,EACX;MAME,OAAO,CAAC,GAAGD,OAAO,CAACG,MAAM,EAAE;QACzBH,OAAO,CAACI,KAAK,EAAG,CAACS,WAAW,EAAE;;IAElC,CAAC,CACF,CACF;EACH,CAAC,CAAC;AACJ","names":["Subject","Subscription","operate","innerFrom","createOperatorSubscriber","noop","arrRemove","windowToggle","openings","closingSelector","source","subscriber","windows","handleError","err","length","shift","error","subscribe","openValue","window","push","closingSubscription","closeWindow","complete","unsubscribe","closingNotifier","next","asObservable","add","value","windowsCopy","slice","window_1"],"sources":["../../../../src/internal/operators/windowToggle.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}