{"ast":null,"code":"import { Notification } from '../Notification';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function materialize() {\n  return operate(function (source, subscriber) {\n    source.subscribe(createOperatorSubscriber(subscriber, function (value) {\n      subscriber.next(Notification.createNext(value));\n    }, function () {\n      subscriber.next(Notification.createComplete());\n      subscriber.complete();\n    }, function (err) {\n      subscriber.next(Notification.createError(err));\n      subscriber.complete();\n    }));\n  });\n}","map":{"version":3,"mappings":"AAAA,SAASA,YAAY,QAAQ,iBAAiB;AAE9C,SAASC,OAAO,QAAQ,cAAc;AACtC,SAASC,wBAAwB,QAAQ,sBAAsB;AAkD/D,OAAM,SAAUC,WAAW;EACzB,OAAOF,OAAO,CAAC,UAACG,MAAM,EAAEC,UAAU;IAChCD,MAAM,CAACE,SAAS,CACdJ,wBAAwB,CACtBG,UAAU,EACV,UAACE,KAAK;MACJF,UAAU,CAACG,IAAI,CAACR,YAAY,CAACS,UAAU,CAACF,KAAK,CAAC,CAAC;IACjD,CAAC,EACD;MACEF,UAAU,CAACG,IAAI,CAACR,YAAY,CAACU,cAAc,EAAE,CAAC;MAC9CL,UAAU,CAACM,QAAQ,EAAE;IACvB,CAAC,EACD,UAACC,GAAG;MACFP,UAAU,CAACG,IAAI,CAACR,YAAY,CAACa,WAAW,CAACD,GAAG,CAAC,CAAC;MAC9CP,UAAU,CAACM,QAAQ,EAAE;IACvB,CAAC,CACF,CACF;EACH,CAAC,CAAC;AACJ","names":["Notification","operate","createOperatorSubscriber","materialize","source","subscriber","subscribe","value","next","createNext","createComplete","complete","err","createError"],"sources":["C:\\Users\\Amali\\Desktop\\Building_the_IoT_w._P2P_and_Cloud_Computing\\IoTProject\\node_modules\\rxjs\\src\\internal\\operators\\materialize.ts"],"sourcesContent":["import { Notification } from '../Notification';\r\nimport { OperatorFunction, ObservableNotification } from '../types';\r\nimport { operate } from '../util/lift';\r\nimport { createOperatorSubscriber } from './OperatorSubscriber';\r\n\r\n/**\r\n * Represents all of the notifications from the source Observable as `next`\r\n * emissions marked with their original types within {@link Notification}\r\n * objects.\r\n *\r\n * <span class=\"informal\">Wraps `next`, `error` and `complete` emissions in\r\n * {@link Notification} objects, emitted as `next` on the output Observable.\r\n * </span>\r\n *\r\n * ![](materialize.png)\r\n *\r\n * `materialize` returns an Observable that emits a `next` notification for each\r\n * `next`, `error`, or `complete` emission of the source Observable. When the\r\n * source Observable emits `complete`, the output Observable will emit `next` as\r\n * a Notification of type \"complete\", and then it will emit `complete` as well.\r\n * When the source Observable emits `error`, the output will emit `next` as a\r\n * Notification of type \"error\", and then `complete`.\r\n *\r\n * This operator is useful for producing metadata of the source Observable, to\r\n * be consumed as `next` emissions. Use it in conjunction with\r\n * {@link dematerialize}.\r\n *\r\n * ## Example\r\n *\r\n * Convert a faulty Observable to an Observable of Notifications\r\n *\r\n * ```ts\r\n * import { of, materialize, map } from 'rxjs';\r\n *\r\n * const letters = of('a', 'b', 13, 'd');\r\n * const upperCase = letters.pipe(map((x: any) => x.toUpperCase()));\r\n * const materialized = upperCase.pipe(materialize());\r\n *\r\n * materialized.subscribe(x => console.log(x));\r\n *\r\n * // Results in the following:\r\n * // - Notification { kind: 'N', value: 'A', error: undefined, hasValue: true }\r\n * // - Notification { kind: 'N', value: 'B', error: undefined, hasValue: true }\r\n * // - Notification { kind: 'E', value: undefined, error: TypeError { message: x.toUpperCase is not a function }, hasValue: false }\r\n * ```\r\n *\r\n * @see {@link Notification}\r\n * @see {@link dematerialize}\r\n *\r\n * @return A function that returns an Observable that emits\r\n * {@link Notification} objects that wrap the original emissions from the\r\n * source Observable with metadata.\r\n */\r\nexport function materialize<T>(): OperatorFunction<T, Notification<T> & ObservableNotification<T>> {\r\n  return operate((source, subscriber) => {\r\n    source.subscribe(\r\n      createOperatorSubscriber(\r\n        subscriber,\r\n        (value) => {\r\n          subscriber.next(Notification.createNext(value));\r\n        },\r\n        () => {\r\n          subscriber.next(Notification.createComplete());\r\n          subscriber.complete();\r\n        },\r\n        (err) => {\r\n          subscriber.next(Notification.createError(err));\r\n          subscriber.complete();\r\n        }\r\n      )\r\n    );\r\n  });\r\n}\r\n"]},"metadata":{},"sourceType":"module"}