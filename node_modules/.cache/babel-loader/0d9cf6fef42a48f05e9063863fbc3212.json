{"ast":null,"code":"import { Observable } from '../Observable';\nimport { isFunction } from '../util/isFunction';\nimport { mapOneOrManyArgs } from '../util/mapOneOrManyArgs';\nexport function fromEventPattern(addHandler, removeHandler, resultSelector) {\n  if (resultSelector) {\n    return fromEventPattern(addHandler, removeHandler).pipe(mapOneOrManyArgs(resultSelector));\n  }\n  return new Observable(function (subscriber) {\n    var handler = function handler() {\n      var e = [];\n      for (var _i = 0; _i < arguments.length; _i++) {\n        e[_i] = arguments[_i];\n      }\n      return subscriber.next(e.length === 1 ? e[0] : e);\n    };\n    var retValue = addHandler(handler);\n    return isFunction(removeHandler) ? function () {\n      return removeHandler(handler, retValue);\n    } : undefined;\n  });\n}","map":{"version":3,"mappings":"AAAA,SAASA,UAAU,QAAQ,eAAe;AAC1C,SAASC,UAAU,QAAQ,oBAAoB;AAE/C,SAASC,gBAAgB,QAAQ,0BAA0B;AAyI3D,OAAM,SAAUC,gBAAgB,CAC9BC,UAA8C,EAC9CC,aAAiE,EACjEC,cAAsC;EAEtC,IAAIA,cAAc,EAAE;IAClB,OAAOH,gBAAgB,CAAIC,UAAU,EAAEC,aAAa,CAAC,CAACE,IAAI,CAACL,gBAAgB,CAACI,cAAc,CAAC,CAAC;;EAG9F,OAAO,IAAIN,UAAU,CAAU,UAACQ,UAAU;IACxC,IAAMC,OAAO,GAAG,SAAVA,OAAO,GAAG;MAAC;WAAA,UAAS,EAATC,qBAAS,EAATA,IAAS;QAATC;;MAAc,iBAAU,CAACC,IAAI,CAACD,CAAC,CAACE,MAAM,KAAK,CAAC,GAAGF,CAAC,CAAC,CAAC,CAAC,GAAGA,CAAC,CAAC;IAA1C,CAA0C;IACzE,IAAMG,QAAQ,GAAGV,UAAU,CAACK,OAAO,CAAC;IACpC,OAAOR,UAAU,CAACI,aAAa,CAAC,GAAG;MAAM,oBAAa,CAACI,OAAO,EAAEK,QAAQ,CAAC;IAAhC,CAAgC,GAAGC,SAAS;EACvF,CAAC,CAAC;AACJ","names":["Observable","isFunction","mapOneOrManyArgs","fromEventPattern","addHandler","removeHandler","resultSelector","pipe","subscriber","handler","_i","e","next","length","retValue","undefined"],"sources":["C:\\Users\\Amali\\Desktop\\Building_the_IoT_w._P2P_and_Cloud_Computing\\IoTProject\\node_modules\\rxjs\\src\\internal\\observable\\fromEventPattern.ts"],"sourcesContent":["import { Observable } from '../Observable';\r\nimport { isFunction } from '../util/isFunction';\r\nimport { NodeEventHandler } from './fromEvent';\r\nimport { mapOneOrManyArgs } from '../util/mapOneOrManyArgs';\r\n\r\n/* tslint:disable:max-line-length */\r\nexport function fromEventPattern<T>(\r\n  addHandler: (handler: NodeEventHandler) => any,\r\n  removeHandler?: (handler: NodeEventHandler, signal?: any) => void\r\n): Observable<T>;\r\nexport function fromEventPattern<T>(\r\n  addHandler: (handler: NodeEventHandler) => any,\r\n  removeHandler?: (handler: NodeEventHandler, signal?: any) => void,\r\n  resultSelector?: (...args: any[]) => T\r\n): Observable<T>;\r\n/* tslint:enable:max-line-length */\r\n\r\n/**\r\n * Creates an Observable from an arbitrary API for registering event handlers.\r\n *\r\n * <span class=\"informal\">When that method for adding event handler was something {@link fromEvent}\r\n * was not prepared for.</span>\r\n *\r\n * ![](fromEventPattern.png)\r\n *\r\n * `fromEventPattern` allows you to convert into an Observable any API that supports registering handler functions\r\n * for events. It is similar to {@link fromEvent}, but far\r\n * more flexible. In fact, all use cases of {@link fromEvent} could be easily handled by\r\n * `fromEventPattern` (although in slightly more verbose way).\r\n *\r\n * This operator accepts as a first argument an `addHandler` function, which will be injected with\r\n * handler parameter. That handler is actually an event handler function that you now can pass\r\n * to API expecting it. `addHandler` will be called whenever Observable\r\n * returned by the operator is subscribed, so registering handler in API will not\r\n * necessarily happen when `fromEventPattern` is called.\r\n *\r\n * After registration, every time an event that we listen to happens,\r\n * Observable returned by `fromEventPattern` will emit value that event handler\r\n * function was called with. Note that if event handler was called with more\r\n * than one argument, second and following arguments will not appear in the Observable.\r\n *\r\n * If API you are using allows to unregister event handlers as well, you can pass to `fromEventPattern`\r\n * another function - `removeHandler` - as a second parameter. It will be injected\r\n * with the same handler function as before, which now you can use to unregister\r\n * it from the API. `removeHandler` will be called when consumer of resulting Observable\r\n * unsubscribes from it.\r\n *\r\n * In some APIs unregistering is actually handled differently. Method registering an event handler\r\n * returns some kind of token, which is later used to identify which function should\r\n * be unregistered or it itself has method that unregisters event handler.\r\n * If that is the case with your API, make sure token returned\r\n * by registering method is returned by `addHandler`. Then it will be passed\r\n * as a second argument to `removeHandler`, where you will be able to use it.\r\n *\r\n * If you need access to all event handler parameters (not only the first one),\r\n * or you need to transform them in any way, you can call `fromEventPattern` with optional\r\n * third parameter - project function which will accept all arguments passed to\r\n * event handler when it is called. Whatever is returned from project function will appear on\r\n * resulting stream instead of usual event handlers first argument. This means\r\n * that default project can be thought of as function that takes its first parameter\r\n * and ignores the rest.\r\n *\r\n * ## Examples\r\n *\r\n * Emits clicks happening on the DOM document\r\n *\r\n * ```ts\r\n * import { fromEventPattern } from 'rxjs';\r\n *\r\n * function addClickHandler(handler) {\r\n *   document.addEventListener('click', handler);\r\n * }\r\n *\r\n * function removeClickHandler(handler) {\r\n *   document.removeEventListener('click', handler);\r\n * }\r\n *\r\n * const clicks = fromEventPattern(\r\n *   addClickHandler,\r\n *   removeClickHandler\r\n * );\r\n * clicks.subscribe(x => console.log(x));\r\n *\r\n * // Whenever you click anywhere in the browser, DOM MouseEvent\r\n * // object will be logged.\r\n * ```\r\n *\r\n * Use with API that returns cancellation token\r\n *\r\n * ```ts\r\n * import { fromEventPattern } from 'rxjs';\r\n *\r\n * const token = someAPI.registerEventHandler(function() {});\r\n * someAPI.unregisterEventHandler(token); // this APIs cancellation method accepts\r\n *                                        // not handler itself, but special token.\r\n *\r\n * const someAPIObservable = fromEventPattern(\r\n *   function(handler) { return someAPI.registerEventHandler(handler); }, // Note that we return the token here...\r\n *   function(handler, token) { someAPI.unregisterEventHandler(token); }  // ...to then use it here.\r\n * );\r\n * ```\r\n *\r\n * Use with project function\r\n *\r\n * ```ts\r\n * import { fromEventPattern } from 'rxjs';\r\n *\r\n * someAPI.registerEventHandler((eventType, eventMessage) => {\r\n *   console.log(eventType, eventMessage); // Logs 'EVENT_TYPE' 'EVENT_MESSAGE' to console.\r\n * });\r\n *\r\n * const someAPIObservable = fromEventPattern(\r\n *   handler => someAPI.registerEventHandler(handler),\r\n *   handler => someAPI.unregisterEventHandler(handler)\r\n *   (eventType, eventMessage) => eventType + ' --- ' + eventMessage // without that function only 'EVENT_TYPE'\r\n * );                                                                // would be emitted by the Observable\r\n *\r\n * someAPIObservable.subscribe(value => console.log(value));\r\n *\r\n * // Logs:\r\n * // 'EVENT_TYPE --- EVENT_MESSAGE'\r\n * ```\r\n *\r\n * @see {@link fromEvent}\r\n * @see {@link bindCallback}\r\n * @see {@link bindNodeCallback}\r\n *\r\n * @param {function(handler: Function): any} addHandler A function that takes\r\n * a `handler` function as argument and attaches it somehow to the actual\r\n * source of events.\r\n * @param {function(handler: Function, token?: any): void} [removeHandler] A function that\r\n * takes a `handler` function as an argument and removes it from the event source. If `addHandler`\r\n * returns some kind of token, `removeHandler` function will have it as a second parameter.\r\n * @param {function(...args: any): T} [project] A function to\r\n * transform results. It takes the arguments from the event handler and\r\n * should return a single value.\r\n * @return {Observable<T>} Observable which, when an event happens, emits first parameter\r\n * passed to registered event handler. Alternatively it emits whatever project function returns\r\n * at that moment.\r\n */\r\nexport function fromEventPattern<T>(\r\n  addHandler: (handler: NodeEventHandler) => any,\r\n  removeHandler?: (handler: NodeEventHandler, signal?: any) => void,\r\n  resultSelector?: (...args: any[]) => T\r\n): Observable<T | T[]> {\r\n  if (resultSelector) {\r\n    return fromEventPattern<T>(addHandler, removeHandler).pipe(mapOneOrManyArgs(resultSelector));\r\n  }\r\n\r\n  return new Observable<T | T[]>((subscriber) => {\r\n    const handler = (...e: T[]) => subscriber.next(e.length === 1 ? e[0] : e);\r\n    const retValue = addHandler(handler);\r\n    return isFunction(removeHandler) ? () => removeHandler(handler, retValue) : undefined;\r\n  });\r\n}\r\n"]},"metadata":{},"sourceType":"module"}