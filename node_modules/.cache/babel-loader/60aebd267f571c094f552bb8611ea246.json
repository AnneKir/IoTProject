{"ast":null,"code":"import { operate } from '../util/lift';\nimport { noop } from '../util/noop';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function sample(notifier) {\n  return operate(function (source, subscriber) {\n    var hasValue = false;\n    var lastValue = null;\n    source.subscribe(createOperatorSubscriber(subscriber, function (value) {\n      hasValue = true;\n      lastValue = value;\n    }));\n    notifier.subscribe(createOperatorSubscriber(subscriber, function () {\n      if (hasValue) {\n        hasValue = false;\n        var value = lastValue;\n        lastValue = null;\n        subscriber.next(value);\n      }\n    }, noop));\n  });\n}","map":{"version":3,"mappings":"AAEA,SAASA,OAAO,QAAQ,cAAc;AACtC,SAASC,IAAI,QAAQ,cAAc;AACnC,SAASC,wBAAwB,QAAQ,sBAAsB;AA0C/D,OAAM,SAAUC,MAAM,CAAIC,QAAyB;EACjD,OAAOJ,OAAO,CAAC,UAACK,MAAM,EAAEC,UAAU;IAChC,IAAIC,QAAQ,GAAG,KAAK;IACpB,IAAIC,SAAS,GAAa,IAAI;IAC9BH,MAAM,CAACI,SAAS,CACdP,wBAAwB,CAACI,UAAU,EAAE,UAACI,KAAK;MACzCH,QAAQ,GAAG,IAAI;MACfC,SAAS,GAAGE,KAAK;IACnB,CAAC,CAAC,CACH;IACDN,QAAQ,CAACK,SAAS,CAChBP,wBAAwB,CACtBI,UAAU,EACV;MACE,IAAIC,QAAQ,EAAE;QACZA,QAAQ,GAAG,KAAK;QAChB,IAAMG,KAAK,GAAGF,SAAU;QACxBA,SAAS,GAAG,IAAI;QAChBF,UAAU,CAACK,IAAI,CAACD,KAAK,CAAC;;IAE1B,CAAC,EACDT,IAAI,CACL,CACF;EACH,CAAC,CAAC;AACJ","names":["operate","noop","createOperatorSubscriber","sample","notifier","source","subscriber","hasValue","lastValue","subscribe","value","next"],"sources":["C:\\Users\\Amali\\Desktop\\Building_the_IoT_w._P2P_and_Cloud_Computing\\IoTProject\\node_modules\\rxjs\\src\\internal\\operators\\sample.ts"],"sourcesContent":["import { Observable } from '../Observable';\r\nimport { MonoTypeOperatorFunction } from '../types';\r\nimport { operate } from '../util/lift';\r\nimport { noop } from '../util/noop';\r\nimport { createOperatorSubscriber } from './OperatorSubscriber';\r\n\r\n/**\r\n * Emits the most recently emitted value from the source Observable whenever\r\n * another Observable, the `notifier`, emits.\r\n *\r\n * <span class=\"informal\">It's like {@link sampleTime}, but samples whenever\r\n * the `notifier` Observable emits something.</span>\r\n *\r\n * ![](sample.png)\r\n *\r\n * Whenever the `notifier` Observable emits a value, `sample`\r\n * looks at the source Observable and emits whichever value it has most recently\r\n * emitted since the previous sampling, unless the source has not emitted\r\n * anything since the previous sampling. The `notifier` is subscribed to as soon\r\n * as the output Observable is subscribed.\r\n *\r\n * ## Example\r\n *\r\n * On every click, sample the most recent `seconds` timer\r\n *\r\n * ```ts\r\n * import { fromEvent, interval, sample } from 'rxjs';\r\n *\r\n * const seconds = interval(1000);\r\n * const clicks = fromEvent(document, 'click');\r\n * const result = seconds.pipe(sample(clicks));\r\n *\r\n * result.subscribe(x => console.log(x));\r\n * ```\r\n *\r\n * @see {@link audit}\r\n * @see {@link debounce}\r\n * @see {@link sampleTime}\r\n * @see {@link throttle}\r\n *\r\n * @param notifier The Observable to use for sampling the\r\n * source Observable.\r\n * @return A function that returns an Observable that emits the results of\r\n * sampling the values emitted by the source Observable whenever the notifier\r\n * Observable emits value or completes.\r\n */\r\nexport function sample<T>(notifier: Observable<any>): MonoTypeOperatorFunction<T> {\r\n  return operate((source, subscriber) => {\r\n    let hasValue = false;\r\n    let lastValue: T | null = null;\r\n    source.subscribe(\r\n      createOperatorSubscriber(subscriber, (value) => {\r\n        hasValue = true;\r\n        lastValue = value;\r\n      })\r\n    );\r\n    notifier.subscribe(\r\n      createOperatorSubscriber(\r\n        subscriber,\r\n        () => {\r\n          if (hasValue) {\r\n            hasValue = false;\r\n            const value = lastValue!;\r\n            lastValue = null;\r\n            subscriber.next(value);\r\n          }\r\n        },\r\n        noop\r\n      )\r\n    );\r\n  });\r\n}\r\n"]},"metadata":{},"sourceType":"module"}