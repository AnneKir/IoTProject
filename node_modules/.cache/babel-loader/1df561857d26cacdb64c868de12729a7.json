{"ast":null,"code":"import { __read, __spreadArray } from \"tslib\";\nimport { concat } from '../observable/concat';\nimport { of } from '../observable/of';\nexport function endWith() {\n  var values = [];\n  for (var _i = 0; _i < arguments.length; _i++) {\n    values[_i] = arguments[_i];\n  }\n  return function (source) {\n    return concat(source, of.apply(void 0, __spreadArray([], __read(values))));\n  };\n}","map":{"version":3,"mappings":";AAEA,SAASA,MAAM,QAAQ,sBAAsB;AAC7C,SAASC,EAAE,QAAQ,kBAAkB;AA8DrC,OAAM,SAAUC,OAAO;EAAI;OAAA,UAAmC,EAAnCC,qBAAmC,EAAnCA,IAAmC;IAAnCC;;EACzB,OAAO,UAACC,MAAqB;IAAK,aAAM,CAACA,MAAM,EAAEJ,EAAE,wCAAIG,MAAM,IAAmB;EAA9C,CAA8C;AAClF","names":["concat","of","endWith","_i","values","source"],"sources":["C:\\Users\\Amali\\Desktop\\Building_the_IoT_w._P2P_and_Cloud_Computing\\IoTProject\\node_modules\\rxjs\\src\\internal\\operators\\endWith.ts"],"sourcesContent":["/** prettier */\r\nimport { Observable } from '../Observable';\r\nimport { concat } from '../observable/concat';\r\nimport { of } from '../observable/of';\r\nimport { MonoTypeOperatorFunction, SchedulerLike, OperatorFunction, ValueFromArray } from '../types';\r\n\r\n/** @deprecated The `scheduler` parameter will be removed in v8. Use `scheduled` and `concatAll`. Details: https://rxjs.dev/deprecations/scheduler-argument */\r\nexport function endWith<T>(scheduler: SchedulerLike): MonoTypeOperatorFunction<T>;\r\n/** @deprecated The `scheduler` parameter will be removed in v8. Use `scheduled` and `concatAll`. Details: https://rxjs.dev/deprecations/scheduler-argument */\r\nexport function endWith<T, A extends unknown[] = T[]>(\r\n  ...valuesAndScheduler: [...A, SchedulerLike]\r\n): OperatorFunction<T, T | ValueFromArray<A>>;\r\n\r\nexport function endWith<T, A extends unknown[] = T[]>(...values: A): OperatorFunction<T, T | ValueFromArray<A>>;\r\n\r\n/**\r\n * Returns an observable that will emit all values from the source, then synchronously emit\r\n * the provided value(s) immediately after the source completes.\r\n *\r\n * NOTE: Passing a last argument of a Scheduler is _deprecated_, and may result in incorrect\r\n * types in TypeScript.\r\n *\r\n * This is useful for knowing when an observable ends. Particularly when paired with an\r\n * operator like {@link takeUntil}\r\n *\r\n * ![](endWith.png)\r\n *\r\n * ## Example\r\n *\r\n * Emit values to know when an interval starts and stops. The interval will\r\n * stop when a user clicks anywhere on the document.\r\n *\r\n * ```ts\r\n * import { interval, map, fromEvent, startWith, takeUntil, endWith } from 'rxjs';\r\n *\r\n * const ticker$ = interval(5000).pipe(\r\n *   map(() => 'tick')\r\n * );\r\n *\r\n * const documentClicks$ = fromEvent(document, 'click');\r\n *\r\n * ticker$.pipe(\r\n *   startWith('interval started'),\r\n *   takeUntil(documentClicks$),\r\n *   endWith('interval ended by click')\r\n * )\r\n * .subscribe(x => console.log(x));\r\n *\r\n * // Result (assuming a user clicks after 15 seconds)\r\n * // 'interval started'\r\n * // 'tick'\r\n * // 'tick'\r\n * // 'tick'\r\n * // 'interval ended by click'\r\n * ```\r\n *\r\n * @see {@link startWith}\r\n * @see {@link concat}\r\n * @see {@link takeUntil}\r\n *\r\n * @param values Items you want the modified Observable to emit last.\r\n * @return A function that returns an Observable that emits all values from the\r\n * source, then synchronously emits the provided value(s) immediately after the\r\n * source completes.\r\n */\r\nexport function endWith<T>(...values: Array<T | SchedulerLike>): MonoTypeOperatorFunction<T> {\r\n  return (source: Observable<T>) => concat(source, of(...values)) as Observable<T>;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}