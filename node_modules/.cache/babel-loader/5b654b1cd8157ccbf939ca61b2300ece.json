{"ast":null,"code":"import { EmptyError } from '../util/EmptyError';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function throwIfEmpty(errorFactory) {\n  if (errorFactory === void 0) {\n    errorFactory = defaultErrorFactory;\n  }\n  return operate(function (source, subscriber) {\n    var hasValue = false;\n    source.subscribe(createOperatorSubscriber(subscriber, function (value) {\n      hasValue = true;\n      subscriber.next(value);\n    }, function () {\n      return hasValue ? subscriber.complete() : subscriber.error(errorFactory());\n    }));\n  });\n}\nfunction defaultErrorFactory() {\n  return new EmptyError();\n}","map":{"version":3,"mappings":"AAAA,SAASA,UAAU,QAAQ,oBAAoB;AAE/C,SAASC,OAAO,QAAQ,cAAc;AACtC,SAASC,wBAAwB,QAAQ,sBAAsB;AAsC/D,OAAM,SAAUC,YAAY,CAAIC,YAA6C;EAA7C;IAAAA,kCAA6C;EAAA;EAC3E,OAAOH,OAAO,CAAC,UAACI,MAAM,EAAEC,UAAU;IAChC,IAAIC,QAAQ,GAAG,KAAK;IACpBF,MAAM,CAACG,SAAS,CACdN,wBAAwB,CACtBI,UAAU,EACV,UAACG,KAAK;MACJF,QAAQ,GAAG,IAAI;MACfD,UAAU,CAACI,IAAI,CAACD,KAAK,CAAC;IACxB,CAAC,EACD;MAAM,OAACF,QAAQ,GAAGD,UAAU,CAACK,QAAQ,EAAE,GAAGL,UAAU,CAACM,KAAK,CAACR,YAAY,EAAE,CAAC;IAApE,CAAqE,CAC5E,CACF;EACH,CAAC,CAAC;AACJ;AAEA,SAASS,mBAAmB;EAC1B,OAAO,IAAIb,UAAU,EAAE;AACzB","names":["EmptyError","operate","createOperatorSubscriber","throwIfEmpty","errorFactory","source","subscriber","hasValue","subscribe","value","next","complete","error","defaultErrorFactory"],"sources":["C:\\Users\\Amali\\Desktop\\Building_the_IoT_w._P2P_and_Cloud_Computing\\IoTProject\\node_modules\\rxjs\\src\\internal\\operators\\throwIfEmpty.ts"],"sourcesContent":["import { EmptyError } from '../util/EmptyError';\r\nimport { MonoTypeOperatorFunction } from '../types';\r\nimport { operate } from '../util/lift';\r\nimport { createOperatorSubscriber } from './OperatorSubscriber';\r\n\r\n/**\r\n * If the source observable completes without emitting a value, it will emit\r\n * an error. The error will be created at that time by the optional\r\n * `errorFactory` argument, otherwise, the error will be {@link EmptyError}.\r\n *\r\n * ![](throwIfEmpty.png)\r\n *\r\n * ## Example\r\n *\r\n * Throw an error if the document wasn't clicked within 1 second\r\n *\r\n * ```ts\r\n * import { fromEvent, takeUntil, timer, throwIfEmpty } from 'rxjs';\r\n *\r\n * const click$ = fromEvent(document, 'click');\r\n *\r\n * click$.pipe(\r\n *   takeUntil(timer(1000)),\r\n *   throwIfEmpty(() => new Error('The document was not clicked within 1 second'))\r\n * )\r\n * .subscribe({\r\n *   next() {\r\n *    console.log('The document was clicked');\r\n *   },\r\n *   error(err) {\r\n *     console.error(err.message);\r\n *   }\r\n * });\r\n * ```\r\n *\r\n * @param errorFactory A factory function called to produce the\r\n * error to be thrown when the source observable completes without emitting a\r\n * value.\r\n * @return A function that returns an Observable that throws an error if the\r\n * source Observable completed without emitting.\r\n */\r\nexport function throwIfEmpty<T>(errorFactory: () => any = defaultErrorFactory): MonoTypeOperatorFunction<T> {\r\n  return operate((source, subscriber) => {\r\n    let hasValue = false;\r\n    source.subscribe(\r\n      createOperatorSubscriber(\r\n        subscriber,\r\n        (value) => {\r\n          hasValue = true;\r\n          subscriber.next(value);\r\n        },\r\n        () => (hasValue ? subscriber.complete() : subscriber.error(errorFactory()))\r\n      )\r\n    );\r\n  });\r\n}\r\n\r\nfunction defaultErrorFactory() {\r\n  return new EmptyError();\r\n}\r\n"]},"metadata":{},"sourceType":"module"}