{"ast":null,"code":"import { __read, __spreadArray } from \"tslib\";\nimport { isScheduler } from '../util/isScheduler';\nimport { Observable } from '../Observable';\nimport { subscribeOn } from '../operators/subscribeOn';\nimport { mapOneOrManyArgs } from '../util/mapOneOrManyArgs';\nimport { observeOn } from '../operators/observeOn';\nimport { AsyncSubject } from '../AsyncSubject';\nexport function bindCallbackInternals(isNodeStyle, callbackFunc, resultSelector, scheduler) {\n  if (resultSelector) {\n    if (isScheduler(resultSelector)) {\n      scheduler = resultSelector;\n    } else {\n      return function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n          args[_i] = arguments[_i];\n        }\n        return bindCallbackInternals(isNodeStyle, callbackFunc, scheduler).apply(this, args).pipe(mapOneOrManyArgs(resultSelector));\n      };\n    }\n  }\n  if (scheduler) {\n    return function () {\n      var args = [];\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n      return bindCallbackInternals(isNodeStyle, callbackFunc).apply(this, args).pipe(subscribeOn(scheduler), observeOn(scheduler));\n    };\n  }\n  return function () {\n    var _this = this;\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n    var subject = new AsyncSubject();\n    var uninitialized = true;\n    return new Observable(function (subscriber) {\n      var subs = subject.subscribe(subscriber);\n      if (uninitialized) {\n        uninitialized = false;\n        var isAsync_1 = false;\n        var isComplete_1 = false;\n        callbackFunc.apply(_this, __spreadArray(__spreadArray([], __read(args)), [function () {\n          var results = [];\n          for (var _i = 0; _i < arguments.length; _i++) {\n            results[_i] = arguments[_i];\n          }\n          if (isNodeStyle) {\n            var err = results.shift();\n            if (err != null) {\n              subject.error(err);\n              return;\n            }\n          }\n          subject.next(1 < results.length ? results : results[0]);\n          isComplete_1 = true;\n          if (isAsync_1) {\n            subject.complete();\n          }\n        }]));\n        if (isComplete_1) {\n          subject.complete();\n        }\n        isAsync_1 = true;\n      }\n      return subs;\n    });\n  };\n}","map":{"version":3,"mappings":";AACA,SAASA,WAAW,QAAQ,qBAAqB;AACjD,SAASC,UAAU,QAAQ,eAAe;AAC1C,SAASC,WAAW,QAAQ,0BAA0B;AACtD,SAASC,gBAAgB,QAAQ,0BAA0B;AAC3D,SAASC,SAAS,QAAQ,wBAAwB;AAClD,SAASC,YAAY,QAAQ,iBAAiB;AAE9C,OAAM,SAAUC,qBAAqB,CACnCC,WAAoB,EACpBC,YAAiB,EACjBC,cAAoB,EACpBC,SAAyB;EAEzB,IAAID,cAAc,EAAE;IAClB,IAAIT,WAAW,CAACS,cAAc,CAAC,EAAE;MAC/BC,SAAS,GAAGD,cAAc;KAC3B,MAAM;MAEL,OAAO;QAAqB;aAAA,UAAc,EAAdE,qBAAc,EAAdA,IAAc;UAAdC;;QAC1B,OAAQN,qBAAqB,CAACC,WAAW,EAAEC,YAAY,EAAEE,SAAS,CAAS,CACxEG,KAAK,CAAC,IAAI,EAAED,IAAI,CAAC,CACjBE,IAAI,CAACX,gBAAgB,CAACM,cAAqB,CAAC,CAAC;MAClD,CAAC;;;EAML,IAAIC,SAAS,EAAE;IACb,OAAO;MAAqB;WAAA,UAAc,EAAdC,qBAAc,EAAdA,IAAc;QAAdC;;MAC1B,OAAQN,qBAAqB,CAACC,WAAW,EAAEC,YAAY,CAAS,CAC7DK,KAAK,CAAC,IAAI,EAAED,IAAI,CAAC,CACjBE,IAAI,CAACZ,WAAW,CAACQ,SAAU,CAAC,EAAEN,SAAS,CAACM,SAAU,CAAC,CAAC;IACzD,CAAC;;EAGH,OAAO;IAAA;IAAqB;SAAA,UAAc,EAAdC,qBAAc,EAAdA,IAAc;MAAdC;;IAG1B,IAAMG,OAAO,GAAG,IAAIV,YAAY,EAAO;IAGvC,IAAIW,aAAa,GAAG,IAAI;IACxB,OAAO,IAAIf,UAAU,CAAC,UAACgB,UAAU;MAE/B,IAAMC,IAAI,GAAGH,OAAO,CAACI,SAAS,CAACF,UAAU,CAAC;MAE1C,IAAID,aAAa,EAAE;QACjBA,aAAa,GAAG,KAAK;QAMrB,IAAII,SAAO,GAAG,KAAK;QAGnB,IAAIC,YAAU,GAAG,KAAK;QAKtBb,YAAY,CAACK,KAAK,CAEhBS,KAAI,yCAGCV,IAAI,KAEP;UAAC;eAAA,UAAiB,EAAjBD,qBAAiB,EAAjBA,IAAiB;YAAjBY;;UACC,IAAIhB,WAAW,EAAE;YAIf,IAAMiB,GAAG,GAAGD,OAAO,CAACE,KAAK,EAAE;YAC3B,IAAID,GAAG,IAAI,IAAI,EAAE;cACfT,OAAO,CAACW,KAAK,CAACF,GAAG,CAAC;cAGlB;;;UAOJT,OAAO,CAACY,IAAI,CAAC,CAAC,GAAGJ,OAAO,CAACK,MAAM,GAAGL,OAAO,GAAGA,OAAO,CAAC,CAAC,CAAC,CAAC;UAGvDF,YAAU,GAAG,IAAI;UAMjB,IAAID,SAAO,EAAE;YACXL,OAAO,CAACc,QAAQ,EAAE;;QAEtB,CAAC,GAEJ;QAID,IAAIR,YAAU,EAAE;UACdN,OAAO,CAACc,QAAQ,EAAE;;QAKpBT,SAAO,GAAG,IAAI;;MAIhB,OAAOF,IAAI;IACb,CAAC,CAAC;EACJ,CAAC;AACH","names":["isScheduler","Observable","subscribeOn","mapOneOrManyArgs","observeOn","AsyncSubject","bindCallbackInternals","isNodeStyle","callbackFunc","resultSelector","scheduler","_i","args","apply","pipe","subject","uninitialized","subscriber","subs","subscribe","isAsync_1","isComplete_1","_this","results","err","shift","error","next","length","complete"],"sources":["C:\\Users\\Amali\\Desktop\\Building_the_IoT_w._P2P_and_Cloud_Computing\\IoTProject\\node_modules\\rxjs\\src\\internal\\observable\\bindCallbackInternals.ts"],"sourcesContent":["import { SchedulerLike } from '../types';\r\nimport { isScheduler } from '../util/isScheduler';\r\nimport { Observable } from '../Observable';\r\nimport { subscribeOn } from '../operators/subscribeOn';\r\nimport { mapOneOrManyArgs } from '../util/mapOneOrManyArgs';\r\nimport { observeOn } from '../operators/observeOn';\r\nimport { AsyncSubject } from '../AsyncSubject';\r\n\r\nexport function bindCallbackInternals(\r\n  isNodeStyle: boolean,\r\n  callbackFunc: any,\r\n  resultSelector?: any,\r\n  scheduler?: SchedulerLike\r\n): (...args: any[]) => Observable<unknown> {\r\n  if (resultSelector) {\r\n    if (isScheduler(resultSelector)) {\r\n      scheduler = resultSelector;\r\n    } else {\r\n      // The user provided a result selector.\r\n      return function (this: any, ...args: any[]) {\r\n        return (bindCallbackInternals(isNodeStyle, callbackFunc, scheduler) as any)\r\n          .apply(this, args)\r\n          .pipe(mapOneOrManyArgs(resultSelector as any));\r\n      };\r\n    }\r\n  }\r\n\r\n  // If a scheduler was passed, use our `subscribeOn` and `observeOn` operators\r\n  // to compose that behavior for the user.\r\n  if (scheduler) {\r\n    return function (this: any, ...args: any[]) {\r\n      return (bindCallbackInternals(isNodeStyle, callbackFunc) as any)\r\n        .apply(this, args)\r\n        .pipe(subscribeOn(scheduler!), observeOn(scheduler!));\r\n    };\r\n  }\r\n\r\n  return function (this: any, ...args: any[]): Observable<any> {\r\n    // We're using AsyncSubject, because it emits when it completes,\r\n    // and it will play the value to all late-arriving subscribers.\r\n    const subject = new AsyncSubject<any>();\r\n\r\n    // If this is true, then we haven't called our function yet.\r\n    let uninitialized = true;\r\n    return new Observable((subscriber) => {\r\n      // Add our subscriber to the subject.\r\n      const subs = subject.subscribe(subscriber);\r\n\r\n      if (uninitialized) {\r\n        uninitialized = false;\r\n        // We're going to execute the bound function\r\n        // This bit is to signal that we are hitting the callback asynchronously.\r\n        // Because we don't have any anti-\"Zalgo\" guarantees with whatever\r\n        // function we are handed, we use this bit to figure out whether or not\r\n        // we are getting hit in a callback synchronously during our call.\r\n        let isAsync = false;\r\n\r\n        // This is used to signal that the callback completed synchronously.\r\n        let isComplete = false;\r\n\r\n        // Call our function that has a callback. If at any time during this\r\n        // call, an error is thrown, it will be caught by the Observable\r\n        // subscription process and sent to the consumer.\r\n        callbackFunc.apply(\r\n          // Pass the appropriate `this` context.\r\n          this,\r\n          [\r\n            // Pass the arguments.\r\n            ...args,\r\n            // And our callback handler.\r\n            (...results: any[]) => {\r\n              if (isNodeStyle) {\r\n                // If this is a node callback, shift the first value off of the\r\n                // results and check it, as it is the error argument. By shifting,\r\n                // we leave only the argument(s) we want to pass to the consumer.\r\n                const err = results.shift();\r\n                if (err != null) {\r\n                  subject.error(err);\r\n                  // If we've errored, we can stop processing this function\r\n                  // as there's nothing else to do. Just return to escape.\r\n                  return;\r\n                }\r\n              }\r\n              // If we have one argument, notify the consumer\r\n              // of it as a single value, otherwise, if there's more than one, pass\r\n              // them as an array. Note that if there are no arguments, `undefined`\r\n              // will be emitted.\r\n              subject.next(1 < results.length ? results : results[0]);\r\n              // Flip this flag, so we know we can complete it in the synchronous\r\n              // case below.\r\n              isComplete = true;\r\n              // If we're not asynchronous, we need to defer the `complete` call\r\n              // until after the call to the function is over. This is because an\r\n              // error could be thrown in the function after it calls our callback,\r\n              // and if that is the case, if we complete here, we are unable to notify\r\n              // the consumer than an error occurred.\r\n              if (isAsync) {\r\n                subject.complete();\r\n              }\r\n            },\r\n          ]\r\n        );\r\n        // If we flipped `isComplete` during the call, we resolved synchronously,\r\n        // notify complete, because we skipped it in the callback to wait\r\n        // to make sure there were no errors during the call.\r\n        if (isComplete) {\r\n          subject.complete();\r\n        }\r\n\r\n        // We're no longer synchronous. If the callback is called at this point\r\n        // we can notify complete on the spot.\r\n        isAsync = true;\r\n      }\r\n\r\n      // Return the subscription from adding our subscriber to the subject.\r\n      return subs;\r\n    });\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}