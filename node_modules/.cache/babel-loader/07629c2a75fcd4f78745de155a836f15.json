{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Scheduler } from '../Scheduler';\nvar AsyncScheduler = function (_super) {\n  __extends(AsyncScheduler, _super);\n  function AsyncScheduler(SchedulerAction, now) {\n    if (now === void 0) {\n      now = Scheduler.now;\n    }\n    var _this = _super.call(this, SchedulerAction, now) || this;\n    _this.actions = [];\n    _this._active = false;\n    return _this;\n  }\n  AsyncScheduler.prototype.flush = function (action) {\n    var actions = this.actions;\n    if (this._active) {\n      actions.push(action);\n      return;\n    }\n    var error;\n    this._active = true;\n    do {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    } while (action = actions.shift());\n    this._active = false;\n    if (error) {\n      while (action = actions.shift()) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  };\n  return AsyncScheduler;\n}(Scheduler);\nexport { AsyncScheduler };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAAQ,cAAc;AAKxC;EAAoCC;EAkBlC,wBAAYC,eAA8B,EAAEC,GAAiC;IAAjC;MAAAA,MAAoBH,SAAS,CAACG,GAAG;IAAA;IAA7E,YACEC,kBAAMF,eAAe,EAAEC,GAAG,CAAC;IAlBtBE,aAAO,GAA4B,EAAE;IAOrCA,aAAO,GAAY,KAAK;;EAY/B;EAEOC,8BAAK,GAAZ,UAAaC,MAAwB;IAC3B,WAAO,GAAK,IAAI,QAAT;IAEf,IAAI,IAAI,CAACC,OAAO,EAAE;MAChBC,OAAO,CAACC,IAAI,CAACH,MAAM,CAAC;MACpB;;IAGF,IAAII,KAAU;IACd,IAAI,CAACH,OAAO,GAAG,IAAI;IAEnB,GAAG;MACD,IAAKG,KAAK,GAAGJ,MAAM,CAACK,OAAO,CAACL,MAAM,CAACM,KAAK,EAAEN,MAAM,CAACO,KAAK,CAAC,EAAG;QACxD;;KAEH,QAASP,MAAM,GAAGE,OAAO,CAACM,KAAK,EAAG;IAEnC,IAAI,CAACP,OAAO,GAAG,KAAK;IAEpB,IAAIG,KAAK,EAAE;MACT,OAAQJ,MAAM,GAAGE,OAAO,CAACM,KAAK,EAAG,EAAG;QAClCR,MAAM,CAACS,WAAW,EAAE;;MAEtB,MAAML,KAAK;;EAEf,CAAC;EACH,qBAAC;AAAD,CAAC,CAhDmCX,SAAS","names":["Scheduler","__extends","SchedulerAction","now","_super","_this","AsyncScheduler","action","_active","actions","push","error","execute","state","delay","shift","unsubscribe"],"sources":["C:\\Users\\Amali\\Desktop\\Building_the_IoT_w._P2P_and_Cloud_Computing\\IoTProject\\node_modules\\rxjs\\src\\internal\\scheduler\\AsyncScheduler.ts"],"sourcesContent":["import { Scheduler } from '../Scheduler';\nimport { Action } from './Action';\nimport { AsyncAction } from './AsyncAction';\nimport { TimerHandle } from './timerHandle';\n\nexport class AsyncScheduler extends Scheduler {\n  public actions: Array<AsyncAction<any>> = [];\n  /**\n   * A flag to indicate whether the Scheduler is currently executing a batch of\n   * queued actions.\n   * @type {boolean}\n   * @internal\n   */\n  public _active: boolean = false;\n  /**\n   * An internal ID used to track the latest asynchronous task such as those\n   * coming from `setTimeout`, `setInterval`, `requestAnimationFrame`, and\n   * others.\n   * @type {any}\n   * @internal\n   */\n  public _scheduled: TimerHandle | undefined;\n\n  constructor(SchedulerAction: typeof Action, now: () => number = Scheduler.now) {\n    super(SchedulerAction, now);\n  }\n\n  public flush(action: AsyncAction<any>): void {\n    const { actions } = this;\n\n    if (this._active) {\n      actions.push(action);\n      return;\n    }\n\n    let error: any;\n    this._active = true;\n\n    do {\n      if ((error = action.execute(action.state, action.delay))) {\n        break;\n      }\n    } while ((action = actions.shift()!)); // exhaust the scheduler queue\n\n    this._active = false;\n\n    if (error) {\n      while ((action = actions.shift()!)) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}