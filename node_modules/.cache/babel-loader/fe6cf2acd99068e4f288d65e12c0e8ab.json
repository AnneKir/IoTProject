{"ast":null,"code":"import { config } from '../config';\nimport { timeoutProvider } from '../scheduler/timeoutProvider';\nexport function reportUnhandledError(err) {\n  timeoutProvider.setTimeout(function () {\n    var onUnhandledError = config.onUnhandledError;\n    if (onUnhandledError) {\n      onUnhandledError(err);\n    } else {\n      throw err;\n    }\n  });\n}","map":{"version":3,"mappings":"AAAA,SAASA,MAAM,QAAQ,WAAW;AAClC,SAASC,eAAe,QAAQ,8BAA8B;AAW9D,OAAM,SAAUC,oBAAoB,CAACC,GAAQ;EAC3CF,eAAe,CAACG,UAAU,CAAC;IACjB,oBAAgB,GAAKJ,MAAM,iBAAX;IACxB,IAAIK,gBAAgB,EAAE;MAEpBA,gBAAgB,CAACF,GAAG,CAAC;KACtB,MAAM;MAEL,MAAMA,GAAG;;EAEb,CAAC,CAAC;AACJ","names":["config","timeoutProvider","reportUnhandledError","err","setTimeout","onUnhandledError"],"sources":["C:\\Users\\Amali\\Desktop\\Building_the_IoT_w._P2P_and_Cloud_Computing\\IoTProject\\node_modules\\rxjs\\src\\internal\\util\\reportUnhandledError.ts"],"sourcesContent":["import { config } from '../config';\r\nimport { timeoutProvider } from '../scheduler/timeoutProvider';\r\n\r\n/**\r\n * Handles an error on another job either with the user-configured {@link onUnhandledError},\r\n * or by throwing it on that new job so it can be picked up by `window.onerror`, `process.on('error')`, etc.\r\n *\r\n * This should be called whenever there is an error that is out-of-band with the subscription\r\n * or when an error hits a terminal boundary of the subscription and no error handler was provided.\r\n *\r\n * @param err the error to report\r\n */\r\nexport function reportUnhandledError(err: any) {\r\n  timeoutProvider.setTimeout(() => {\r\n    const { onUnhandledError } = config;\r\n    if (onUnhandledError) {\r\n      // Execute the user-configured error handler.\r\n      onUnhandledError(err);\r\n    } else {\r\n      // Throw so it is picked up by the runtime's uncaught error mechanism.\r\n      throw err;\r\n    }\r\n  });\r\n}\r\n"]},"metadata":{},"sourceType":"module"}