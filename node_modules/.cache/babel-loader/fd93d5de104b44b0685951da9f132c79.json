{"ast":null,"code":"import { __read, __spreadArray } from \"tslib\";\nimport { combineLatestInit } from '../observable/combineLatest';\nimport { operate } from '../util/lift';\nimport { argsOrArgArray } from '../util/argsOrArgArray';\nimport { mapOneOrManyArgs } from '../util/mapOneOrManyArgs';\nimport { pipe } from '../util/pipe';\nimport { popResultSelector } from '../util/args';\nexport function combineLatest() {\n  var args = [];\n  for (var _i = 0; _i < arguments.length; _i++) {\n    args[_i] = arguments[_i];\n  }\n  var resultSelector = popResultSelector(args);\n  return resultSelector ? pipe(combineLatest.apply(void 0, __spreadArray([], __read(args))), mapOneOrManyArgs(resultSelector)) : operate(function (source, subscriber) {\n    combineLatestInit(__spreadArray([source], __read(argsOrArgArray(args))))(subscriber);\n  });\n}","map":{"version":3,"mappings":";AAAA,SAASA,iBAAiB,QAAQ,6BAA6B;AAE/D,SAASC,OAAO,QAAQ,cAAc;AACtC,SAASC,cAAc,QAAQ,wBAAwB;AACvD,SAASC,gBAAgB,QAAQ,0BAA0B;AAC3D,SAASC,IAAI,QAAQ,cAAc;AACnC,SAASC,iBAAiB,QAAQ,cAAc;AAoBhD,OAAM,SAAUC,aAAa;EAAO;OAAA,UAA6D,EAA7DC,qBAA6D,EAA7DA,IAA6D;IAA7DC;;EAClC,IAAMC,cAAc,GAAGJ,iBAAiB,CAACG,IAAI,CAAC;EAC9C,OAAOC,cAAc,GACjBL,IAAI,CAACE,aAAa,wCAAKE,IAAoC,KAAGL,gBAAgB,CAACM,cAAc,CAAC,CAAC,GAC/FR,OAAO,CAAC,UAACS,MAAM,EAAEC,UAAU;IACzBX,iBAAiB,gBAAEU,MAAM,UAAKR,cAAc,CAACM,IAAI,CAAC,GAAE,CAACG,UAAU,CAAC;EAClE,CAAC,CAAC;AACR","names":["combineLatestInit","operate","argsOrArgArray","mapOneOrManyArgs","pipe","popResultSelector","combineLatest","_i","args","resultSelector","source","subscriber"],"sources":["C:\\Users\\Amali\\Desktop\\Building_the_IoT_w._P2P_and_Cloud_Computing\\IoTProject\\node_modules\\rxjs\\src\\internal\\operators\\combineLatest.ts"],"sourcesContent":["import { combineLatestInit } from '../observable/combineLatest';\r\nimport { ObservableInput, ObservableInputTuple, OperatorFunction } from '../types';\r\nimport { operate } from '../util/lift';\r\nimport { argsOrArgArray } from '../util/argsOrArgArray';\r\nimport { mapOneOrManyArgs } from '../util/mapOneOrManyArgs';\r\nimport { pipe } from '../util/pipe';\r\nimport { popResultSelector } from '../util/args';\r\n\r\n/** @deprecated Replaced with {@link combineLatestWith}. Will be removed in v8. */\r\nexport function combineLatest<T, A extends readonly unknown[], R>(\r\n  sources: [...ObservableInputTuple<A>],\r\n  project: (...values: [T, ...A]) => R\r\n): OperatorFunction<T, R>;\r\n/** @deprecated Replaced with {@link combineLatestWith}. Will be removed in v8. */\r\nexport function combineLatest<T, A extends readonly unknown[], R>(sources: [...ObservableInputTuple<A>]): OperatorFunction<T, [T, ...A]>;\r\n\r\n/** @deprecated Replaced with {@link combineLatestWith}. Will be removed in v8. */\r\nexport function combineLatest<T, A extends readonly unknown[], R>(\r\n  ...sourcesAndProject: [...ObservableInputTuple<A>, (...values: [T, ...A]) => R]\r\n): OperatorFunction<T, R>;\r\n/** @deprecated Replaced with {@link combineLatestWith}. Will be removed in v8. */\r\nexport function combineLatest<T, A extends readonly unknown[], R>(...sources: [...ObservableInputTuple<A>]): OperatorFunction<T, [T, ...A]>;\r\n\r\n/**\r\n * @deprecated Replaced with {@link combineLatestWith}. Will be removed in v8.\r\n */\r\nexport function combineLatest<T, R>(...args: (ObservableInput<any> | ((...values: any[]) => R))[]): OperatorFunction<T, unknown> {\r\n  const resultSelector = popResultSelector(args);\r\n  return resultSelector\r\n    ? pipe(combineLatest(...(args as Array<ObservableInput<any>>)), mapOneOrManyArgs(resultSelector))\r\n    : operate((source, subscriber) => {\r\n        combineLatestInit([source, ...argsOrArgArray(args)])(subscriber);\r\n      });\r\n}\r\n"]},"metadata":{},"sourceType":"module"}