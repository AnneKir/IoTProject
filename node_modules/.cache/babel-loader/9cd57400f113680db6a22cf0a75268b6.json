{"ast":null,"code":"import { concat } from '../observable/concat';\nimport { popScheduler } from '../util/args';\nimport { operate } from '../util/lift';\nexport function startWith() {\n  var values = [];\n  for (var _i = 0; _i < arguments.length; _i++) {\n    values[_i] = arguments[_i];\n  }\n  var scheduler = popScheduler(values);\n  return operate(function (source, subscriber) {\n    (scheduler ? concat(values, source, scheduler) : concat(values, source)).subscribe(subscriber);\n  });\n}","map":{"version":3,"mappings":"AAAA,SAASA,MAAM,QAAQ,sBAAsB;AAE7C,SAASC,YAAY,QAAQ,cAAc;AAC3C,SAASC,OAAO,QAAQ,cAAc;AAuDtC,OAAM,SAAUC,SAAS;EAAO;OAAA,UAAc,EAAdC,qBAAc,EAAdA,IAAc;IAAdC;;EAC9B,IAAMC,SAAS,GAAGL,YAAY,CAACI,MAAM,CAAC;EACtC,OAAOH,OAAO,CAAC,UAACK,MAAM,EAAEC,UAAU;IAIhC,CAACF,SAAS,GAAGN,MAAM,CAACK,MAAM,EAAEE,MAAM,EAAED,SAAS,CAAC,GAAGN,MAAM,CAACK,MAAM,EAAEE,MAAM,CAAC,EAAEE,SAAS,CAACD,UAAU,CAAC;EAChG,CAAC,CAAC;AACJ","names":["concat","popScheduler","operate","startWith","_i","values","scheduler","source","subscriber","subscribe"],"sources":["C:\\Users\\Amali\\Desktop\\Building_the_IoT_w._P2P_and_Cloud_Computing\\IoTProject\\node_modules\\rxjs\\src\\internal\\operators\\startWith.ts"],"sourcesContent":["import { concat } from '../observable/concat';\r\nimport { OperatorFunction, SchedulerLike, ValueFromArray } from '../types';\r\nimport { popScheduler } from '../util/args';\r\nimport { operate } from '../util/lift';\r\n\r\n// Devs are more likely to pass null or undefined than they are a scheduler\r\n// without accompanying values. To make things easier for (naughty) devs who\r\n// use the `strictNullChecks: false` TypeScript compiler option, these\r\n// overloads with explicit null and undefined values are included.\r\n\r\nexport function startWith<T>(value: null): OperatorFunction<T, T | null>;\r\nexport function startWith<T>(value: undefined): OperatorFunction<T, T | undefined>;\r\n\r\n/** @deprecated The `scheduler` parameter will be removed in v8. Use `scheduled` and `concatAll`. Details: https://rxjs.dev/deprecations/scheduler-argument */\r\nexport function startWith<T, A extends readonly unknown[] = T[]>(\r\n  ...valuesAndScheduler: [...A, SchedulerLike]\r\n): OperatorFunction<T, T | ValueFromArray<A>>;\r\nexport function startWith<T, A extends readonly unknown[] = T[]>(...values: A): OperatorFunction<T, T | ValueFromArray<A>>;\r\n\r\n/**\r\n * Returns an observable that, at the moment of subscription, will synchronously emit all\r\n * values provided to this operator, then subscribe to the source and mirror all of its emissions\r\n * to subscribers.\r\n *\r\n * This is a useful way to know when subscription has occurred on an existing observable.\r\n *\r\n * <span class=\"informal\">First emits its arguments in order, and then any\r\n * emissions from the source.</span>\r\n *\r\n * ![](startWith.png)\r\n *\r\n * ## Examples\r\n *\r\n * Emit a value when a timer starts.\r\n *\r\n * ```ts\r\n * import { timer, map, startWith } from 'rxjs';\r\n *\r\n * timer(1000)\r\n *   .pipe(\r\n *     map(() => 'timer emit'),\r\n *     startWith('timer start')\r\n *   )\r\n *   .subscribe(x => console.log(x));\r\n *\r\n * // results:\r\n * // 'timer start'\r\n * // 'timer emit'\r\n * ```\r\n *\r\n * @param values Items you want the modified Observable to emit first.\r\n * @return A function that returns an Observable that synchronously emits\r\n * provided values before subscribing to the source Observable.\r\n *\r\n * @see {@link endWith}\r\n * @see {@link finalize}\r\n * @see {@link concat}\r\n */\r\nexport function startWith<T, D>(...values: D[]): OperatorFunction<T, T | D> {\r\n  const scheduler = popScheduler(values);\r\n  return operate((source, subscriber) => {\r\n    // Here we can't pass `undefined` as a scheduler, because if we did, the\r\n    // code inside of `concat` would be confused by the `undefined`, and treat it\r\n    // like an invalid observable. So we have to split it two different ways.\r\n    (scheduler ? concat(values, source, scheduler) : concat(values, source)).subscribe(subscriber);\r\n  });\r\n}\r\n"]},"metadata":{},"sourceType":"module"}