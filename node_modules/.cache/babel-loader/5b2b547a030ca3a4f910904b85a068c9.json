{"ast":null,"code":"import { exhaustMap } from './exhaustMap';\nimport { identity } from '../util/identity';\nexport function exhaustAll() {\n  return exhaustMap(identity);\n}","map":{"version":3,"mappings":"AACA,SAASA,UAAU,QAAQ,cAAc;AACzC,SAASC,QAAQ,QAAQ,kBAAkB;AA8C3C,OAAM,SAAUC,UAAU;EACxB,OAAOF,UAAU,CAACC,QAAQ,CAAC;AAC7B","names":["exhaustMap","identity","exhaustAll"],"sources":["C:\\Users\\Amali\\Desktop\\Building_the_IoT_w._P2P_and_Cloud_Computing\\IoTProject\\node_modules\\rxjs\\src\\internal\\operators\\exhaustAll.ts"],"sourcesContent":["import { OperatorFunction, ObservableInput, ObservedValueOf } from '../types';\r\nimport { exhaustMap } from './exhaustMap';\r\nimport { identity } from '../util/identity';\r\n\r\n/**\r\n * Converts a higher-order Observable into a first-order Observable by dropping\r\n * inner Observables while the previous inner Observable has not yet completed.\r\n *\r\n * <span class=\"informal\">Flattens an Observable-of-Observables by dropping the\r\n * next inner Observables while the current inner is still executing.</span>\r\n *\r\n * ![](exhaust.png)\r\n *\r\n * `exhaustAll` subscribes to an Observable that emits Observables, also known as a\r\n * higher-order Observable. Each time it observes one of these emitted inner\r\n * Observables, the output Observable begins emitting the items emitted by that\r\n * inner Observable. So far, it behaves like {@link mergeAll}. However,\r\n * `exhaustAll` ignores every new inner Observable if the previous Observable has\r\n * not yet completed. Once that one completes, it will accept and flatten the\r\n * next inner Observable and repeat this process.\r\n *\r\n * ## Example\r\n *\r\n * Run a finite timer for each click, only if there is no currently active timer\r\n *\r\n * ```ts\r\n * import { fromEvent, map, interval, take, exhaustAll } from 'rxjs';\r\n *\r\n * const clicks = fromEvent(document, 'click');\r\n * const higherOrder = clicks.pipe(\r\n *   map(() => interval(1000).pipe(take(5)))\r\n * );\r\n * const result = higherOrder.pipe(exhaustAll());\r\n * result.subscribe(x => console.log(x));\r\n * ```\r\n *\r\n * @see {@link combineLatestAll}\r\n * @see {@link concatAll}\r\n * @see {@link switchAll}\r\n * @see {@link switchMap}\r\n * @see {@link mergeAll}\r\n * @see {@link exhaustMap}\r\n * @see {@link zipAll}\r\n *\r\n * @return A function that returns an Observable that takes a source of\r\n * Observables and propagates the first Observable exclusively until it\r\n * completes before subscribing to the next.\r\n */\r\nexport function exhaustAll<O extends ObservableInput<any>>(): OperatorFunction<O, ObservedValueOf<O>> {\r\n  return exhaustMap(identity);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}