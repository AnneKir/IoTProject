{"ast":null,"code":"import { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function defaultIfEmpty(defaultValue) {\n  return operate(function (source, subscriber) {\n    var hasValue = false;\n    source.subscribe(createOperatorSubscriber(subscriber, function (value) {\n      hasValue = true;\n      subscriber.next(value);\n    }, function () {\n      if (!hasValue) {\n        subscriber.next(defaultValue);\n      }\n      subscriber.complete();\n    }));\n  });\n}","map":{"version":3,"mappings":"AACA,SAASA,OAAO,QAAQ,cAAc;AACtC,SAASC,wBAAwB,QAAQ,sBAAsB;AAqC/D,OAAM,SAAUC,cAAc,CAAOC,YAAe;EAClD,OAAOH,OAAO,CAAC,UAACI,MAAM,EAAEC,UAAU;IAChC,IAAIC,QAAQ,GAAG,KAAK;IACpBF,MAAM,CAACG,SAAS,CACdN,wBAAwB,CACtBI,UAAU,EACV,UAACG,KAAK;MACJF,QAAQ,GAAG,IAAI;MACfD,UAAU,CAACI,IAAI,CAACD,KAAK,CAAC;IACxB,CAAC,EACD;MACE,IAAI,CAACF,QAAQ,EAAE;QACbD,UAAU,CAACI,IAAI,CAACN,YAAa,CAAC;;MAEhCE,UAAU,CAACK,QAAQ,EAAE;IACvB,CAAC,CACF,CACF;EACH,CAAC,CAAC;AACJ","names":["operate","createOperatorSubscriber","defaultIfEmpty","defaultValue","source","subscriber","hasValue","subscribe","value","next","complete"],"sources":["C:\\Users\\Amali\\Desktop\\Building_the_IoT_w._P2P_and_Cloud_Computing\\IoTProject\\node_modules\\rxjs\\src\\internal\\operators\\defaultIfEmpty.ts"],"sourcesContent":["import { OperatorFunction } from '../types';\r\nimport { operate } from '../util/lift';\r\nimport { createOperatorSubscriber } from './OperatorSubscriber';\r\n\r\n/**\r\n * Emits a given value if the source Observable completes without emitting any\r\n * `next` value, otherwise mirrors the source Observable.\r\n *\r\n * <span class=\"informal\">If the source Observable turns out to be empty, then\r\n * this operator will emit a default value.</span>\r\n *\r\n * ![](defaultIfEmpty.png)\r\n *\r\n * `defaultIfEmpty` emits the values emitted by the source Observable or a\r\n * specified default value if the source Observable is empty (completes without\r\n * having emitted any `next` value).\r\n *\r\n * ## Example\r\n *\r\n * If no clicks happen in 5 seconds, then emit 'no clicks'\r\n *\r\n * ```ts\r\n * import { fromEvent, takeUntil, interval, defaultIfEmpty } from 'rxjs';\r\n *\r\n * const clicks = fromEvent(document, 'click');\r\n * const clicksBeforeFive = clicks.pipe(takeUntil(interval(5000)));\r\n * const result = clicksBeforeFive.pipe(defaultIfEmpty('no clicks'));\r\n * result.subscribe(x => console.log(x));\r\n * ```\r\n *\r\n * @see {@link empty}\r\n * @see {@link last}\r\n *\r\n * @param defaultValue The default value used if the source\r\n * Observable is empty.\r\n * @return A function that returns an Observable that emits either the\r\n * specified `defaultValue` if the source Observable emits no items, or the\r\n * values emitted by the source Observable.\r\n */\r\nexport function defaultIfEmpty<T, R>(defaultValue: R): OperatorFunction<T, T | R> {\r\n  return operate((source, subscriber) => {\r\n    let hasValue = false;\r\n    source.subscribe(\r\n      createOperatorSubscriber(\r\n        subscriber,\r\n        (value) => {\r\n          hasValue = true;\r\n          subscriber.next(value);\r\n        },\r\n        () => {\r\n          if (!hasValue) {\r\n            subscriber.next(defaultValue!);\r\n          }\r\n          subscriber.complete();\r\n        }\r\n      )\r\n    );\r\n  });\r\n}\r\n"]},"metadata":{},"sourceType":"module"}