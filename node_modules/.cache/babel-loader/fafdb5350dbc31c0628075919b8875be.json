{"ast":null,"code":"import { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function filter(predicate, thisArg) {\n  return operate(function (source, subscriber) {\n    var index = 0;\n    source.subscribe(createOperatorSubscriber(subscriber, function (value) {\n      return predicate.call(thisArg, value, index++) && subscriber.next(value);\n    }));\n  });\n}","map":{"version":3,"mappings":"AACA,SAASA,OAAO,QAAQ,cAAc;AACtC,SAASC,wBAAwB,QAAQ,sBAAsB;AA0D/D,OAAM,SAAUC,MAAM,CAAIC,SAA+C,EAAEC,OAAa;EACtF,OAAOJ,OAAO,CAAC,UAACK,MAAM,EAAEC,UAAU;IAEhC,IAAIC,KAAK,GAAG,CAAC;IAIbF,MAAM,CAACG,SAAS,CAIdP,wBAAwB,CAACK,UAAU,EAAE,UAACG,KAAK;MAAK,gBAAS,CAACC,IAAI,CAACN,OAAO,EAAEK,KAAK,EAAEF,KAAK,EAAE,CAAC,IAAID,UAAU,CAACK,IAAI,CAACF,KAAK,CAAC;IAAjE,CAAiE,CAAC,CACnH;EACH,CAAC,CAAC;AACJ","names":["operate","createOperatorSubscriber","filter","predicate","thisArg","source","subscriber","index","subscribe","value","call","next"],"sources":["C:\\Users\\Amali\\Desktop\\Building_the_IoT_w._P2P_and_Cloud_Computing\\IoTProject\\node_modules\\rxjs\\src\\internal\\operators\\filter.ts"],"sourcesContent":["import { OperatorFunction, MonoTypeOperatorFunction, TruthyTypesOf } from '../types';\r\nimport { operate } from '../util/lift';\r\nimport { createOperatorSubscriber } from './OperatorSubscriber';\r\n\r\n/** @deprecated Use a closure instead of a `thisArg`. Signatures accepting a `thisArg` will be removed in v8. */\r\nexport function filter<T, S extends T, A>(predicate: (this: A, value: T, index: number) => value is S, thisArg: A): OperatorFunction<T, S>;\r\nexport function filter<T, S extends T>(predicate: (value: T, index: number) => value is S): OperatorFunction<T, S>;\r\nexport function filter<T>(predicate: BooleanConstructor): OperatorFunction<T, TruthyTypesOf<T>>;\r\n/** @deprecated Use a closure instead of a `thisArg`. Signatures accepting a `thisArg` will be removed in v8. */\r\nexport function filter<T, A>(predicate: (this: A, value: T, index: number) => boolean, thisArg: A): MonoTypeOperatorFunction<T>;\r\nexport function filter<T>(predicate: (value: T, index: number) => boolean): MonoTypeOperatorFunction<T>;\r\n\r\n/**\r\n * Filter items emitted by the source Observable by only emitting those that\r\n * satisfy a specified predicate.\r\n *\r\n * <span class=\"informal\">Like\r\n * [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),\r\n * it only emits a value from the source if it passes a criterion function.</span>\r\n *\r\n * ![](filter.png)\r\n *\r\n * Similar to the well-known `Array.prototype.filter` method, this operator\r\n * takes values from the source Observable, passes them through a `predicate`\r\n * function and only emits those values that yielded `true`.\r\n *\r\n * ## Example\r\n *\r\n * Emit only click events whose target was a DIV element\r\n *\r\n * ```ts\r\n * import { fromEvent, filter } from 'rxjs';\r\n *\r\n * const div = document.createElement('div');\r\n * div.style.cssText = 'width: 200px; height: 200px; background: #09c;';\r\n * document.body.appendChild(div);\r\n *\r\n * const clicks = fromEvent(document, 'click');\r\n * const clicksOnDivs = clicks.pipe(filter(ev => (<HTMLElement>ev.target).tagName === 'DIV'));\r\n * clicksOnDivs.subscribe(x => console.log(x));\r\n * ```\r\n *\r\n * @see {@link distinct}\r\n * @see {@link distinctUntilChanged}\r\n * @see {@link distinctUntilKeyChanged}\r\n * @see {@link ignoreElements}\r\n * @see {@link partition}\r\n * @see {@link skip}\r\n *\r\n * @param predicate A function that\r\n * evaluates each value emitted by the source Observable. If it returns `true`,\r\n * the value is emitted, if `false` the value is not passed to the output\r\n * Observable. The `index` parameter is the number `i` for the i-th source\r\n * emission that has happened since the subscription, starting from the number\r\n * `0`.\r\n * @param thisArg An optional argument to determine the value of `this`\r\n * in the `predicate` function.\r\n * @return A function that returns an Observable that emits items from the\r\n * source Observable that satisfy the specified `predicate`.\r\n */\r\nexport function filter<T>(predicate: (value: T, index: number) => boolean, thisArg?: any): MonoTypeOperatorFunction<T> {\r\n  return operate((source, subscriber) => {\r\n    // An index passed to our predicate function on each call.\r\n    let index = 0;\r\n\r\n    // Subscribe to the source, all errors and completions are\r\n    // forwarded to the consumer.\r\n    source.subscribe(\r\n      // Call the predicate with the appropriate `this` context,\r\n      // if the predicate returns `true`, then send the value\r\n      // to the consumer.\r\n      createOperatorSubscriber(subscriber, (value) => predicate.call(thisArg, value, index++) && subscriber.next(value))\r\n    );\r\n  });\r\n}\r\n"]},"metadata":{},"sourceType":"module"}