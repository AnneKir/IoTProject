{"ast":null,"code":"import { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nimport { innerFrom } from '../observable/innerFrom';\nexport var defaultThrottleConfig = {\n  leading: true,\n  trailing: false\n};\nexport function throttle(durationSelector, config) {\n  if (config === void 0) {\n    config = defaultThrottleConfig;\n  }\n  return operate(function (source, subscriber) {\n    var leading = config.leading,\n      trailing = config.trailing;\n    var hasValue = false;\n    var sendValue = null;\n    var throttled = null;\n    var isComplete = false;\n    var endThrottling = function () {\n      throttled === null || throttled === void 0 ? void 0 : throttled.unsubscribe();\n      throttled = null;\n      if (trailing) {\n        send();\n        isComplete && subscriber.complete();\n      }\n    };\n    var cleanupThrottling = function () {\n      throttled = null;\n      isComplete && subscriber.complete();\n    };\n    var startThrottle = function (value) {\n      return throttled = innerFrom(durationSelector(value)).subscribe(createOperatorSubscriber(subscriber, endThrottling, cleanupThrottling));\n    };\n    var send = function () {\n      if (hasValue) {\n        hasValue = false;\n        var value = sendValue;\n        sendValue = null;\n        subscriber.next(value);\n        !isComplete && startThrottle(value);\n      }\n    };\n    source.subscribe(createOperatorSubscriber(subscriber, function (value) {\n      hasValue = true;\n      sendValue = value;\n      !(throttled && !throttled.closed) && (leading ? send() : startThrottle(value));\n    }, function () {\n      isComplete = true;\n      !(trailing && hasValue && throttled && !throttled.closed) && subscriber.complete();\n    }));\n  });\n}","map":{"version":3,"mappings":"AAGA,SAASA,OAAO,QAAQ,cAAc;AACtC,SAASC,wBAAwB,QAAQ,sBAAsB;AAC/D,SAASC,SAAS,QAAQ,yBAAyB;AAOnD,OAAO,IAAMC,qBAAqB,GAAmB;EACnDC,OAAO,EAAE,IAAI;EACbC,QAAQ,EAAE;CACX;AAgDD,OAAM,SAAUC,QAAQ,CACtBC,gBAAoD,EACpDC,MAA8C;EAA9C;IAAAA,8BAA8C;EAAA;EAE9C,OAAOR,OAAO,CAAC,UAACS,MAAM,EAAEC,UAAU;IACxB,WAAO,GAAeF,MAAM,QAArB;MAAEH,QAAQ,GAAKG,MAAM,SAAX;IACzB,IAAIG,QAAQ,GAAG,KAAK;IACpB,IAAIC,SAAS,GAAa,IAAI;IAC9B,IAAIC,SAAS,GAAwB,IAAI;IACzC,IAAIC,UAAU,GAAG,KAAK;IAEtB,IAAMC,aAAa,GAAG;MACpBF,SAAS,aAATA,SAAS,uBAATA,SAAS,CAAEG,WAAW,EAAE;MACxBH,SAAS,GAAG,IAAI;MAChB,IAAIR,QAAQ,EAAE;QACZY,IAAI,EAAE;QACNH,UAAU,IAAIJ,UAAU,CAACQ,QAAQ,EAAE;;IAEvC,CAAC;IAED,IAAMC,iBAAiB,GAAG;MACxBN,SAAS,GAAG,IAAI;MAChBC,UAAU,IAAIJ,UAAU,CAACQ,QAAQ,EAAE;IACrC,CAAC;IAED,IAAME,aAAa,GAAG,UAACC,KAAQ;MAC7B,OAACR,SAAS,GAAGX,SAAS,CAACK,gBAAgB,CAACc,KAAK,CAAC,CAAC,CAACC,SAAS,CAACrB,wBAAwB,CAACS,UAAU,EAAEK,aAAa,EAAEI,iBAAiB,CAAC,CAAC;IAAjI,CAAkI;IAEpI,IAAMF,IAAI,GAAG;MACX,IAAIN,QAAQ,EAAE;QAIZA,QAAQ,GAAG,KAAK;QAChB,IAAMU,KAAK,GAAGT,SAAU;QACxBA,SAAS,GAAG,IAAI;QAEhBF,UAAU,CAACa,IAAI,CAACF,KAAK,CAAC;QACtB,CAACP,UAAU,IAAIM,aAAa,CAACC,KAAK,CAAC;;IAEvC,CAAC;IAEDZ,MAAM,CAACa,SAAS,CACdrB,wBAAwB,CACtBS,UAAU,EAMV,UAACW,KAAK;MACJV,QAAQ,GAAG,IAAI;MACfC,SAAS,GAAGS,KAAK;MACjB,EAAER,SAAS,IAAI,CAACA,SAAS,CAACW,MAAM,CAAC,KAAKpB,OAAO,GAAGa,IAAI,EAAE,GAAGG,aAAa,CAACC,KAAK,CAAC,CAAC;IAChF,CAAC,EACD;MACEP,UAAU,GAAG,IAAI;MACjB,EAAET,QAAQ,IAAIM,QAAQ,IAAIE,SAAS,IAAI,CAACA,SAAS,CAACW,MAAM,CAAC,IAAId,UAAU,CAACQ,QAAQ,EAAE;IACpF,CAAC,CACF,CACF;EACH,CAAC,CAAC;AACJ","names":["operate","createOperatorSubscriber","innerFrom","defaultThrottleConfig","leading","trailing","throttle","durationSelector","config","source","subscriber","hasValue","sendValue","throttled","isComplete","endThrottling","unsubscribe","send","complete","cleanupThrottling","startThrottle","value","subscribe","next","closed"],"sources":["C:\\Users\\Amali\\Desktop\\Building_the_IoT_w._P2P_and_Cloud_Computing\\IoTProject\\node_modules\\rxjs\\src\\internal\\operators\\throttle.ts"],"sourcesContent":["import { Subscription } from '../Subscription';\n\nimport { MonoTypeOperatorFunction, ObservableInput } from '../types';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nimport { innerFrom } from '../observable/innerFrom';\n\nexport interface ThrottleConfig {\n  leading?: boolean;\n  trailing?: boolean;\n}\n\nexport const defaultThrottleConfig: ThrottleConfig = {\n  leading: true,\n  trailing: false,\n};\n\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for a duration determined by another Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link throttleTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * ![](throttle.svg)\n *\n * `throttle` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled by calling the `durationSelector` function with the source value,\n * which returns the \"duration\" Observable. When the duration Observable emits a\n * value, the timer is disabled, and this process repeats for the\n * next source value.\n *\n * ## Example\n *\n * Emit clicks at a rate of at most one click per second\n *\n * ```ts\n * import { fromEvent, throttle, interval } from 'rxjs';\n *\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(throttle(() => interval(1000)));\n *\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration for each source value, returned as an Observable or a Promise.\n * @param config a configuration object to define `leading` and `trailing` behavior. Defaults\n * to `{ leading: true, trailing: false }`.\n * @return A function that returns an Observable that performs the throttle\n * operation to limit the rate of emissions from the source.\n */\nexport function throttle<T>(\n  durationSelector: (value: T) => ObservableInput<any>,\n  config: ThrottleConfig = defaultThrottleConfig\n): MonoTypeOperatorFunction<T> {\n  return operate((source, subscriber) => {\n    const { leading, trailing } = config;\n    let hasValue = false;\n    let sendValue: T | null = null;\n    let throttled: Subscription | null = null;\n    let isComplete = false;\n\n    const endThrottling = () => {\n      throttled?.unsubscribe();\n      throttled = null;\n      if (trailing) {\n        send();\n        isComplete && subscriber.complete();\n      }\n    };\n\n    const cleanupThrottling = () => {\n      throttled = null;\n      isComplete && subscriber.complete();\n    };\n\n    const startThrottle = (value: T) =>\n      (throttled = innerFrom(durationSelector(value)).subscribe(createOperatorSubscriber(subscriber, endThrottling, cleanupThrottling)));\n\n    const send = () => {\n      if (hasValue) {\n        // Ensure we clear out our value and hasValue flag\n        // before we emit, otherwise reentrant code can cause\n        // issues here.\n        hasValue = false;\n        const value = sendValue!;\n        sendValue = null;\n        // Emit the value.\n        subscriber.next(value);\n        !isComplete && startThrottle(value);\n      }\n    };\n\n    source.subscribe(\n      createOperatorSubscriber(\n        subscriber,\n        // Regarding the presence of throttled.closed in the following\n        // conditions, if a synchronous duration selector is specified - weird,\n        // but legal - an already-closed subscription will be assigned to\n        // throttled, so the subscription's closed property needs to be checked,\n        // too.\n        (value) => {\n          hasValue = true;\n          sendValue = value;\n          !(throttled && !throttled.closed) && (leading ? send() : startThrottle(value));\n        },\n        () => {\n          isComplete = true;\n          !(trailing && hasValue && throttled && !throttled.closed) && subscriber.complete();\n        }\n      )\n    );\n  });\n}\n"]},"metadata":{},"sourceType":"module"}