{"ast":null,"code":"import { Subject } from '../Subject';\nimport { multicast } from './multicast';\nimport { connect } from './connect';\nexport function publish(selector) {\n  return selector ? function (source) {\n    return connect(selector)(source);\n  } : function (source) {\n    return multicast(new Subject())(source);\n  };\n}","map":{"version":3,"mappings":"AACA,SAASA,OAAO,QAAQ,YAAY;AACpC,SAASC,SAAS,QAAQ,aAAa;AAGvC,SAASC,OAAO,QAAQ,WAAW;AAqFnC,OAAM,SAAUC,OAAO,CAAOC,QAAiC;EAC7D,OAAOA,QAAQ,GAAG,UAACC,MAAM;IAAK,cAAO,CAACD,QAAQ,CAAC,CAACC,MAAM,CAAC;EAAzB,CAAyB,GAAG,UAACA,MAAM;IAAK,gBAAS,CAAC,IAAIL,OAAO,EAAK,CAAC,CAACK,MAAM,CAAC;EAAnC,CAAmC;AAC3G","names":["Subject","multicast","connect","publish","selector","source"],"sources":["C:\\Users\\Amali\\Desktop\\Building_the_IoT_w._P2P_and_Cloud_Computing\\IoTProject\\node_modules\\rxjs\\src\\internal\\operators\\publish.ts"],"sourcesContent":["import { Observable } from '../Observable';\r\nimport { Subject } from '../Subject';\r\nimport { multicast } from './multicast';\r\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\r\nimport { MonoTypeOperatorFunction, OperatorFunction, UnaryFunction, ObservableInput, ObservedValueOf } from '../types';\r\nimport { connect } from './connect';\r\n\r\n/**\r\n * Returns a connectable observable that, when connected, will multicast\r\n * all values through a single underlying {@link Subject} instance.\r\n *\r\n * @deprecated Will be removed in v8. To create a connectable observable, use {@link connectable}.\r\n * `source.pipe(publish())` is equivalent to\r\n * `connectable(source, { connector: () => new Subject(), resetOnDisconnect: false })`.\r\n * If you're using {@link refCount} after `publish`, use {@link share} operator instead.\r\n * `source.pipe(publish(), refCount())` is equivalent to\r\n * `source.pipe(share({ resetOnError: false, resetOnComplete: false, resetOnRefCountZero: false }))`.\r\n * Details: https://rxjs.dev/deprecations/multicasting\r\n */\r\nexport function publish<T>(): UnaryFunction<Observable<T>, ConnectableObservable<T>>;\r\n\r\n/**\r\n * Returns an observable, that when subscribed to, creates an underlying {@link Subject},\r\n * provides an observable view of it to a `selector` function, takes the observable result of\r\n * that selector function and subscribes to it, sending its values to the consumer, _then_ connects\r\n * the subject to the original source.\r\n *\r\n * @param selector A function used to setup multicasting prior to automatic connection.\r\n *\r\n * @deprecated Will be removed in v8. Use the {@link connect} operator instead.\r\n * `publish(selector)` is equivalent to `connect(selector)`.\r\n * Details: https://rxjs.dev/deprecations/multicasting\r\n */\r\nexport function publish<T, O extends ObservableInput<any>>(selector: (shared: Observable<T>) => O): OperatorFunction<T, ObservedValueOf<O>>;\r\n\r\n/**\r\n * Returns a ConnectableObservable, which is a variety of Observable that waits until its connect method is called\r\n * before it begins emitting items to those Observers that have subscribed to it.\r\n *\r\n * <span class=\"informal\">Makes a cold Observable hot</span>\r\n *\r\n * ![](publish.png)\r\n *\r\n * ## Examples\r\n *\r\n * Make `source$` hot by applying `publish` operator, then merge each inner observable into a single one\r\n * and subscribe\r\n *\r\n * ```ts\r\n * import { zip, interval, of, map, publish, merge, tap } from 'rxjs';\r\n *\r\n * const source$ = zip(interval(2000), of(1, 2, 3, 4, 5, 6, 7, 8, 9))\r\n *   .pipe(map(([, number]) => number));\r\n *\r\n * source$\r\n *   .pipe(\r\n *     publish(multicasted$ =>\r\n *       merge(\r\n *         multicasted$.pipe(tap(x => console.log('Stream 1:', x))),\r\n *         multicasted$.pipe(tap(x => console.log('Stream 2:', x))),\r\n *         multicasted$.pipe(tap(x => console.log('Stream 3:', x)))\r\n *       )\r\n *     )\r\n *   )\r\n *   .subscribe();\r\n *\r\n * // Results every two seconds\r\n * // Stream 1: 1\r\n * // Stream 2: 1\r\n * // Stream 3: 1\r\n * // ...\r\n * // Stream 1: 9\r\n * // Stream 2: 9\r\n * // Stream 3: 9\r\n * ```\r\n *\r\n * @see {@link publishLast}\r\n * @see {@link publishReplay}\r\n * @see {@link publishBehavior}\r\n *\r\n * @param {Function} [selector] - Optional selector function which can use the multicasted source sequence as many times\r\n * as needed, without causing multiple subscriptions to the source sequence.\r\n * Subscribers to the given source will receive all notifications of the source from the time of the subscription on.\r\n * @return A function that returns a ConnectableObservable that upon connection\r\n * causes the source Observable to emit items to its Observers.\r\n * @deprecated Will be removed in v8. Use the {@link connectable} observable, the {@link connect} operator or the\r\n * {@link share} operator instead. See the overloads below for equivalent replacement examples of this operator's\r\n * behaviors.\r\n * Details: https://rxjs.dev/deprecations/multicasting\r\n */\r\nexport function publish<T, R>(selector?: OperatorFunction<T, R>): MonoTypeOperatorFunction<T> | OperatorFunction<T, R> {\r\n  return selector ? (source) => connect(selector)(source) : (source) => multicast(new Subject<T>())(source);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}