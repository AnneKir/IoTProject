{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Decoder = exports.Encoder = exports.PacketType = exports.protocol = void 0;\nconst component_emitter_1 = require(\"@socket.io/component-emitter\");\nconst binary_js_1 = require(\"./binary.js\");\nconst is_binary_js_1 = require(\"./is-binary.js\");\nconst debug_1 = require(\"debug\"); // debug()\nconst debug = debug_1.default(\"socket.io-parser\"); // debug()\n/**\r\n * Protocol version.\r\n *\r\n * @public\r\n */\nexports.protocol = 5;\nvar PacketType;\n(function (PacketType) {\n  PacketType[PacketType[\"CONNECT\"] = 0] = \"CONNECT\";\n  PacketType[PacketType[\"DISCONNECT\"] = 1] = \"DISCONNECT\";\n  PacketType[PacketType[\"EVENT\"] = 2] = \"EVENT\";\n  PacketType[PacketType[\"ACK\"] = 3] = \"ACK\";\n  PacketType[PacketType[\"CONNECT_ERROR\"] = 4] = \"CONNECT_ERROR\";\n  PacketType[PacketType[\"BINARY_EVENT\"] = 5] = \"BINARY_EVENT\";\n  PacketType[PacketType[\"BINARY_ACK\"] = 6] = \"BINARY_ACK\";\n})(PacketType = exports.PacketType || (exports.PacketType = {}));\n/**\r\n * A socket.io Encoder instance\r\n */\nclass Encoder {\n  /**\r\n   * Encoder constructor\r\n   *\r\n   * @param {function} replacer - custom replacer to pass down to JSON.parse\r\n   */\n  constructor(replacer) {\n    this.replacer = replacer;\n  }\n  /**\r\n   * Encode a packet as a single string if non-binary, or as a\r\n   * buffer sequence, depending on packet type.\r\n   *\r\n   * @param {Object} obj - packet object\r\n   */\n  encode(obj) {\n    debug(\"encoding packet %j\", obj);\n    if (obj.type === PacketType.EVENT || obj.type === PacketType.ACK) {\n      if (is_binary_js_1.hasBinary(obj)) {\n        obj.type = obj.type === PacketType.EVENT ? PacketType.BINARY_EVENT : PacketType.BINARY_ACK;\n        return this.encodeAsBinary(obj);\n      }\n    }\n    return [this.encodeAsString(obj)];\n  }\n  /**\r\n   * Encode packet as string.\r\n   */\n  encodeAsString(obj) {\n    // first is type\n    let str = \"\" + obj.type;\n    // attachments if we have them\n    if (obj.type === PacketType.BINARY_EVENT || obj.type === PacketType.BINARY_ACK) {\n      str += obj.attachments + \"-\";\n    }\n    // if we have a namespace other than `/`\n    // we append it followed by a comma `,`\n    if (obj.nsp && \"/\" !== obj.nsp) {\n      str += obj.nsp + \",\";\n    }\n    // immediately followed by the id\n    if (null != obj.id) {\n      str += obj.id;\n    }\n    // json data\n    if (null != obj.data) {\n      str += JSON.stringify(obj.data, this.replacer);\n    }\n    debug(\"encoded %j as %s\", obj, str);\n    return str;\n  }\n  /**\r\n   * Encode packet as 'buffer sequence' by removing blobs, and\r\n   * deconstructing packet into object with placeholders and\r\n   * a list of buffers.\r\n   */\n  encodeAsBinary(obj) {\n    const deconstruction = binary_js_1.deconstructPacket(obj);\n    const pack = this.encodeAsString(deconstruction.packet);\n    const buffers = deconstruction.buffers;\n    buffers.unshift(pack); // add packet info to beginning of data list\n    return buffers; // write all the buffers\n  }\n}\n\nexports.Encoder = Encoder;\n/**\r\n * A socket.io Decoder instance\r\n *\r\n * @return {Object} decoder\r\n */\nclass Decoder extends component_emitter_1.Emitter {\n  /**\r\n   * Decoder constructor\r\n   *\r\n   * @param {function} reviver - custom reviver to pass down to JSON.stringify\r\n   */\n  constructor(reviver) {\n    super();\n    this.reviver = reviver;\n  }\n  /**\r\n   * Decodes an encoded packet string into packet JSON.\r\n   *\r\n   * @param {String} obj - encoded packet\r\n   */\n  add(obj) {\n    let packet;\n    if (typeof obj === \"string\") {\n      if (this.reconstructor) {\n        throw new Error(\"got plaintext data when reconstructing a packet\");\n      }\n      packet = this.decodeString(obj);\n      if (packet.type === PacketType.BINARY_EVENT || packet.type === PacketType.BINARY_ACK) {\n        // binary packet's json\n        this.reconstructor = new BinaryReconstructor(packet);\n        // no attachments, labeled binary but no binary data to follow\n        if (packet.attachments === 0) {\n          super.emitReserved(\"decoded\", packet);\n        }\n      } else {\n        // non-binary full packet\n        super.emitReserved(\"decoded\", packet);\n      }\n    } else if (is_binary_js_1.isBinary(obj) || obj.base64) {\n      // raw binary data\n      if (!this.reconstructor) {\n        throw new Error(\"got binary data when not reconstructing a packet\");\n      } else {\n        packet = this.reconstructor.takeBinaryData(obj);\n        if (packet) {\n          // received final buffer\n          this.reconstructor = null;\n          super.emitReserved(\"decoded\", packet);\n        }\n      }\n    } else {\n      throw new Error(\"Unknown type: \" + obj);\n    }\n  }\n  /**\r\n   * Decode a packet String (JSON data)\r\n   *\r\n   * @param {String} str\r\n   * @return {Object} packet\r\n   */\n  decodeString(str) {\n    let i = 0;\n    // look up type\n    const p = {\n      type: Number(str.charAt(0))\n    };\n    if (PacketType[p.type] === undefined) {\n      throw new Error(\"unknown packet type \" + p.type);\n    }\n    // look up attachments if type binary\n    if (p.type === PacketType.BINARY_EVENT || p.type === PacketType.BINARY_ACK) {\n      const start = i + 1;\n      while (str.charAt(++i) !== \"-\" && i != str.length) {}\n      const buf = str.substring(start, i);\n      if (buf != Number(buf) || str.charAt(i) !== \"-\") {\n        throw new Error(\"Illegal attachments\");\n      }\n      p.attachments = Number(buf);\n    }\n    // look up namespace (if any)\n    if (\"/\" === str.charAt(i + 1)) {\n      const start = i + 1;\n      while (++i) {\n        const c = str.charAt(i);\n        if (\",\" === c) break;\n        if (i === str.length) break;\n      }\n      p.nsp = str.substring(start, i);\n    } else {\n      p.nsp = \"/\";\n    }\n    // look up id\n    const next = str.charAt(i + 1);\n    if (\"\" !== next && Number(next) == next) {\n      const start = i + 1;\n      while (++i) {\n        const c = str.charAt(i);\n        if (null == c || Number(c) != c) {\n          --i;\n          break;\n        }\n        if (i === str.length) break;\n      }\n      p.id = Number(str.substring(start, i + 1));\n    }\n    // look up json data\n    if (str.charAt(++i)) {\n      const payload = this.tryParse(str.substr(i));\n      if (Decoder.isPayloadValid(p.type, payload)) {\n        p.data = payload;\n      } else {\n        throw new Error(\"invalid payload\");\n      }\n    }\n    debug(\"decoded %s as %j\", str, p);\n    return p;\n  }\n  tryParse(str) {\n    try {\n      return JSON.parse(str, this.reviver);\n    } catch (e) {\n      return false;\n    }\n  }\n  static isPayloadValid(type, payload) {\n    switch (type) {\n      case PacketType.CONNECT:\n        return typeof payload === \"object\";\n      case PacketType.DISCONNECT:\n        return payload === undefined;\n      case PacketType.CONNECT_ERROR:\n        return typeof payload === \"string\" || typeof payload === \"object\";\n      case PacketType.EVENT:\n      case PacketType.BINARY_EVENT:\n        return Array.isArray(payload) && payload.length > 0;\n      case PacketType.ACK:\n      case PacketType.BINARY_ACK:\n        return Array.isArray(payload);\n    }\n  }\n  /**\r\n   * Deallocates a parser's resources\r\n   */\n  destroy() {\n    if (this.reconstructor) {\n      this.reconstructor.finishedReconstruction();\n    }\n  }\n}\nexports.Decoder = Decoder;\n/**\r\n * A manager of a binary event's 'buffer sequence'. Should\r\n * be constructed whenever a packet of type BINARY_EVENT is\r\n * decoded.\r\n *\r\n * @param {Object} packet\r\n * @return {BinaryReconstructor} initialized reconstructor\r\n */\nclass BinaryReconstructor {\n  constructor(packet) {\n    this.packet = packet;\n    this.buffers = [];\n    this.reconPack = packet;\n  }\n  /**\r\n   * Method to be called when binary data received from connection\r\n   * after a BINARY_EVENT packet.\r\n   *\r\n   * @param {Buffer | ArrayBuffer} binData - the raw binary data received\r\n   * @return {null | Object} returns null if more binary data is expected or\r\n   *   a reconstructed packet object if all buffers have been received.\r\n   */\n  takeBinaryData(binData) {\n    this.buffers.push(binData);\n    if (this.buffers.length === this.reconPack.attachments) {\n      // done with buffer list\n      const packet = binary_js_1.reconstructPacket(this.reconPack, this.buffers);\n      this.finishedReconstruction();\n      return packet;\n    }\n    return null;\n  }\n  /**\r\n   * Cleans up binary packet reconstruction variables.\r\n   */\n  finishedReconstruction() {\n    this.reconPack = null;\n    this.buffers = [];\n  }\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","Decoder","Encoder","PacketType","protocol","component_emitter_1","require","binary_js_1","is_binary_js_1","debug_1","debug","default","constructor","replacer","encode","obj","type","EVENT","ACK","hasBinary","BINARY_EVENT","BINARY_ACK","encodeAsBinary","encodeAsString","str","attachments","nsp","id","data","JSON","stringify","deconstruction","deconstructPacket","pack","packet","buffers","unshift","Emitter","reviver","add","reconstructor","Error","decodeString","BinaryReconstructor","emitReserved","isBinary","base64","takeBinaryData","i","p","Number","charAt","undefined","start","length","buf","substring","c","next","payload","tryParse","substr","isPayloadValid","parse","e","CONNECT","DISCONNECT","CONNECT_ERROR","Array","isArray","destroy","finishedReconstruction","reconPack","binData","push","reconstructPacket"],"sources":["C:/Users/annek/Documents/Github/IoTProject/node_modules/socket.io-parser/build/cjs/index.js"],"sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Decoder = exports.Encoder = exports.PacketType = exports.protocol = void 0;\r\nconst component_emitter_1 = require(\"@socket.io/component-emitter\");\r\nconst binary_js_1 = require(\"./binary.js\");\r\nconst is_binary_js_1 = require(\"./is-binary.js\");\r\nconst debug_1 = require(\"debug\"); // debug()\r\nconst debug = debug_1.default(\"socket.io-parser\"); // debug()\r\n/**\r\n * Protocol version.\r\n *\r\n * @public\r\n */\r\nexports.protocol = 5;\r\nvar PacketType;\r\n(function (PacketType) {\r\n    PacketType[PacketType[\"CONNECT\"] = 0] = \"CONNECT\";\r\n    PacketType[PacketType[\"DISCONNECT\"] = 1] = \"DISCONNECT\";\r\n    PacketType[PacketType[\"EVENT\"] = 2] = \"EVENT\";\r\n    PacketType[PacketType[\"ACK\"] = 3] = \"ACK\";\r\n    PacketType[PacketType[\"CONNECT_ERROR\"] = 4] = \"CONNECT_ERROR\";\r\n    PacketType[PacketType[\"BINARY_EVENT\"] = 5] = \"BINARY_EVENT\";\r\n    PacketType[PacketType[\"BINARY_ACK\"] = 6] = \"BINARY_ACK\";\r\n})(PacketType = exports.PacketType || (exports.PacketType = {}));\r\n/**\r\n * A socket.io Encoder instance\r\n */\r\nclass Encoder {\r\n    /**\r\n     * Encoder constructor\r\n     *\r\n     * @param {function} replacer - custom replacer to pass down to JSON.parse\r\n     */\r\n    constructor(replacer) {\r\n        this.replacer = replacer;\r\n    }\r\n    /**\r\n     * Encode a packet as a single string if non-binary, or as a\r\n     * buffer sequence, depending on packet type.\r\n     *\r\n     * @param {Object} obj - packet object\r\n     */\r\n    encode(obj) {\r\n        debug(\"encoding packet %j\", obj);\r\n        if (obj.type === PacketType.EVENT || obj.type === PacketType.ACK) {\r\n            if (is_binary_js_1.hasBinary(obj)) {\r\n                obj.type =\r\n                    obj.type === PacketType.EVENT\r\n                        ? PacketType.BINARY_EVENT\r\n                        : PacketType.BINARY_ACK;\r\n                return this.encodeAsBinary(obj);\r\n            }\r\n        }\r\n        return [this.encodeAsString(obj)];\r\n    }\r\n    /**\r\n     * Encode packet as string.\r\n     */\r\n    encodeAsString(obj) {\r\n        // first is type\r\n        let str = \"\" + obj.type;\r\n        // attachments if we have them\r\n        if (obj.type === PacketType.BINARY_EVENT ||\r\n            obj.type === PacketType.BINARY_ACK) {\r\n            str += obj.attachments + \"-\";\r\n        }\r\n        // if we have a namespace other than `/`\r\n        // we append it followed by a comma `,`\r\n        if (obj.nsp && \"/\" !== obj.nsp) {\r\n            str += obj.nsp + \",\";\r\n        }\r\n        // immediately followed by the id\r\n        if (null != obj.id) {\r\n            str += obj.id;\r\n        }\r\n        // json data\r\n        if (null != obj.data) {\r\n            str += JSON.stringify(obj.data, this.replacer);\r\n        }\r\n        debug(\"encoded %j as %s\", obj, str);\r\n        return str;\r\n    }\r\n    /**\r\n     * Encode packet as 'buffer sequence' by removing blobs, and\r\n     * deconstructing packet into object with placeholders and\r\n     * a list of buffers.\r\n     */\r\n    encodeAsBinary(obj) {\r\n        const deconstruction = binary_js_1.deconstructPacket(obj);\r\n        const pack = this.encodeAsString(deconstruction.packet);\r\n        const buffers = deconstruction.buffers;\r\n        buffers.unshift(pack); // add packet info to beginning of data list\r\n        return buffers; // write all the buffers\r\n    }\r\n}\r\nexports.Encoder = Encoder;\r\n/**\r\n * A socket.io Decoder instance\r\n *\r\n * @return {Object} decoder\r\n */\r\nclass Decoder extends component_emitter_1.Emitter {\r\n    /**\r\n     * Decoder constructor\r\n     *\r\n     * @param {function} reviver - custom reviver to pass down to JSON.stringify\r\n     */\r\n    constructor(reviver) {\r\n        super();\r\n        this.reviver = reviver;\r\n    }\r\n    /**\r\n     * Decodes an encoded packet string into packet JSON.\r\n     *\r\n     * @param {String} obj - encoded packet\r\n     */\r\n    add(obj) {\r\n        let packet;\r\n        if (typeof obj === \"string\") {\r\n            if (this.reconstructor) {\r\n                throw new Error(\"got plaintext data when reconstructing a packet\");\r\n            }\r\n            packet = this.decodeString(obj);\r\n            if (packet.type === PacketType.BINARY_EVENT ||\r\n                packet.type === PacketType.BINARY_ACK) {\r\n                // binary packet's json\r\n                this.reconstructor = new BinaryReconstructor(packet);\r\n                // no attachments, labeled binary but no binary data to follow\r\n                if (packet.attachments === 0) {\r\n                    super.emitReserved(\"decoded\", packet);\r\n                }\r\n            }\r\n            else {\r\n                // non-binary full packet\r\n                super.emitReserved(\"decoded\", packet);\r\n            }\r\n        }\r\n        else if (is_binary_js_1.isBinary(obj) || obj.base64) {\r\n            // raw binary data\r\n            if (!this.reconstructor) {\r\n                throw new Error(\"got binary data when not reconstructing a packet\");\r\n            }\r\n            else {\r\n                packet = this.reconstructor.takeBinaryData(obj);\r\n                if (packet) {\r\n                    // received final buffer\r\n                    this.reconstructor = null;\r\n                    super.emitReserved(\"decoded\", packet);\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            throw new Error(\"Unknown type: \" + obj);\r\n        }\r\n    }\r\n    /**\r\n     * Decode a packet String (JSON data)\r\n     *\r\n     * @param {String} str\r\n     * @return {Object} packet\r\n     */\r\n    decodeString(str) {\r\n        let i = 0;\r\n        // look up type\r\n        const p = {\r\n            type: Number(str.charAt(0)),\r\n        };\r\n        if (PacketType[p.type] === undefined) {\r\n            throw new Error(\"unknown packet type \" + p.type);\r\n        }\r\n        // look up attachments if type binary\r\n        if (p.type === PacketType.BINARY_EVENT ||\r\n            p.type === PacketType.BINARY_ACK) {\r\n            const start = i + 1;\r\n            while (str.charAt(++i) !== \"-\" && i != str.length) { }\r\n            const buf = str.substring(start, i);\r\n            if (buf != Number(buf) || str.charAt(i) !== \"-\") {\r\n                throw new Error(\"Illegal attachments\");\r\n            }\r\n            p.attachments = Number(buf);\r\n        }\r\n        // look up namespace (if any)\r\n        if (\"/\" === str.charAt(i + 1)) {\r\n            const start = i + 1;\r\n            while (++i) {\r\n                const c = str.charAt(i);\r\n                if (\",\" === c)\r\n                    break;\r\n                if (i === str.length)\r\n                    break;\r\n            }\r\n            p.nsp = str.substring(start, i);\r\n        }\r\n        else {\r\n            p.nsp = \"/\";\r\n        }\r\n        // look up id\r\n        const next = str.charAt(i + 1);\r\n        if (\"\" !== next && Number(next) == next) {\r\n            const start = i + 1;\r\n            while (++i) {\r\n                const c = str.charAt(i);\r\n                if (null == c || Number(c) != c) {\r\n                    --i;\r\n                    break;\r\n                }\r\n                if (i === str.length)\r\n                    break;\r\n            }\r\n            p.id = Number(str.substring(start, i + 1));\r\n        }\r\n        // look up json data\r\n        if (str.charAt(++i)) {\r\n            const payload = this.tryParse(str.substr(i));\r\n            if (Decoder.isPayloadValid(p.type, payload)) {\r\n                p.data = payload;\r\n            }\r\n            else {\r\n                throw new Error(\"invalid payload\");\r\n            }\r\n        }\r\n        debug(\"decoded %s as %j\", str, p);\r\n        return p;\r\n    }\r\n    tryParse(str) {\r\n        try {\r\n            return JSON.parse(str, this.reviver);\r\n        }\r\n        catch (e) {\r\n            return false;\r\n        }\r\n    }\r\n    static isPayloadValid(type, payload) {\r\n        switch (type) {\r\n            case PacketType.CONNECT:\r\n                return typeof payload === \"object\";\r\n            case PacketType.DISCONNECT:\r\n                return payload === undefined;\r\n            case PacketType.CONNECT_ERROR:\r\n                return typeof payload === \"string\" || typeof payload === \"object\";\r\n            case PacketType.EVENT:\r\n            case PacketType.BINARY_EVENT:\r\n                return Array.isArray(payload) && payload.length > 0;\r\n            case PacketType.ACK:\r\n            case PacketType.BINARY_ACK:\r\n                return Array.isArray(payload);\r\n        }\r\n    }\r\n    /**\r\n     * Deallocates a parser's resources\r\n     */\r\n    destroy() {\r\n        if (this.reconstructor) {\r\n            this.reconstructor.finishedReconstruction();\r\n        }\r\n    }\r\n}\r\nexports.Decoder = Decoder;\r\n/**\r\n * A manager of a binary event's 'buffer sequence'. Should\r\n * be constructed whenever a packet of type BINARY_EVENT is\r\n * decoded.\r\n *\r\n * @param {Object} packet\r\n * @return {BinaryReconstructor} initialized reconstructor\r\n */\r\nclass BinaryReconstructor {\r\n    constructor(packet) {\r\n        this.packet = packet;\r\n        this.buffers = [];\r\n        this.reconPack = packet;\r\n    }\r\n    /**\r\n     * Method to be called when binary data received from connection\r\n     * after a BINARY_EVENT packet.\r\n     *\r\n     * @param {Buffer | ArrayBuffer} binData - the raw binary data received\r\n     * @return {null | Object} returns null if more binary data is expected or\r\n     *   a reconstructed packet object if all buffers have been received.\r\n     */\r\n    takeBinaryData(binData) {\r\n        this.buffers.push(binData);\r\n        if (this.buffers.length === this.reconPack.attachments) {\r\n            // done with buffer list\r\n            const packet = binary_js_1.reconstructPacket(this.reconPack, this.buffers);\r\n            this.finishedReconstruction();\r\n            return packet;\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * Cleans up binary packet reconstruction variables.\r\n     */\r\n    finishedReconstruction() {\r\n        this.reconPack = null;\r\n        this.buffers = [];\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}