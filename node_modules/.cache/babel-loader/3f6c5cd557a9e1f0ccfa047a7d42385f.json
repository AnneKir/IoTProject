{"ast":null,"code":"export function createErrorClass(createImpl) {\n  var _super = function (instance) {\n    Error.call(instance);\n    instance.stack = new Error().stack;\n  };\n  var ctorFunc = createImpl(_super);\n  ctorFunc.prototype = Object.create(Error.prototype);\n  ctorFunc.prototype.constructor = ctorFunc;\n  return ctorFunc;\n}","map":{"version":3,"mappings":"AASA,OAAM,SAAUA,gBAAgB,CAAIC,UAAgC;EAClE,IAAMC,MAAM,GAAG,UAACC,QAAa;IAC3BC,KAAK,CAACC,IAAI,CAACF,QAAQ,CAAC;IACpBA,QAAQ,CAACG,KAAK,GAAG,IAAIF,KAAK,EAAE,CAACE,KAAK;EACpC,CAAC;EAED,IAAMC,QAAQ,GAAGN,UAAU,CAACC,MAAM,CAAC;EACnCK,QAAQ,CAACC,SAAS,GAAGC,MAAM,CAACC,MAAM,CAACN,KAAK,CAACI,SAAS,CAAC;EACnDD,QAAQ,CAACC,SAAS,CAACG,WAAW,GAAGJ,QAAQ;EACzC,OAAOA,QAAQ;AACjB","names":["createErrorClass","createImpl","_super","instance","Error","call","stack","ctorFunc","prototype","Object","create","constructor"],"sources":["C:\\Users\\Amali\\Desktop\\Building_the_IoT_w._P2P_and_Cloud_Computing\\IoTProject\\node_modules\\rxjs\\src\\internal\\util\\createErrorClass.ts"],"sourcesContent":["/**\r\n * Used to create Error subclasses until the community moves away from ES5.\r\n *\r\n * This is because compiling from TypeScript down to ES5 has issues with subclassing Errors\r\n * as well as other built-in types: https://github.com/Microsoft/TypeScript/issues/12123\r\n *\r\n * @param createImpl A factory function to create the actual constructor implementation. The returned\r\n * function should be a named function that calls `_super` internally.\r\n */\r\nexport function createErrorClass<T>(createImpl: (_super: any) => any): T {\r\n  const _super = (instance: any) => {\r\n    Error.call(instance);\r\n    instance.stack = new Error().stack;\r\n  };\r\n\r\n  const ctorFunc = createImpl(_super);\r\n  ctorFunc.prototype = Object.create(Error.prototype);\r\n  ctorFunc.prototype.constructor = ctorFunc;\r\n  return ctorFunc;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}