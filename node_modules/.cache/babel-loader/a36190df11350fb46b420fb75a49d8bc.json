{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport freeice from 'freeice';\nimport SimplePeer from 'simple-peer';\nimport uid from 'uid-safe';\nimport { Stack } from 'typed-structures';\nimport React from 'react';\nimport filterReactProps from 'filter-react-props';\nimport { deflate_encode_raw, deflate_decode_raw } from 'wasm-flate';\nvar getSignalData = function getSignalData(peerConnection) {\n  try {\n    return Promise.resolve(new Promise(function (resolve, reject) {\n      try {\n        if (peerConnection) peerConnection.on('signal', function (data) {\n          return resolve(data);\n        });\n      } catch (e) {\n        reject(e);\n      }\n    }));\n  } catch (e) {\n    return Promise.reject(e);\n  }\n};\nvar processOfferRequest = function processOfferRequest(request) {\n  try {\n    var state = ReactSimplePeerState.value;\n    if (ReactSimplePeerStatusState.value !== Status.IDLE) {\n      state.joinRequests.stack(request);\n      ReactSimplePeerState.next(state);\n      return Promise.resolve();\n    }\n    ReactSimplePeerStatusState.next(Status.EMITTING_OFFER);\n    var config = {\n      initiator: true,\n      trickle: false,\n      config: {\n        iceServers: freeice()\n      }\n    };\n    if (state.model.stream) {\n      config.stream = state.model.stream;\n    }\n    state.peerConnection = new SimplePeer(config);\n    state.peerConnection.on('stream', function (stream) {\n      try {\n        var localState = ReactSimplePeerState.value;\n        var _temp2 = function () {\n          if (localState.connections.get(request.peerId)) {\n            var connection = localState.connections.get(request.peerId);\n            return Promise.resolve(stream).then(function (_stream) {\n              connection.model.stream = _stream;\n              localState.connections.set(request.peerId, connection);\n              ReactSimplePeerState.next(localState);\n            });\n          }\n        }();\n        return Promise.resolve(_temp2 && _temp2.then ? _temp2.then(function () {}) : void 0);\n      } catch (e) {\n        return Promise.reject(e);\n      }\n    });\n    return Promise.resolve(getSignalData(state.peerConnection)).then(function (_getSignalData) {\n      state.signalData = _getSignalData;\n      state.emitOfferResponse(request, state.signalData);\n      ReactSimplePeerState.next(state);\n    });\n  } catch (e) {\n    return Promise.reject(e);\n  }\n};\nvar initState = {\n  id: /*#__PURE__*/\n  uid.sync(15),\n  peers: {},\n  // Room assignment left to createRoom implementation\n  // Since users may want to base it on something business related\n  room: null,\n  roomCreatorId: null,\n  signalData: {},\n  connections: /*#__PURE__*/\n  new Map(),\n  peerConnection: /*#__PURE__*/\n  new SimplePeer(),\n  commands: /*#__PURE__*/\n  new Map(),\n  model: {\n    connection: /*#__PURE__*/\n    new SimplePeer(),\n    stream: null\n  },\n  joinRequests: /*#__PURE__*/\n  new Stack(),\n  clientOffers: /*#__PURE__*/\n  new Stack(),\n  emitJoinRequest: function emitJoinRequest() {},\n  emitOfferResponse: function emitOfferResponse() {},\n  emitInitiatorOffers: function emitInitiatorOffers() {},\n  emitJoinAck: function emitJoinAck() {}\n};\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\nvar JoinRoomButton = /*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(JoinRoomButton, _React$Component);\n  function JoinRoomButton() {\n    var _this;\n    _this = _React$Component.apply(this, arguments) || this;\n    _this.state = {};\n    return _this;\n  }\n  var _proto = JoinRoomButton.prototype;\n  _proto.componentDidMount = function componentDidMount() {\n    var state = ReactSimplePeerState.value;\n    state.emitJoinRequest = this.props.join;\n    ReactSimplePeerState.next(state);\n  };\n  _proto.render = function render() {\n    var _this$props = this.props,\n      join = _this$props.join,\n      children = _this$props.children,\n      room = _this$props.room,\n      _onClick = _this$props.onClick;\n    return React.createElement(\"button\", Object.assign({}, filterReactProps(this.props), {\n      onClick: function onClick(e) {\n        setRoom(room);\n        join();\n        if (_onClick) {\n          _onClick(e);\n        }\n      }\n    }), children);\n  };\n  return JoinRoomButton;\n}(React.Component);\nfunction parse(data, state) {\n  var senderId = data.substr(0, 20);\n  var command = data.substr(20, 20);\n  if (state.commands.get(command)) {\n    try {\n      state.commands.get(command)(senderId, data.substr(40), state);\n    } catch (e) {\n      console.warn(e);\n    }\n  }\n  return senderId;\n}\nvar send = function send(pc, command, data) {\n  try {\n    try {\n      pc.send(deflate_encode_raw(new Uint8Array(Buffer.from(\"\" + ReactSimplePeerState.value.id + command + data))));\n      return Promise.resolve(true);\n    } catch (e) {\n      console.warn('An error occurred when trying to send data to peer: Failed to reach peer');\n      return Promise.resolve(false);\n    }\n  } catch (e) {\n    return Promise.reject(e);\n  }\n};\nfunction handlePeerConnection(pc, openConnectionAsInitiator) {\n  pc.on('connect', function () {\n    try {\n      var _temp3 = function _temp3() {\n        var state = ReactSimplePeerState.value;\n        var model = state.model;\n        var peers = Array.from(state.connections.keys());\n        return Promise.resolve(send(pc, 'SYNC_MODEL_DATA_____', JSON.stringify({\n          model: model,\n          peers: peers\n        }))).then(function () {});\n      };\n      var _temp4 = function () {\n        if (openConnectionAsInitiator) {\n          return Promise.resolve(send(pc, 'OPEN_CNTS_AS_INIT___', JSON.stringify(ReactSimplePeerState.value.peers))).then(function () {});\n        }\n      }();\n      return Promise.resolve(_temp4 && _temp4.then ? _temp4.then(_temp3) : _temp3(_temp4));\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  });\n  pc.on('data', function (data) {\n    if (!pc.initiator && ReactSimplePeerState.value.connections.size === 0) {\n      ReactSimplePeerStatusState.next(Status.CONNECTING_TO_EXISTING_PEERS);\n    }\n    parse(new TextDecoder('utf-8').decode(deflate_decode_raw(data)), ReactSimplePeerState.value);\n    ReactSimplePeerState.next(ReactSimplePeerState.value);\n  });\n}\nvar createExistingPeersOffers = function createExistingPeersOffers(peers, state) {\n  try {\n    return Promise.resolve(Promise.all(Object.entries(peers).filter(function (set) {\n      return set[0] !== state.id;\n    }).map(function (set) {\n      try {\n        var config = {\n          initiator: true,\n          trickle: false,\n          config: {\n            iceServers: freeice()\n          }\n        };\n        if (state.model.stream) {\n          config.stream = state.model.stream;\n        }\n        var pc = new SimplePeer(config);\n        handlePeerConnection(pc, false);\n        pc.on('stream', function (stream) {\n          try {\n            var _temp2 = function () {\n              if (state.connections.get(set[0])) {\n                return Promise.resolve(stream).then(function (_stream) {\n                  state.connections.get(set[0]).model.stream = _stream;\n                });\n              }\n            }();\n            return Promise.resolve(_temp2 && _temp2.then ? _temp2.then(function () {}) : void 0);\n          } catch (e) {\n            return Promise.reject(e);\n          }\n        });\n        return Promise.resolve(getSignalData(pc)).then(function (signalData) {\n          set.splice(1, 1, signalData);\n          var connection = state.connections.get(set[0]);\n          state.connections.set(set[0], connection || {\n            model: {\n              connection: pc,\n              stream: null\n            },\n            peers: []\n          });\n          ReactSimplePeerState.next(state);\n          return set;\n        });\n      } catch (e) {\n        return Promise.reject(e);\n      }\n    }))).then(Object.fromEntries);\n  } catch (e) {\n    return Promise.reject(e);\n  }\n};\nvar openConnectionsAsInitiator = function openConnectionsAsInitiator(_, data, state) {\n  try {\n    var peers = JSON.parse(data);\n    var _temp2 = function () {\n      if (Object.entries(peers).length) {\n        return Promise.resolve(createExistingPeersOffers(peers, state)).then(function (offers) {\n          state.emitInitiatorOffers(offers, state.id, state.room);\n        });\n      }\n    }();\n    return Promise.resolve(_temp2 && _temp2.then ? _temp2.then(function () {}) : void 0);\n  } catch (e) {\n    return Promise.reject(e);\n  }\n};\nfunction syncModelData(senderId, data, state) {\n  if (state.connections.get(senderId)) {\n    var syncData = JSON.parse(data);\n    var model = state.connections.get(senderId).model;\n    state.connections.set(senderId, {\n      peers: syncData.peers,\n      model: _extends({}, syncData.model, {\n        connection: model.connection,\n        stream: model.stream\n      })\n    });\n    ReactSimplePeerState.next(state);\n  }\n}\nvar processJoinResponse = function processJoinResponse(offer, id, room) {\n  try {\n    var state = ReactSimplePeerState.value;\n    if (state.connections.size === 0) {\n      ReactSimplePeerStatusState.next(Status.RECEIVING_RESPONSE_ACCESS);\n    }\n    var config = {\n      initiator: false,\n      trickle: false,\n      config: {\n        iceServers: freeice()\n      }\n    };\n    if (state.model.stream) {\n      config.stream = state.model.stream;\n    }\n    state.peerConnection = new SimplePeer(config);\n    state.peerConnection.on('stream', function (stream) {\n      if (id) {\n        state.connections.set(id, {\n          model: {\n            connection: state.peerConnection,\n            stream: stream\n          },\n          peers: []\n        });\n      }\n    });\n    state.peerConnection.signal(offer);\n    return Promise.resolve(getSignalData(state.peerConnection)).then(function (signalData) {\n      if (state.connections.size === 0) {\n        ReactSimplePeerStatusState.next(Status.JOINING_SESSION);\n      }\n      state.emitJoinAck(signalData, room, id, state.id);\n      handlePeerConnection(state.peerConnection, false);\n      ReactSimplePeerState.next(state);\n    });\n  } catch (e) {\n    return Promise.reject(e);\n  }\n};\nfunction processClientOffer(data, id, roomCreator, emitterPeerId) {\n  var state = ReactSimplePeerState.value;\n  if (roomCreator) {\n    handlePeerConnection(state.peerConnection, true);\n    var connection = state.connections.get(emitterPeerId);\n    state.connections.set(emitterPeerId, connection || {\n      model: {\n        connection: state.peerConnection,\n        stream: null\n      },\n      peers: []\n    });\n    ReactSimplePeerState.next(state);\n  }\n  if (id && state.connections.get(emitterPeerId)) {\n    var peerConnection = state.connections.get(emitterPeerId);\n    handlePeerConnection(peerConnection.model.connection, false);\n    state.peerConnection = peerConnection.model.connection;\n    ReactSimplePeerState.next(state);\n  }\n  var retry = function retry() {\n    try {\n      var _temp2 = function _temp2(_send) {\n        if (!relayPeer || relayPeer && !_send) {\n          setTimeout(function () {\n            return Promise.resolve(retry());\n          }, Math.ceil(Math.random() * 1000));\n        }\n      };\n      var relayPeer = Array.from(ReactSimplePeerState.value.connections.values()).find(function (peer) {\n        return peer.peers.includes(emitterPeerId);\n      });\n      return Promise.resolve(!relayPeer || !relayPeer ? _temp2(!relayPeer || relayPeer && send(relayPeer.model.connection, 'TELL_HIM_TO_RETRY___', emitterPeerId)) : Promise.resolve(!relayPeer || relayPeer && send(relayPeer.model.connection, 'TELL_HIM_TO_RETRY___', emitterPeerId)).then(_temp2));\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n  state.peerConnection.on('error', function (e) {\n    try {\n      if (e.code === 'ERR_SET_REMOTE_DESCRIPTION') {\n        console.warn('Encountered an error while trying to signal incoming offer, retrying');\n        setTimeout(function () {\n          return Promise.resolve(retry());\n        }, Math.ceil(Math.random() * 1000));\n        return Promise.resolve();\n      }\n      return Promise.resolve();\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  });\n  state.peerConnection.signal(data.offer);\n  state.peers = data.peers;\n  ReactSimplePeerStatusState.next(Status.IDLE);\n  ReactSimplePeerState.next(state);\n}\nvar initiatorOffer = function initiatorOffer(_, str, state) {\n  try {\n    var data = JSON.parse(str);\n    var offer = JSON.parse(data.offer);\n    var id = data.id;\n    var config = {\n      initiator: false,\n      trickle: false,\n      config: {\n        iceServers: freeice()\n      }\n    };\n    if (state.model.stream) {\n      config.stream = state.model.stream;\n    }\n    var peerConnection = new SimplePeer(config);\n    peerConnection.signal(offer);\n    return Promise.resolve(getSignalData(state.peerConnection)).then(function (signalData) {\n      send(peerConnection, 'NON_INITIATOR_OFFER_', JSON.stringify({\n        id: state.id,\n        offer: signalData\n      }));\n      handlePeerConnection(peerConnection, false);\n      var connection = state.connections.get(id);\n      state.connections.set(id, connection || {\n        model: {\n          connection: peerConnection,\n          stream: null\n        },\n        peers: []\n      });\n    });\n  } catch (e) {\n    return Promise.reject(e);\n  }\n};\nvar nonInitiatorOffer = function nonInitiatorOffer(_, str, state) {\n  try {\n    var data = JSON.parse(str);\n    var offer = data.offer;\n    var id = data.id;\n    handlePeerConnection(state.peerConnection, true);\n    var connection = state.connections.get(id);\n    state.connections.set(id, connection || {\n      model: {\n        connection: state.peerConnection,\n        stream: null\n      },\n      peers: []\n    });\n    state.peerConnection.signal(offer);\n    ReactSimplePeerState.next(state);\n    return Promise.resolve();\n  } catch (e) {\n    return Promise.reject(e);\n  }\n};\nvar tellHimToRetry = function tellHimToRetry(_, data, state) {\n  try {\n    var target = state.connections.get(data);\n    var _temp2 = function () {\n      if (target) {\n        return Promise.resolve(send(target.model.connection, 'RETRY_______________')).then(function () {});\n      }\n    }();\n    return Promise.resolve(_temp2 && _temp2.then ? _temp2.then(function () {}) : void 0);\n  } catch (e) {\n    return Promise.reject(e);\n  }\n};\nfunction retry(_, _1, state) {\n  ReactSimplePeerState.next(initState);\n  setTimeout(function () {\n    return state.emitJoinRequest();\n  }, Math.ceil(Math.random() * 1000));\n}\nvar Setup = /*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(Setup, _React$Component);\n  function Setup(props) {\n    var _this;\n    _this = _React$Component.call(this, props) || this;\n    _this.state = {};\n    var _this$props = _this.props,\n      onJoinResponse = _this$props.onJoinResponse,\n      onClientOffer = _this$props.onClientOffer,\n      onOfferRequest = _this$props.onOfferRequest,\n      onLeaving = _this$props.onLeaving,\n      emitOfferResponse = _this$props.emitOfferResponse,\n      emitInitiatorOffers = _this$props.emitInitiatorOffers,\n      emitJoinAck = _this$props.emitJoinAck;\n    var state = ReactSimplePeerState.value;\n    state.commands.set('OPEN_CNTS_AS_INIT___', openConnectionsAsInitiator);\n    state.commands.set('SYNC_MODEL_DATA_____', syncModelData);\n    state.commands.set('INITIATOR_OFFER_____', initiatorOffer);\n    state.commands.set('NON_INITIATOR_OFFER_', nonInitiatorOffer);\n    state.commands.set('TELL_HIM_TO_RETRY___', tellHimToRetry);\n    state.commands.set('RETRY_______________', retry);\n    state.emitOfferResponse = emitOfferResponse;\n    state.emitInitiatorOffers = emitInitiatorOffers;\n    state.emitJoinAck = emitJoinAck;\n    onOfferRequest(processOfferRequest);\n    onJoinResponse(processJoinResponse);\n    onClientOffer(processClientOffer);\n    onLeaving(function () {\n      return console.log('TODO: Implement processLeaving');\n    });\n    ReactSimplePeerState.next(state);\n    return _this;\n  }\n  var _proto = Setup.prototype;\n  _proto.render = function render() {\n    return this.props.children || React.createElement(React.Fragment, null);\n  };\n  return Setup;\n}(React.Component);\nvar Peers = /*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(Peers, _React$Component);\n  function Peers() {\n    var _this;\n    _this = _React$Component.apply(this, arguments) || this;\n    _this.state = {\n      connections: []\n    };\n    return _this;\n  }\n  var _proto = Peers.prototype;\n  _proto.componentDidMount = function componentDidMount() {\n    var _this2 = this;\n    ReactSimplePeerState.subscribe(function (state) {\n      _this2.setState({\n        connections: Array.from(state.connections).map(function (set) {\n          return set[1].model;\n        })\n      });\n    });\n  };\n  _proto.render = function render() {\n    var children = this.props.children;\n    return children(this.state.connections) || React.createElement(React.Fragment, null);\n  };\n  return Peers;\n}(React.Component);\nvar ReactSimplePeerStatus = {\n  IDLE: 'Waiting for peers',\n  EMITTING_OFFER: 'Emitting offer',\n  REQUESTING_ACCESS: 'Requesting access',\n  RECEIVING_RESPONSE_ACCESS: 'Receiving response access',\n  CONNECTING_TO_EXISTING_PEERS: 'Connecting to existing peers',\n  JOINING_SESSION: 'Joining session'\n};\nvar State = /*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(State, _React$Component);\n  function State() {\n    var _this;\n    _this = _React$Component.apply(this, arguments) || this;\n    _this.state = {\n      value: ''\n    };\n    return _this;\n  }\n  var _proto = State.prototype;\n  _proto.componentDidMount = function componentDidMount() {\n    var _this2 = this;\n    ReactSimplePeerStatusState.subscribe(function (status) {\n      try {\n        _this2.setState({\n          value: ReactSimplePeerStatus[status]\n        });\n        return Promise.resolve();\n      } catch (e) {\n        return Promise.reject(e);\n      }\n    });\n  };\n  _proto.render = function render() {\n    return React.createElement(React.Fragment, null, this.state.value);\n  };\n  return State;\n}(React.Component);\nvar PeerVideo = /*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(PeerVideo, _React$Component);\n  function PeerVideo() {\n    var _this;\n    _this = _React$Component.apply(this, arguments) || this;\n    _this.state = {\n      stream: null\n    };\n    _this.video = document.createElement('video');\n    return _this;\n  }\n  var _proto = PeerVideo.prototype;\n  _proto.componentDidUpdate = function componentDidUpdate() {\n    try {\n      var _this3 = this;\n      return Promise.resolve(_this3.props.peer.stream).then(function (_this2$props$peer$str) {\n        _this3.video.srcObject = _this2$props$peer$str;\n      });\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n  _proto.render = function render() {\n    var _this4 = this;\n    return React.createElement(\"video\", Object.assign({}, filterReactProps(this.props), {\n      autoPlay: true,\n      muted: true,\n      ref: function ref(video) {\n        _this4.video = video;\n      }\n    }));\n  };\n  return PeerVideo;\n}(React.Component);\nvar ClientOffer = function ClientOffer(offer, peers) {\n  this.offer = offer;\n  this.peers = peers;\n};\nvar JoinRequest = function JoinRequest(roomId, peerId) {\n  this.roomId = roomId;\n  this.peerId = peerId;\n};\nvar Status;\n(function (Status) {\n  Status[\"IDLE\"] = \"IDLE\";\n  Status[\"EMITTING_OFFER\"] = \"EMITTING_OFFER\";\n  Status[\"REQUESTING_ACCESS\"] = \"REQUESTING_ACCESS\";\n  Status[\"RECEIVING_RESPONSE_ACCESS\"] = \"RECEIVING_RESPONSE_ACCESS\";\n  Status[\"CONNECTING_TO_EXISTING_PEERS\"] = \"CONNECTING_TO_EXISTING_PEERS\";\n  Status[\"JOINING_SESSION\"] = \"JOINING_SESSION\";\n})(Status || (Status = {}));\nvar ReactSimplePeerStatusState = /*#__PURE__*/\nnew BehaviorSubject(Status.IDLE);\nvar ReactSimplePeerState = /*#__PURE__*/\nnew BehaviorSubject(initState);\nfunction setModel(model) {\n  var state = ReactSimplePeerState.value;\n  state.model = model;\n  ReactSimplePeerState.next(state);\n}\nfunction setRoom(room) {\n  var state = ReactSimplePeerState.value;\n  state.room = room;\n  ReactSimplePeerState.next(state);\n}\nfunction getId() {\n  return ReactSimplePeerState.value.id;\n}\nReactSimplePeerStatusState.subscribe(function (status) {\n  try {\n    if (status === Status.IDLE && ReactSimplePeerState.value.joinRequests.length()) {\n      var state = ReactSimplePeerState.value;\n      console.log(state.joinRequests.length());\n      var joinRequest = state.joinRequests.unstack();\n      console.log(state.joinRequests.length());\n      ReactSimplePeerState.next(state);\n      setTimeout(function () {\n        try {\n          return Promise.resolve(processOfferRequest(joinRequest));\n        } catch (e) {\n          return Promise.reject(e);\n        }\n      }, Math.ceil(Math.random() * 1000));\n    }\n    return Promise.resolve();\n  } catch (e) {\n    return Promise.reject(e);\n  }\n});\nexport { ClientOffer, JoinRequest, JoinRoomButton, PeerVideo, Peers, ReactSimplePeerState, ReactSimplePeerStatusState, Setup, State, Status, getId, setModel, setRoom };","map":{"version":3,"mappings":"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","names":["getSignalData","peerConnection","Promise","resolve","reject","on","data","e","processOfferRequest","request","state","ReactSimplePeerState","value","ReactSimplePeerStatusState","Status","IDLE","joinRequests","stack","next","EMITTING_OFFER","config","initiator","trickle","iceServers","freeice","model","stream","SimplePeer","localState","connections","get","peerId","connection","set","signalData","emitOfferResponse","initState","id","uid","sync","peers","room","roomCreatorId","Map","commands","Stack","clientOffers","emitJoinRequest","emitInitiatorOffers","emitJoinAck","JoinRoomButton","_inheritsLoose","_this","_proto","componentDidMount","props","join","render","children","onClick","React","filterReactProps","setRoom","Component","parse","senderId","substr","command","console","warn","send","pc","deflate_encode_raw","Uint8Array","Buffer","from","handlePeerConnection","openConnectionAsInitiator","Array","keys","JSON","stringify","size","CONNECTING_TO_EXISTING_PEERS","TextDecoder","decode","deflate_decode_raw","createExistingPeersOffers","all","Object","entries","filter","map","splice","fromEntries","openConnectionsAsInitiator","_","length","offers","syncModelData","syncData","processJoinResponse","offer","RECEIVING_RESPONSE_ACCESS","signal","JOINING_SESSION","processClientOffer","roomCreator","emitterPeerId","retry","relayPeer","setTimeout","Math","ceil","random","values","find","peer","includes","code","initiatorOffer","str","nonInitiatorOffer","tellHimToRetry","target","_1","Setup","onJoinResponse","onClientOffer","onOfferRequest","onLeaving","log","Peers","subscribe","_this2","setState","ReactSimplePeerStatus","REQUESTING_ACCESS","State","status","PeerVideo","document","createElement","componentDidUpdate","_this3","video","srcObject","autoPlay","muted","ref","_this4","ClientOffer","JoinRequest","roomId","BehaviorSubject","setModel","getId","joinRequest","unstack"],"sources":["C:\\Users\\Amali\\Desktop\\Building_the_IoT_w._P2P_and_Cloud_Computing\\IoTProject\\node_modules\\react-simple-peer\\src\\Commands\\getSignalData.ts","C:\\Users\\Amali\\Desktop\\Building_the_IoT_w._P2P_and_Cloud_Computing\\IoTProject\\node_modules\\react-simple-peer\\src\\Commands\\processOfferRequest.ts","C:\\Users\\Amali\\Desktop\\Building_the_IoT_w._P2P_and_Cloud_Computing\\IoTProject\\node_modules\\react-simple-peer\\src\\state.ts","C:\\Users\\Amali\\Desktop\\Building_the_IoT_w._P2P_and_Cloud_Computing\\IoTProject\\node_modules\\react-simple-peer\\src\\Components\\JoinRoomButton.tsx","C:\\Users\\Amali\\Desktop\\Building_the_IoT_w._P2P_and_Cloud_Computing\\IoTProject\\node_modules\\react-simple-peer\\src\\Commands\\Tools\\parse.ts","C:\\Users\\Amali\\Desktop\\Building_the_IoT_w._P2P_and_Cloud_Computing\\IoTProject\\node_modules\\react-simple-peer\\src\\Commands\\Tools\\send.ts","C:\\Users\\Amali\\Desktop\\Building_the_IoT_w._P2P_and_Cloud_Computing\\IoTProject\\node_modules\\react-simple-peer\\src\\Commands\\handlePeerConnection.ts","C:\\Users\\Amali\\Desktop\\Building_the_IoT_w._P2P_and_Cloud_Computing\\IoTProject\\node_modules\\react-simple-peer\\src\\Commands\\createExistingPeersOffers.ts","C:\\Users\\Amali\\Desktop\\Building_the_IoT_w._P2P_and_Cloud_Computing\\IoTProject\\node_modules\\react-simple-peer\\src\\Commands\\openConnectionAsInitiator.ts","C:\\Users\\Amali\\Desktop\\Building_the_IoT_w._P2P_and_Cloud_Computing\\IoTProject\\node_modules\\react-simple-peer\\src\\Commands\\syncModelData.ts","C:\\Users\\Amali\\Desktop\\Building_the_IoT_w._P2P_and_Cloud_Computing\\IoTProject\\node_modules\\react-simple-peer\\src\\Commands\\processJoinResponse.ts","C:\\Users\\Amali\\Desktop\\Building_the_IoT_w._P2P_and_Cloud_Computing\\IoTProject\\node_modules\\react-simple-peer\\src\\Commands\\processClientOffer.ts","C:\\Users\\Amali\\Desktop\\Building_the_IoT_w._P2P_and_Cloud_Computing\\IoTProject\\node_modules\\react-simple-peer\\src\\Commands\\InitiatorOffer.ts","C:\\Users\\Amali\\Desktop\\Building_the_IoT_w._P2P_and_Cloud_Computing\\IoTProject\\node_modules\\react-simple-peer\\src\\Commands\\nonInitiatorOffer.ts","C:\\Users\\Amali\\Desktop\\Building_the_IoT_w._P2P_and_Cloud_Computing\\IoTProject\\node_modules\\react-simple-peer\\src\\Commands\\tellHimToRetry.ts","C:\\Users\\Amali\\Desktop\\Building_the_IoT_w._P2P_and_Cloud_Computing\\IoTProject\\node_modules\\react-simple-peer\\src\\Commands\\retry.ts","C:\\Users\\Amali\\Desktop\\Building_the_IoT_w._P2P_and_Cloud_Computing\\IoTProject\\node_modules\\react-simple-peer\\src\\Components\\Setup.tsx","C:\\Users\\Amali\\Desktop\\Building_the_IoT_w._P2P_and_Cloud_Computing\\IoTProject\\node_modules\\react-simple-peer\\src\\Components\\Peers.tsx","C:\\Users\\Amali\\Desktop\\Building_the_IoT_w._P2P_and_Cloud_Computing\\IoTProject\\node_modules\\react-simple-peer\\src\\Utils\\status.ts","C:\\Users\\Amali\\Desktop\\Building_the_IoT_w._P2P_and_Cloud_Computing\\IoTProject\\node_modules\\react-simple-peer\\src\\Components\\State.tsx","C:\\Users\\Amali\\Desktop\\Building_the_IoT_w._P2P_and_Cloud_Computing\\IoTProject\\node_modules\\react-simple-peer\\src\\Components\\PeerVideo.tsx","C:\\Users\\Amali\\Desktop\\Building_the_IoT_w._P2P_and_Cloud_Computing\\IoTProject\\node_modules\\react-simple-peer\\src\\Models\\ClientOffer.ts","C:\\Users\\Amali\\Desktop\\Building_the_IoT_w._P2P_and_Cloud_Computing\\IoTProject\\node_modules\\react-simple-peer\\src\\Models\\JoinRequest.ts","C:\\Users\\Amali\\Desktop\\Building_the_IoT_w._P2P_and_Cloud_Computing\\IoTProject\\node_modules\\react-simple-peer\\src\\index.tsx"],"sourcesContent":["import { Instance, SignalData } from 'simple-peer';\n\nexport async function getSignalData(peerConnection: Instance) {\n  return new Promise<SignalData>((resolve, reject) => {\n    try {\n      if (peerConnection) peerConnection.on('signal', data => resolve(data));\n    } catch (e) {\n      reject(e);\n    }\n  });\n}\n","import freeice from 'freeice';\nimport {\n  JoinRequest,\n  ReactSimplePeerState,\n  ReactSimplePeerStatusState,\n  Status,\n} from '../';\nimport SimplePeer, { Options } from 'simple-peer';\nimport { getSignalData } from '../Commands/getSignalData';\n\nexport async function processOfferRequest(request: JoinRequest) {\n  let state = ReactSimplePeerState.value;\n\n  if (ReactSimplePeerStatusState.value !== Status.IDLE) {\n    state.joinRequests.stack(request);\n    ReactSimplePeerState.next(state);\n    return;\n  }\n\n  ReactSimplePeerStatusState.next(Status.EMITTING_OFFER);\n\n  let config: Options = {\n    initiator: true,\n    trickle: false,\n    config: { iceServers: freeice() },\n  };\n\n  if (state.model.stream) {\n    config.stream = state.model.stream;\n  }\n\n  state.peerConnection = new SimplePeer(config);\n\n  state.peerConnection.on('stream', async (stream: Promise<MediaStream>) => {\n    let localState = ReactSimplePeerState.value;\n    if (localState.connections.get(request.peerId)) {\n      let connection = localState.connections.get(request.peerId)!;\n      connection.model.stream = await stream;\n      localState.connections.set(request.peerId, connection);\n      ReactSimplePeerState.next(localState);\n    }\n  });\n\n  state.signalData = await getSignalData(state.peerConnection);\n\n  state.emitOfferResponse(request, state.signalData);\n\n  ReactSimplePeerState.next(state);\n}\n","import uid from 'uid-safe';\nimport { ReactSimplePeerModel } from 'Models/react-simple-peer.model';\nimport SimplePeer from 'simple-peer';\nimport { Stack } from 'typed-structures';\nimport { JoinRequest } from 'Models/JoinRequest';\nimport { ClientOffer } from 'Models/ClientOffer';\n\nexport const initState = {\n  id: uid.sync(15),\n  peers: {},\n  // Room assignment left to createRoom implementation\n  // Since users may want to base it on something business related\n  room: null,\n  roomCreatorId: null,\n  signalData: {},\n  connections: new Map<string, { model: ReactSimplePeerModel; peers: [] }>(),\n  peerConnection: new SimplePeer(),\n  commands: new Map<string, Function>(),\n  model: { connection: new SimplePeer(), stream: null },\n  joinRequests: new Stack<JoinRequest>(),\n  clientOffers: new Stack<[ClientOffer, string, boolean, string]>(),\n  emitJoinRequest: () => {},\n  emitOfferResponse: () => {},\n  emitInitiatorOffers: () => {},\n  emitJoinAck: () => {},\n};\n","import React from 'react';\nimport { ReactElement } from 'react';\nimport { ReactSimplePeerState, setRoom } from '../';\nimport filterReactProps from 'filter-react-props';\n\ninterface SimplePeerReactJoinRoomButtonProps {\n  children: ReactElement;\n  room: string;\n  join: () => void;\n  className: string;\n}\n\nexport class JoinRoomButton extends React.Component<\n  SimplePeerReactJoinRoomButtonProps &\n    React.DetailedHTMLProps<\n      React.ButtonHTMLAttributes<HTMLButtonElement>,\n      HTMLButtonElement\n    >,\n  {}\n> {\n  readonly state = {};\n\n  componentDidMount(): void {\n    let state = ReactSimplePeerState.value;\n    state.emitJoinRequest = this.props.join;\n    ReactSimplePeerState.next(state);\n  }\n\n  render() {\n    let { join, children, room, onClick } = this.props;\n    return (\n      <button\n        {...filterReactProps(this.props)}\n        onClick={e => {\n          setRoom(room);\n          join();\n          if (onClick) {\n            onClick(e);\n          }\n        }}\n      >\n        {children}\n      </button>\n    );\n  }\n}\n","import { IReactSimplePeerState } from '../../';\n\nexport function parse(data: string, state: IReactSimplePeerState) {\n  const senderId: string = data.substr(0, 20);\n  const command: string = data.substr(20, 20);\n\n  if (state.commands.get(command)) {\n    try {\n      state.commands.get(command)!(senderId, data.substr(40), state);\n    } catch (e) {\n      console.warn(e);\n    }\n  }\n\n  return senderId;\n}\n","import { Instance } from 'simple-peer';\nimport { ReactSimplePeerState } from '../..';\nimport { deflate_encode_raw } from 'wasm-flate';\n\nexport async function send(\n  pc: Instance,\n  command: string,\n  data?: string | ArrayBuffer | null\n) {\n  try {\n    pc.send(\n      deflate_encode_raw(\n        new Uint8Array(\n          Buffer.from(`${ReactSimplePeerState.value.id}${command}${data}`)\n        )\n      )\n    );\n    return true;\n  } catch (e) {\n    console.warn(\n      'An error occurred when trying to send data to peer: Failed to reach peer'\n    );\n    return false;\n  }\n}\n","import { Instance } from 'simple-peer';\nimport { ReactSimplePeerState, ReactSimplePeerStatusState } from '../';\nimport { Status } from '../';\nimport { parse } from '../Commands/Tools/parse';\nimport { send } from '../Commands/Tools/send';\nimport { deflate_decode_raw } from 'wasm-flate';\n\nexport function handlePeerConnection(\n  pc: Instance,\n  openConnectionAsInitiator: boolean\n) {\n  pc.on('connect', async () => {\n    if (openConnectionAsInitiator) {\n      await send(\n        pc,\n        'OPEN_CNTS_AS_INIT___',\n        JSON.stringify(ReactSimplePeerState.value.peers)\n      );\n    }\n    let state = ReactSimplePeerState.value;\n    let model = state.model;\n    let peers = Array.from(state.connections.keys());\n    await send(\n      pc,\n      'SYNC_MODEL_DATA_____',\n      JSON.stringify({ model: model, peers: peers })\n    );\n  });\n\n  pc.on('data', data => {\n    if (\n      !(pc as any).initiator &&\n      ReactSimplePeerState.value.connections.size === 0\n    ) {\n      ReactSimplePeerStatusState.next(Status.CONNECTING_TO_EXISTING_PEERS);\n    }\n\n    parse(\n      new TextDecoder('utf-8').decode(deflate_decode_raw(data)),\n      ReactSimplePeerState.value\n    );\n\n    ReactSimplePeerState.next(ReactSimplePeerState.value);\n  });\n}\n","import { IReactSimplePeerState } from '../';\nimport SimplePeer, { SignalData, Options } from 'simple-peer';\nimport freeice from 'freeice';\nimport { getSignalData } from '../Commands/getSignalData';\nimport { ReactSimplePeerState } from '../';\nimport { handlePeerConnection } from '../Commands/handlePeerConnection';\n\nexport async function createExistingPeersOffers(\n  peers: { [key: string]: any },\n  state: IReactSimplePeerState\n) {\n  return Object.fromEntries(\n    await Promise.all(\n      Object.entries(peers)\n        .filter((set: [string, string]) => set[0] !== state.id)\n        .map(async (set: [string, SignalData]) => {\n          let config: Options = {\n            initiator: true,\n            trickle: false,\n            config: { iceServers: freeice() },\n          };\n\n          if (state.model.stream) {\n            config.stream = state.model.stream;\n          }\n\n          let pc = new SimplePeer(config);\n\n          handlePeerConnection(pc, false);\n\n          pc.on('stream', async (stream: Promise<MediaStream>) => {\n            if (state.connections.get(set[0])) {\n              state.connections.get(set[0])!.model.stream = await stream;\n            }\n          });\n\n          let signalData = await getSignalData(pc);\n          set.splice(1, 1, signalData);\n\n          let connection = state.connections.get(set[0]);\n          state.connections.set(\n            set[0],\n            connection || { model: { connection: pc, stream: null }, peers: [] }\n          );\n          ReactSimplePeerState.next(state);\n\n          return set;\n        })\n    )\n  );\n}\n","import { IReactSimplePeerState } from '../';\nimport { SignalData } from 'simple-peer';\nimport { createExistingPeersOffers } from './createExistingPeersOffers';\n\nexport async function openConnectionsAsInitiator(\n  _: string,\n  data: string,\n  state: IReactSimplePeerState\n) {\n  const peers = JSON.parse(data);\n\n  if (Object.entries(peers).length) {\n    const offers: {\n      [key: string]: SignalData;\n    } = await createExistingPeersOffers(peers, state);\n    state.emitInitiatorOffers(offers, state.id, state.room!);\n  }\n}\n","import { IReactSimplePeerState } from '../';\nimport { ReactSimplePeerState } from '../';\n\nexport function syncModelData(\n  senderId: string,\n  data: string,\n  state: IReactSimplePeerState\n) {\n  if (state.connections.get(senderId)) {\n    let syncData = JSON.parse(data);\n\n    let model = state.connections.get(senderId)!.model;\n\n    state.connections.set(senderId, {\n      peers: syncData.peers,\n      model: {\n        ...syncData.model,\n        connection: model.connection,\n        stream: model.stream,\n      },\n    });\n\n    ReactSimplePeerState.next(state);\n  }\n}\n","import freeice from 'freeice';\nimport SimplePeer, { SignalData, Options } from 'simple-peer';\nimport { ReactSimplePeerState, ReactSimplePeerStatusState } from '../';\nimport { Status } from '../';\nimport { getSignalData } from '../Commands/getSignalData';\nimport { handlePeerConnection } from './handlePeerConnection';\n\nexport async function processJoinResponse(\n  offer: SignalData,\n  id: string,\n  room: string\n) {\n  let state = ReactSimplePeerState.value;\n\n  if (state.connections.size === 0) {\n    ReactSimplePeerStatusState.next(Status.RECEIVING_RESPONSE_ACCESS);\n  }\n\n  let config: Options = {\n    initiator: false,\n    trickle: false,\n    config: { iceServers: freeice() },\n  };\n\n  if (state.model.stream) {\n    config.stream = state.model.stream;\n  }\n\n  state.peerConnection = new SimplePeer(config);\n\n  state.peerConnection.on('stream', (stream: MediaStream) => {\n    if (id) {\n      state.connections.set(id, {\n        model: { connection: state.peerConnection, stream },\n        peers: [],\n      });\n    }\n  });\n\n  state.peerConnection.signal(offer);\n  const signalData = await getSignalData(state.peerConnection);\n\n  if (state.connections.size === 0) {\n    ReactSimplePeerStatusState.next(Status.JOINING_SESSION);\n  }\n\n  state.emitJoinAck(signalData, room, id, state.id);\n\n  handlePeerConnection(state.peerConnection, false);\n\n  ReactSimplePeerState.next(state);\n}\n","import {\n  ClientOffer,\n  ReactSimplePeerState,\n  ReactSimplePeerStatusState,\n  Status,\n} from '../';\nimport { handlePeerConnection } from './handlePeerConnection';\nimport { send } from '../Commands/Tools/send';\n\nexport function processClientOffer(\n  data: ClientOffer,\n  id: string,\n  roomCreator: boolean,\n  emitterPeerId: string\n) {\n  let state = ReactSimplePeerState.value;\n\n  if (roomCreator) {\n    handlePeerConnection(state.peerConnection, true);\n    let connection = state.connections.get(emitterPeerId);\n    state.connections.set(\n      emitterPeerId,\n      connection || {\n        model: { connection: state.peerConnection, stream: null },\n        peers: [],\n      }\n    );\n    ReactSimplePeerState.next(state);\n  }\n\n  if (id && state.connections.get(emitterPeerId)) {\n    const peerConnection = state.connections.get(emitterPeerId);\n    handlePeerConnection(peerConnection!.model.connection, false);\n    state.peerConnection = peerConnection!.model.connection;\n    ReactSimplePeerState.next(state);\n  }\n\n  let retry = async () => {\n    let relayPeer = Array.from(\n      ReactSimplePeerState.value.connections.values()\n    ).find(peer => {\n      return peer.peers.includes(emitterPeerId);\n    });\n\n    if (\n      !relayPeer ||\n      (relayPeer &&\n        !(await send(\n          relayPeer.model.connection,\n          'TELL_HIM_TO_RETRY___',\n          emitterPeerId\n        )))\n    ) {\n      setTimeout(async () => await retry(), Math.ceil(Math.random() * 1000));\n    }\n  };\n\n  state.peerConnection.on('error', async (e: any) => {\n    if (e.code === 'ERR_SET_REMOTE_DESCRIPTION') {\n      console.warn(\n        'Encountered an error while trying to signal incoming offer, retrying'\n      );\n      setTimeout(async () => await retry(), Math.ceil(Math.random() * 1000));\n      return;\n    }\n  });\n\n  state.peerConnection.signal(data.offer);\n  state.peers = data.peers;\n\n  ReactSimplePeerStatusState.next(Status.IDLE);\n\n  ReactSimplePeerState.next(state);\n}\n","import { IReactSimplePeerState } from '../.';\nimport SimplePeer, { Options } from 'simple-peer';\nimport freeice from 'freeice';\nimport { getSignalData } from './getSignalData';\nimport { handlePeerConnection } from './handlePeerConnection';\nimport { send } from './Tools/send';\n\nexport async function initiatorOffer(\n  _: string,\n  str: string,\n  state: IReactSimplePeerState\n) {\n  const data = JSON.parse(str);\n  const offer = JSON.parse(data.offer);\n  const id = data.id;\n\n  let config: Options = {\n    initiator: false,\n    trickle: false,\n    config: { iceServers: freeice() },\n  };\n\n  if (state.model.stream) {\n    config.stream = state.model.stream;\n  }\n\n  const peerConnection = new SimplePeer(config);\n\n  peerConnection.signal(offer);\n  const signalData = await getSignalData(state.peerConnection);\n\n  send(\n    peerConnection,\n    'NON_INITIATOR_OFFER_',\n    JSON.stringify({ id: state.id, offer: signalData })\n  );\n\n  handlePeerConnection(peerConnection, false);\n\n  let connection = state.connections.get(id);\n  state.connections.set(\n    id,\n    connection || {\n      model: { connection: peerConnection, stream: null },\n      peers: [],\n    }\n  );\n}\n","import { IReactSimplePeerState, ReactSimplePeerState } from '../.';\nimport { handlePeerConnection } from './handlePeerConnection';\n\nexport async function nonInitiatorOffer(\n  _: string,\n  str: string,\n  state: IReactSimplePeerState\n) {\n  const data = JSON.parse(str);\n  const offer = data.offer;\n  const id = data.id;\n\n  handlePeerConnection(state.peerConnection, true);\n  let connection = state.connections.get(id);\n  state.connections.set(\n    id,\n    connection || {\n      model: { connection: state.peerConnection, stream: null },\n      peers: [],\n    }\n  );\n\n  state.peerConnection.signal(offer);\n\n  ReactSimplePeerState.next(state);\n}\n","import { IReactSimplePeerState } from '../';\nimport { send } from './Tools/send';\n\nexport async function tellHimToRetry(\n  _: string,\n  data: string,\n  state: IReactSimplePeerState\n) {\n  let target = state.connections.get(data);\n\n  if (target) {\n    await send(target.model.connection, 'RETRY_______________');\n  }\n}\n","import { IReactSimplePeerState } from '../';\nimport { ReactSimplePeerState } from '../';\nimport { initState } from '../state';\n\nexport function retry(_: string, _1: string, state: IReactSimplePeerState) {\n  ReactSimplePeerState.next(initState);\n  setTimeout(() => state.emitJoinRequest(), Math.ceil(Math.random() * 1000));\n}\n","import { SignalData } from 'simple-peer';\nimport { ReactElement } from 'react';\nimport React from 'react';\nimport { ClientOffer, JoinRequest, ReactSimplePeerState } from '../';\nimport { openConnectionsAsInitiator } from '../Commands/openConnectionAsInitiator';\nimport { syncModelData } from '../Commands/syncModelData';\nimport { processOfferRequest } from '../Commands/processOfferRequest';\nimport { processJoinResponse } from '../Commands/processJoinResponse';\nimport { processClientOffer } from '../Commands/processClientOffer';\nimport { initiatorOffer } from '../Commands/InitiatorOffer';\nimport { nonInitiatorOffer } from '../Commands/nonInitiatorOffer';\nimport { tellHimToRetry } from '../Commands/tellHimToRetry';\nimport { retry } from '../Commands/retry';\n\ninterface SimplePeerSetupProps {\n  children: ReactElement | ReactElement[];\n  onJoinResponse: (\n    processJoinResponse: (\n      offer: SignalData,\n      id: string,\n      room: string,\n      roomCreatorId: string\n    ) => void\n  ) => void;\n  onClientOffer: (\n    processClientOffer: (\n      offer: ClientOffer,\n      id: string,\n      isRoomCreator: boolean,\n      emitterId: string\n    ) => void\n  ) => void;\n  onOfferRequest: (processOfferRequest: (request: JoinRequest) => void) => void;\n  onLeaving: (processLeaving: (id: string) => void) => void;\n  emitOfferResponse: (joinRequest: JoinRequest, signalData: SignalData) => void;\n  emitInitiatorOffers: (\n    offers: { [key: string]: SignalData },\n    id: string,\n    room: string\n  ) => void;\n  emitJoinAck: (\n    signalData: SignalData,\n    room: string,\n    recievedId: string,\n    id: string\n  ) => void;\n}\n\nexport class Setup extends React.Component<SimplePeerSetupProps, {}> {\n  readonly state = {};\n\n  constructor(props: SimplePeerSetupProps) {\n    super(props);\n\n    const {\n      onJoinResponse,\n      onClientOffer,\n      onOfferRequest,\n      onLeaving,\n      emitOfferResponse,\n      emitInitiatorOffers,\n      emitJoinAck,\n    } = this.props;\n    let state = ReactSimplePeerState.value;\n\n    state.commands.set('OPEN_CNTS_AS_INIT___', openConnectionsAsInitiator);\n    state.commands.set('SYNC_MODEL_DATA_____', syncModelData);\n    state.commands.set('INITIATOR_OFFER_____', initiatorOffer);\n    state.commands.set('NON_INITIATOR_OFFER_', nonInitiatorOffer);\n    state.commands.set('TELL_HIM_TO_RETRY___', tellHimToRetry);\n    state.commands.set('RETRY_______________', retry);\n\n    state.emitOfferResponse = emitOfferResponse;\n    state.emitInitiatorOffers = emitInitiatorOffers;\n    state.emitJoinAck = emitJoinAck;\n\n    onOfferRequest(processOfferRequest);\n    onJoinResponse(processJoinResponse);\n    onClientOffer(processClientOffer);\n    onLeaving(() => console.log('TODO: Implement processLeaving'));\n\n    ReactSimplePeerState.next(state);\n  }\n\n  render() {\n    return this.props.children || <></>;\n  }\n}\n","import React, { ReactElement } from 'react';\nimport { ReactSimplePeerModel, ReactSimplePeerState } from '../index';\n\ninterface PeersProps {\n  children: (\n    connections: ReactSimplePeerModel[]\n  ) => void | ReactElement | ReactElement[];\n}\n\ninterface PeersState {\n  connections: ReactSimplePeerModel[];\n}\n\nexport class Peers extends React.Component<PeersProps, PeersState> {\n  readonly state = {\n    connections: [],\n  };\n\n  componentDidMount(): void {\n    ReactSimplePeerState.subscribe(state => {\n      this.setState({\n        connections: Array.from(state.connections).map(set => set[1].model),\n      });\n    });\n  }\n\n  render() {\n    const { children } = this.props;\n    return children(this.state.connections) || <></>;\n  }\n}\n","export const ReactSimplePeerStatus: { [key: string]: string } = {\n  IDLE: 'Waiting for peers',\n  EMITTING_OFFER: 'Emitting offer',\n  REQUESTING_ACCESS: 'Requesting access',\n  RECEIVING_RESPONSE_ACCESS: 'Receiving response access',\n  CONNECTING_TO_EXISTING_PEERS: 'Connecting to existing peers',\n  JOINING_SESSION: 'Joining session',\n};\n","import React from 'react';\nimport { ReactSimplePeerStatusState } from '../';\nimport { ReactSimplePeerStatus } from '../Utils/status';\n\ninterface SimplePeerReactStateTooltipProps {}\n\ninterface SimplePeerReactStateTooltipState {\n  value: string;\n}\n\nexport class State extends React.Component<\n  SimplePeerReactStateTooltipProps,\n  SimplePeerReactStateTooltipState\n> {\n  readonly state = {\n    value: '',\n  };\n\n  componentDidMount(): void {\n    ReactSimplePeerStatusState.subscribe(async status => {\n      this.setState({ value: ReactSimplePeerStatus[status] });\n    });\n  }\n\n  render() {\n    return <>{this.state.value}</>;\n  }\n}\n","import React from 'react';\nimport { ReactSimplePeerModel } from '../';\nimport filterReactProps from 'filter-react-props';\n\ninterface PeerVideoProps {\n  peer: ReactSimplePeerModel;\n}\n\ninterface PeerVideoState {\n  stream: MediaStream | null;\n}\n\nexport class PeerVideo extends React.Component<\n  PeerVideoProps &\n    React.DetailedHTMLProps<\n      React.VideoHTMLAttributes<HTMLVideoElement>,\n      HTMLVideoElement\n    >,\n  PeerVideoState\n> {\n  readonly state = {\n    stream: null,\n  };\n  private video: HTMLVideoElement = document.createElement('video');\n\n  async componentDidUpdate() {\n    this.video.srcObject = await this.props.peer.stream;\n  }\n\n  render() {\n    return (\n      <video\n        {...filterReactProps(this.props)}\n        autoPlay={true}\n        muted={true}\n        ref={(video: HTMLVideoElement) => {\n          this.video = video;\n        }}\n      />\n    );\n  }\n}\n","import { SignalData } from 'simple-peer';\n\nexport class ClientOffer {\n  public offer: SignalData;\n  public peers: { [key: string]: string };\n\n  constructor(offer: SignalData, peers: { [p: string]: string }) {\n    this.offer = offer;\n    this.peers = peers;\n  }\n}\n","export class JoinRequest {\n  public roomId: string;\n  public peerId: string;\n\n  constructor(roomId: string, peerId: string) {\n    this.roomId = roomId;\n    this.peerId = peerId;\n  }\n}\n","import { BehaviorSubject } from 'rxjs';\nimport SimplePeer from 'simple-peer';\nimport { ReactSimplePeerModel } from 'Models/react-simple-peer.model';\nimport { Instance, SignalData } from 'simple-peer';\nimport { JoinRequest } from 'Models/JoinRequest';\nimport { Stack } from 'typed-structures/dist';\nimport { processOfferRequest } from './Commands/processOfferRequest';\nimport { ClientOffer } from 'Models/ClientOffer';\nimport { initState } from './state';\n\nexport { ReactSimplePeerModel } from './Models/react-simple-peer.model';\nexport { JoinRoomButton } from './Components/JoinRoomButton';\nexport { Setup } from './Components/Setup';\nexport { Peers } from './Components/Peers';\nexport { State } from './Components/State';\nexport { PeerVideo } from './Components/PeerVideo';\nexport { ClientOffer } from './Models/ClientOffer';\nexport { JoinRequest } from './Models/JoinRequest';\n\nexport enum Status {\n  IDLE = 'IDLE',\n  EMITTING_OFFER = 'EMITTING_OFFER',\n  REQUESTING_ACCESS = 'REQUESTING_ACCESS',\n  RECEIVING_RESPONSE_ACCESS = 'RECEIVING_RESPONSE_ACCESS',\n  CONNECTING_TO_EXISTING_PEERS = 'CONNECTING_TO_EXISTING_PEERS',\n  JOINING_SESSION = 'JOINING_SESSION',\n}\n\nexport interface IReactSimplePeerState {\n  // State of variables used by connection logic\n  peers: { [key: string]: string };\n  id: string;\n  room: string | null;\n  roomCreatorId: string | null;\n  signalData: SimplePeer.SignalData;\n  connections: Map<string, { model: ReactSimplePeerModel; peers: string[] }>;\n  peerConnection: Instance;\n  commands: Map<string, Function>;\n  model: ReactSimplePeerModel;\n  joinRequests: Stack<JoinRequest>;\n  clientOffers: Stack<[ClientOffer, string, boolean, string]>;\n\n  // Storage of called Functions\n  emitJoinRequest: () => void;\n  emitOfferResponse: (joinRequest: JoinRequest, signalData: SignalData) => void;\n  emitInitiatorOffers: (\n    offers: { [key: string]: SignalData },\n    id: string,\n    room: string\n  ) => void;\n  emitJoinAck: (\n    signalData: SignalData,\n    room: string,\n    receivedId: string,\n    id: string\n  ) => void;\n}\n\nexport const ReactSimplePeerStatusState = new BehaviorSubject<Status>(\n  Status.IDLE\n);\nexport const ReactSimplePeerState = new BehaviorSubject<IReactSimplePeerState>(\n  initState\n);\n\nexport function setModel(model: ReactSimplePeerModel) {\n  let state = ReactSimplePeerState.value;\n  state.model = model;\n  ReactSimplePeerState.next(state);\n}\n\nexport function setRoom(room: string) {\n  let state = ReactSimplePeerState.value;\n  state.room = room;\n  ReactSimplePeerState.next(state);\n}\n\nexport function getId() {\n  return ReactSimplePeerState.value.id;\n}\n\nReactSimplePeerStatusState.subscribe(async status => {\n  if (\n    status === Status.IDLE &&\n    ReactSimplePeerState.value.joinRequests.length()\n  ) {\n    let state = ReactSimplePeerState.value;\n    console.log(state.joinRequests.length());\n    let joinRequest = state.joinRequests.unstack();\n    console.log(state.joinRequests.length());\n    ReactSimplePeerState.next(state);\n    setTimeout(\n      async () => await processOfferRequest(joinRequest),\n      Math.ceil(Math.random() * 1000)\n    );\n  }\n});\n"]},"metadata":{},"sourceType":"module"}