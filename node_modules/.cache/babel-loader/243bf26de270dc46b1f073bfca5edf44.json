{"ast":null,"code":"import { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { isFunction } from '../util/isFunction';\nimport { connect } from './connect';\nexport function multicast(subjectOrSubjectFactory, selector) {\n  var subjectFactory = isFunction(subjectOrSubjectFactory) ? subjectOrSubjectFactory : function () {\n    return subjectOrSubjectFactory;\n  };\n  if (isFunction(selector)) {\n    return connect(selector, {\n      connector: subjectFactory\n    });\n  }\n  return function (source) {\n    return new ConnectableObservable(source, subjectFactory);\n  };\n}","map":{"version":3,"mappings":"AAEA,SAASA,qBAAqB,QAAQ,qCAAqC;AAE3E,SAASC,UAAU,QAAQ,oBAAoB;AAC/C,SAASC,OAAO,QAAQ,WAAW;AA4EnC,OAAM,SAAUC,SAAS,CACvBC,uBAAwD,EACxDC,QAAmD;EAEnD,IAAMC,cAAc,GAAGL,UAAU,CAACG,uBAAuB,CAAC,GAAGA,uBAAuB,GAAG;IAAM,8BAAuB;EAAvB,CAAuB;EAEpH,IAAIH,UAAU,CAACI,QAAQ,CAAC,EAAE;IAIxB,OAAOH,OAAO,CAACG,QAAQ,EAAE;MACvBE,SAAS,EAAED;KACZ,CAAC;;EAGJ,OAAO,UAACE,MAAqB;IAAK,WAAIR,qBAAqB,CAAMQ,MAAM,EAAEF,cAAc,CAAC;EAAtD,CAAsD;AAC1F","names":["ConnectableObservable","isFunction","connect","multicast","subjectOrSubjectFactory","selector","subjectFactory","connector","source"],"sources":["C:\\Users\\Amali\\Desktop\\Building_the_IoT_w._P2P_and_Cloud_Computing\\IoTProject\\node_modules\\rxjs\\src\\internal\\operators\\multicast.ts"],"sourcesContent":["import { Subject } from '../Subject';\r\nimport { Observable } from '../Observable';\r\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\r\nimport { OperatorFunction, UnaryFunction, ObservedValueOf, ObservableInput } from '../types';\r\nimport { isFunction } from '../util/isFunction';\r\nimport { connect } from './connect';\r\n\r\n/**\r\n * An operator that creates a {@link ConnectableObservable}, that when connected,\r\n * with the `connect` method, will use the provided subject to multicast the values\r\n * from the source to all consumers.\r\n *\r\n * @param subject The subject to multicast through.\r\n * @return A function that returns a {@link ConnectableObservable}\r\n * @deprecated Will be removed in v8. To create a connectable observable, use {@link connectable}.\r\n * If you're using {@link refCount} after `multicast`, use the {@link share} operator instead.\r\n * `multicast(subject), refCount()` is equivalent to\r\n * `share({ connector: () => subject, resetOnError: false, resetOnComplete: false, resetOnRefCountZero: false })`.\r\n * Details: https://rxjs.dev/deprecations/multicasting\r\n */\r\nexport function multicast<T>(subject: Subject<T>): UnaryFunction<Observable<T>, ConnectableObservable<T>>;\r\n\r\n/**\r\n * Because this is deprecated in favor of the {@link connect} operator, and was otherwise poorly documented,\r\n * rather than duplicate the effort of documenting the same behavior, please see documentation for the\r\n * {@link connect} operator.\r\n *\r\n * @param subject The subject used to multicast.\r\n * @param selector A setup function to setup the multicast\r\n * @return A function that returns an observable that mirrors the observable returned by the selector.\r\n * @deprecated Will be removed in v8. Use the {@link connect} operator instead.\r\n * `multicast(subject, selector)` is equivalent to\r\n * `connect(selector, { connector: () => subject })`.\r\n * Details: https://rxjs.dev/deprecations/multicasting\r\n */\r\nexport function multicast<T, O extends ObservableInput<any>>(\r\n  subject: Subject<T>,\r\n  selector: (shared: Observable<T>) => O\r\n): OperatorFunction<T, ObservedValueOf<O>>;\r\n\r\n/**\r\n * An operator that creates a {@link ConnectableObservable}, that when connected,\r\n * with the `connect` method, will use the provided subject to multicast the values\r\n * from the source to all consumers.\r\n *\r\n * @param subjectFactory A factory that will be called to create the subject. Passing a function here\r\n * will cause the underlying subject to be \"reset\" on error, completion, or refCounted unsubscription of\r\n * the source.\r\n * @return A function that returns a {@link ConnectableObservable}\r\n * @deprecated Will be removed in v8. To create a connectable observable, use {@link connectable}.\r\n * If you're using {@link refCount} after `multicast`, use the {@link share} operator instead.\r\n * `multicast(() => new BehaviorSubject('test')), refCount()` is equivalent to\r\n * `share({ connector: () => new BehaviorSubject('test') })`.\r\n * Details: https://rxjs.dev/deprecations/multicasting\r\n */\r\nexport function multicast<T>(subjectFactory: () => Subject<T>): UnaryFunction<Observable<T>, ConnectableObservable<T>>;\r\n\r\n/**\r\n * Because this is deprecated in favor of the {@link connect} operator, and was otherwise poorly documented,\r\n * rather than duplicate the effort of documenting the same behavior, please see documentation for the\r\n * {@link connect} operator.\r\n *\r\n * @param subjectFactory A factory that creates the subject used to multicast.\r\n * @param selector A function to setup the multicast and select the output.\r\n * @return A function that returns an observable that mirrors the observable returned by the selector.\r\n * @deprecated Will be removed in v8. Use the {@link connect} operator instead.\r\n * `multicast(subjectFactory, selector)` is equivalent to\r\n * `connect(selector, { connector: subjectFactory })`.\r\n * Details: https://rxjs.dev/deprecations/multicasting\r\n */\r\nexport function multicast<T, O extends ObservableInput<any>>(\r\n  subjectFactory: () => Subject<T>,\r\n  selector: (shared: Observable<T>) => O\r\n): OperatorFunction<T, ObservedValueOf<O>>;\r\n\r\n/**\r\n * @deprecated Will be removed in v8. Use the {@link connectable} observable, the {@link connect} operator or the\r\n * {@link share} operator instead. See the overloads below for equivalent replacement examples of this operator's\r\n * behaviors.\r\n * Details: https://rxjs.dev/deprecations/multicasting\r\n */\r\nexport function multicast<T, R>(\r\n  subjectOrSubjectFactory: Subject<T> | (() => Subject<T>),\r\n  selector?: (source: Observable<T>) => Observable<R>\r\n): OperatorFunction<T, R> {\r\n  const subjectFactory = isFunction(subjectOrSubjectFactory) ? subjectOrSubjectFactory : () => subjectOrSubjectFactory;\r\n\r\n  if (isFunction(selector)) {\r\n    // If a selector function is provided, then we're a \"normal\" operator that isn't\r\n    // going to return a ConnectableObservable. We can use `connect` to do what we\r\n    // need to do.\r\n    return connect(selector, {\r\n      connector: subjectFactory,\r\n    });\r\n  }\r\n\r\n  return (source: Observable<T>) => new ConnectableObservable<any>(source, subjectFactory);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}