{"ast":null,"code":"/**\n  # normalice\n\n  Normalize an ice server configuration object (or plain old string) into a format\n  that is usable in all browsers supporting WebRTC.  Primarily this module is designed\n  to help with the transition of the `url` attribute of the configuration object to\n  the `urls` attribute.\n\n  ## Example Usage\n\n  <<< examples/simple.js\n\n**/\n\nvar protocols = ['stun:', 'turn:'];\nmodule.exports = function (input) {\n  var url = (input || {}).url || input;\n  var protocol;\n  var parts;\n  var output = {};\n\n  // if we don't have a string url, then allow the input to passthrough\n  if (typeof url != 'string' && !(url instanceof String)) {\n    return input;\n  }\n\n  // trim the url string, and convert to an array\n  url = url.trim();\n\n  // if the protocol is not known, then passthrough\n  protocol = protocols[protocols.indexOf(url.slice(0, 5))];\n  if (!protocol) {\n    return input;\n  }\n\n  // now let's attack the remaining url parts\n  url = url.slice(5);\n  parts = url.split('@');\n  output.username = input.username;\n  output.credential = input.credential;\n  // if we have an authentication part, then set the credentials\n  if (parts.length > 1) {\n    url = parts[1];\n    parts = parts[0].split(':');\n\n    // add the output credential and username\n    output.username = parts[0];\n    output.credential = (input || {}).credential || parts[1] || '';\n  }\n  output.url = protocol + url;\n  output.urls = [output.url];\n  return output;\n};","map":{"version":3,"names":["protocols","module","exports","input","url","protocol","parts","output","String","trim","indexOf","slice","split","username","credential","length","urls"],"sources":["C:/Users/Amali/Desktop/Building_the_IoT_w._P2P_and_Cloud_Computing/IoTProject/node_modules/normalice/index.js"],"sourcesContent":["/**\n  # normalice\n\n  Normalize an ice server configuration object (or plain old string) into a format\n  that is usable in all browsers supporting WebRTC.  Primarily this module is designed\n  to help with the transition of the `url` attribute of the configuration object to\n  the `urls` attribute.\n\n  ## Example Usage\n\n  <<< examples/simple.js\n\n**/\n\nvar protocols = [\n  'stun:',\n  'turn:'\n];\n\nmodule.exports = function(input) {\n  var url = (input || {}).url || input;\n  var protocol;\n  var parts;\n  var output = {};\n\n  // if we don't have a string url, then allow the input to passthrough\n  if (typeof url != 'string' && (! (url instanceof String))) {\n    return input;\n  }\n\n  // trim the url string, and convert to an array\n  url = url.trim();\n\n  // if the protocol is not known, then passthrough\n  protocol = protocols[protocols.indexOf(url.slice(0, 5))];\n  if (! protocol) {\n    return input;\n  }\n\n  // now let's attack the remaining url parts\n  url = url.slice(5);\n  parts = url.split('@');\n\n  output.username = input.username;\n  output.credential = input.credential;\n  // if we have an authentication part, then set the credentials\n  if (parts.length > 1) {\n    url = parts[1];\n    parts = parts[0].split(':');\n\n    // add the output credential and username\n    output.username = parts[0];\n    output.credential = (input || {}).credential || parts[1] || '';\n  }\n\n  output.url = protocol + url;\n  output.urls = [ output.url ];\n\n  return output;\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIA,SAAS,GAAG,CACd,OAAO,EACP,OAAO,CACR;AAEDC,MAAM,CAACC,OAAO,GAAG,UAASC,KAAK,EAAE;EAC/B,IAAIC,GAAG,GAAG,CAACD,KAAK,IAAI,CAAC,CAAC,EAAEC,GAAG,IAAID,KAAK;EACpC,IAAIE,QAAQ;EACZ,IAAIC,KAAK;EACT,IAAIC,MAAM,GAAG,CAAC,CAAC;;EAEf;EACA,IAAI,OAAOH,GAAG,IAAI,QAAQ,IAAK,EAAGA,GAAG,YAAYI,MAAM,CAAE,EAAE;IACzD,OAAOL,KAAK;EACd;;EAEA;EACAC,GAAG,GAAGA,GAAG,CAACK,IAAI,EAAE;;EAEhB;EACAJ,QAAQ,GAAGL,SAAS,CAACA,SAAS,CAACU,OAAO,CAACN,GAAG,CAACO,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;EACxD,IAAI,CAAEN,QAAQ,EAAE;IACd,OAAOF,KAAK;EACd;;EAEA;EACAC,GAAG,GAAGA,GAAG,CAACO,KAAK,CAAC,CAAC,CAAC;EAClBL,KAAK,GAAGF,GAAG,CAACQ,KAAK,CAAC,GAAG,CAAC;EAEtBL,MAAM,CAACM,QAAQ,GAAGV,KAAK,CAACU,QAAQ;EAChCN,MAAM,CAACO,UAAU,GAAGX,KAAK,CAACW,UAAU;EACpC;EACA,IAAIR,KAAK,CAACS,MAAM,GAAG,CAAC,EAAE;IACpBX,GAAG,GAAGE,KAAK,CAAC,CAAC,CAAC;IACdA,KAAK,GAAGA,KAAK,CAAC,CAAC,CAAC,CAACM,KAAK,CAAC,GAAG,CAAC;;IAE3B;IACAL,MAAM,CAACM,QAAQ,GAAGP,KAAK,CAAC,CAAC,CAAC;IAC1BC,MAAM,CAACO,UAAU,GAAG,CAACX,KAAK,IAAI,CAAC,CAAC,EAAEW,UAAU,IAAIR,KAAK,CAAC,CAAC,CAAC,IAAI,EAAE;EAChE;EAEAC,MAAM,CAACH,GAAG,GAAGC,QAAQ,GAAGD,GAAG;EAC3BG,MAAM,CAACS,IAAI,GAAG,CAAET,MAAM,CAACH,GAAG,CAAE;EAE5B,OAAOG,MAAM;AACf,CAAC"},"metadata":{},"sourceType":"script"}