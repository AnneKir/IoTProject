{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { AsyncAction } from './AsyncAction';\nimport { animationFrameProvider } from './animationFrameProvider';\nvar AnimationFrameAction = function (_super) {\n  __extends(AnimationFrameAction, _super);\n  function AnimationFrameAction(scheduler, work) {\n    var _this = _super.call(this, scheduler, work) || this;\n    _this.scheduler = scheduler;\n    _this.work = work;\n    return _this;\n  }\n  AnimationFrameAction.prototype.requestAsyncId = function (scheduler, id, delay) {\n    if (delay === void 0) {\n      delay = 0;\n    }\n    if (delay !== null && delay > 0) {\n      return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);\n    }\n    scheduler.actions.push(this);\n    return scheduler._scheduled || (scheduler._scheduled = animationFrameProvider.requestAnimationFrame(function () {\n      return scheduler.flush(undefined);\n    }));\n  };\n  AnimationFrameAction.prototype.recycleAsyncId = function (scheduler, id, delay) {\n    var _a;\n    if (delay === void 0) {\n      delay = 0;\n    }\n    if (delay != null ? delay > 0 : this.delay > 0) {\n      return _super.prototype.recycleAsyncId.call(this, scheduler, id, delay);\n    }\n    var actions = scheduler.actions;\n    if (id != null && ((_a = actions[actions.length - 1]) === null || _a === void 0 ? void 0 : _a.id) !== id) {\n      animationFrameProvider.cancelAnimationFrame(id);\n      scheduler._scheduled = undefined;\n    }\n    return undefined;\n  };\n  return AnimationFrameAction;\n}(AsyncAction);\nexport { AnimationFrameAction };","map":{"version":3,"mappings":";AAAA,SAASA,WAAW,QAAQ,eAAe;AAG3C,SAASC,sBAAsB,QAAQ,0BAA0B;AAGjE;EAA6CC;EAC3C,8BAAsBC,SAAkC,EAAYC,IAAmD;IAAvH,YACEC,kBAAMF,SAAS,EAAEC,IAAI,CAAC;IADFE,eAAS,GAATH,SAAS;IAAqCG,UAAI,GAAJF,IAAI;;EAExE;EAEUG,6CAAc,GAAxB,UAAyBJ,SAAkC,EAAEK,EAAgB,EAAEC,KAAiB;IAAjB;MAAAA,SAAiB;IAAA;IAE9F,IAAIA,KAAK,KAAK,IAAI,IAAIA,KAAK,GAAG,CAAC,EAAE;MAC/B,OAAOJ,iBAAMK,cAAc,YAACP,SAAS,EAAEK,EAAE,EAAEC,KAAK,CAAC;;IAGnDN,SAAS,CAACQ,OAAO,CAACC,IAAI,CAAC,IAAI,CAAC;IAI5B,OAAOT,SAAS,CAACU,UAAU,KAAKV,SAAS,CAACU,UAAU,GAAGZ,sBAAsB,CAACa,qBAAqB,CAAC;MAAM,gBAAS,CAACC,KAAK,CAACC,SAAS,CAAC;IAA1B,CAA0B,CAAC,CAAC;EACxI,CAAC;EAEST,6CAAc,GAAxB,UAAyBJ,SAAkC,EAAEK,EAAgB,EAAEC,KAAiB;;IAAjB;MAAAA,SAAiB;IAAA;IAI9F,IAAIA,KAAK,IAAI,IAAI,GAAGA,KAAK,GAAG,CAAC,GAAG,IAAI,CAACA,KAAK,GAAG,CAAC,EAAE;MAC9C,OAAOJ,iBAAMY,cAAc,YAACd,SAAS,EAAEK,EAAE,EAAEC,KAAK,CAAC;;IAK3C,WAAO,GAAKN,SAAS,QAAd;IACf,IAAIK,EAAE,IAAI,IAAI,IAAI,cAAO,CAACG,OAAO,CAACO,MAAM,GAAG,CAAC,CAAC,0CAAEV,EAAE,MAAKA,EAAE,EAAE;MACxDP,sBAAsB,CAACkB,oBAAoB,CAACX,EAAY,CAAC;MACzDL,SAAS,CAACU,UAAU,GAAGG,SAAS;;IAGlC,OAAOA,SAAS;EAClB,CAAC;EACH,2BAAC;AAAD,CAAC,CApC4ChB,WAAW","names":["AsyncAction","animationFrameProvider","__extends","scheduler","work","_super","_this","AnimationFrameAction","id","delay","requestAsyncId","actions","push","_scheduled","requestAnimationFrame","flush","undefined","recycleAsyncId","length","cancelAnimationFrame"],"sources":["C:\\Users\\Amali\\Desktop\\Building_the_IoT_w._P2P_and_Cloud_Computing\\IoTProject\\node_modules\\rxjs\\src\\internal\\scheduler\\AnimationFrameAction.ts"],"sourcesContent":["import { AsyncAction } from './AsyncAction';\r\nimport { AnimationFrameScheduler } from './AnimationFrameScheduler';\r\nimport { SchedulerAction } from '../types';\r\nimport { animationFrameProvider } from './animationFrameProvider';\r\nimport { TimerHandle } from './timerHandle';\r\n\r\nexport class AnimationFrameAction<T> extends AsyncAction<T> {\r\n  constructor(protected scheduler: AnimationFrameScheduler, protected work: (this: SchedulerAction<T>, state?: T) => void) {\r\n    super(scheduler, work);\r\n  }\r\n\r\n  protected requestAsyncId(scheduler: AnimationFrameScheduler, id?: TimerHandle, delay: number = 0): TimerHandle {\r\n    // If delay is greater than 0, request as an async action.\r\n    if (delay !== null && delay > 0) {\r\n      return super.requestAsyncId(scheduler, id, delay);\r\n    }\r\n    // Push the action to the end of the scheduler queue.\r\n    scheduler.actions.push(this);\r\n    // If an animation frame has already been requested, don't request another\r\n    // one. If an animation frame hasn't been requested yet, request one. Return\r\n    // the current animation frame request id.\r\n    return scheduler._scheduled || (scheduler._scheduled = animationFrameProvider.requestAnimationFrame(() => scheduler.flush(undefined)));\r\n  }\r\n\r\n  protected recycleAsyncId(scheduler: AnimationFrameScheduler, id?: TimerHandle, delay: number = 0): TimerHandle | undefined {\r\n    // If delay exists and is greater than 0, or if the delay is null (the\r\n    // action wasn't rescheduled) but was originally scheduled as an async\r\n    // action, then recycle as an async action.\r\n    if (delay != null ? delay > 0 : this.delay > 0) {\r\n      return super.recycleAsyncId(scheduler, id, delay);\r\n    }\r\n    // If the scheduler queue has no remaining actions with the same async id,\r\n    // cancel the requested animation frame and set the scheduled flag to\r\n    // undefined so the next AnimationFrameAction will request its own.\r\n    const { actions } = scheduler;\r\n    if (id != null && actions[actions.length - 1]?.id !== id) {\r\n      animationFrameProvider.cancelAnimationFrame(id as number);\r\n      scheduler._scheduled = undefined;\r\n    }\r\n    // Return undefined so the action knows to request a new async id if it's rescheduled.\r\n    return undefined;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}