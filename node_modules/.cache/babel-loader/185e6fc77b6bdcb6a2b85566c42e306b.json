{"ast":null,"code":"import { AsyncSubject } from '../AsyncSubject';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nexport function publishLast() {\n  return function (source) {\n    var subject = new AsyncSubject();\n    return new ConnectableObservable(source, function () {\n      return subject;\n    });\n  };\n}","map":{"version":3,"mappings":"AACA,SAASA,YAAY,QAAQ,iBAAiB;AAC9C,SAASC,qBAAqB,QAAQ,qCAAqC;AAmE3E,OAAM,SAAUC,WAAW;EAEzB,OAAO,UAACC,MAAM;IACZ,IAAMC,OAAO,GAAG,IAAIJ,YAAY,EAAK;IACrC,OAAO,IAAIC,qBAAqB,CAACE,MAAM,EAAE;MAAM,cAAO;IAAP,CAAO,CAAC;EACzD,CAAC;AACH","names":["AsyncSubject","ConnectableObservable","publishLast","source","subject"],"sources":["C:\\Users\\Amali\\Desktop\\Building_the_IoT_w._P2P_and_Cloud_Computing\\IoTProject\\node_modules\\rxjs\\src\\internal\\operators\\publishLast.ts"],"sourcesContent":["import { Observable } from '../Observable';\r\nimport { AsyncSubject } from '../AsyncSubject';\r\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\r\nimport { UnaryFunction } from '../types';\r\n\r\n/**\r\n * Returns a connectable observable sequence that shares a single subscription to the\r\n * underlying sequence containing only the last notification.\r\n *\r\n * ![](publishLast.png)\r\n *\r\n * Similar to {@link publish}, but it waits until the source observable completes and stores\r\n * the last emitted value.\r\n * Similarly to {@link publishReplay} and {@link publishBehavior}, this keeps storing the last\r\n * value even if it has no more subscribers. If subsequent subscriptions happen, they will\r\n * immediately get that last stored value and complete.\r\n *\r\n * ## Example\r\n *\r\n * ```ts\r\n * import { ConnectableObservable, interval, publishLast, tap, take } from 'rxjs';\r\n *\r\n * const connectable = <ConnectableObservable<number>>interval(1000)\r\n *   .pipe(\r\n *     tap(x => console.log('side effect', x)),\r\n *     take(3),\r\n *     publishLast()\r\n *   );\r\n *\r\n * connectable.subscribe({\r\n *   next: x => console.log('Sub. A', x),\r\n *   error: err => console.log('Sub. A Error', err),\r\n *   complete: () => console.log('Sub. A Complete')\r\n * });\r\n *\r\n * connectable.subscribe({\r\n *   next: x => console.log('Sub. B', x),\r\n *   error: err => console.log('Sub. B Error', err),\r\n *   complete: () => console.log('Sub. B Complete')\r\n * });\r\n *\r\n * connectable.connect();\r\n *\r\n * // Results:\r\n * // 'side effect 0'   - after one second\r\n * // 'side effect 1'   - after two seconds\r\n * // 'side effect 2'   - after three seconds\r\n * // 'Sub. A 2'        - immediately after 'side effect 2'\r\n * // 'Sub. B 2'\r\n * // 'Sub. A Complete'\r\n * // 'Sub. B Complete'\r\n * ```\r\n *\r\n * @see {@link ConnectableObservable}\r\n * @see {@link publish}\r\n * @see {@link publishReplay}\r\n * @see {@link publishBehavior}\r\n *\r\n * @return A function that returns an Observable that emits elements of a\r\n * sequence produced by multicasting the source sequence.\r\n * @deprecated Will be removed in v8. To create a connectable observable with an\r\n * {@link AsyncSubject} under the hood, use {@link connectable}.\r\n * `source.pipe(publishLast())` is equivalent to\r\n * `connectable(source, { connector: () => new AsyncSubject(), resetOnDisconnect: false })`.\r\n * If you're using {@link refCount} after `publishLast`, use the {@link share} operator instead.\r\n * `source.pipe(publishLast(), refCount())` is equivalent to\r\n * `source.pipe(share({ connector: () => new AsyncSubject(), resetOnError: false, resetOnComplete: false, resetOnRefCountZero: false }))`.\r\n * Details: https://rxjs.dev/deprecations/multicasting\r\n */\r\nexport function publishLast<T>(): UnaryFunction<Observable<T>, ConnectableObservable<T>> {\r\n  // Note that this has *never* supported a selector function like `publish` and `publishReplay`.\r\n  return (source) => {\r\n    const subject = new AsyncSubject<T>();\r\n    return new ConnectableObservable(source, () => subject);\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}