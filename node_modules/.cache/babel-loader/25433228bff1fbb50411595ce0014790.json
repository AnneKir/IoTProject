{"ast":null,"code":"var _slicedToArray = require(\"C:/Users/Amali/Desktop/Building_the_IoT_w._P2P_and_Cloud_Computing/IoTProject/node_modules/@babel/runtime/helpers/slicedToArray.js\").default;\nvar _createForOfIteratorHelper = require(\"C:/Users/Amali/Desktop/Building_the_IoT_w._P2P_and_Cloud_Computing/IoTProject/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\nvar _classCallCheck = require(\"C:/Users/Amali/Desktop/Building_the_IoT_w._P2P_and_Cloud_Computing/IoTProject/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"C:/Users/Amali/Desktop/Building_the_IoT_w._P2P_and_Cloud_Computing/IoTProject/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar Peer = require('simple-peer');\nvar SimplePeerClientWrapper = /*#__PURE__*/function () {\n  \"use strict\";\n\n  function SimplePeerClientWrapper(socket, debug, simplePeerOptions) {\n    _classCallCheck(this, SimplePeerClientWrapper);\n    this.initPeerRequest = false;\n    this.socket = socket;\n    this.localStream;\n    this.debug = debug;\n    this.connections = [];\n    this.onConnectCallback;\n    this.onDataCallback;\n    this.onStreamCallback;\n    // this.onTrackCallback;\n    this.onCloseCallback;\n    this.onErrorCallback;\n    this.simplePeerOptions;\n    if (typeof simplePeerOptions !== 'undefined') {\n      this.simplePeerOptions = simplePeerOptions;\n    }\n  }\n  _createClass(SimplePeerClientWrapper, [{\n    key: \"setlocalStream\",\n    value: function setlocalStream(stream) {\n      this.localStream = stream;\n    }\n  }, {\n    key: \"init\",\n    value: function init() {\n      this.debug && console.log('running init Peer Client. # of ' + this.connections.length);\n      this.initPeerRequest = true;\n      for (var i = 0; i < this.connections.length; i++) {\n        this.socket.emit('initiate peer', this.connections[i].room);\n        if (this.connections[i].initiator) {\n          this.attemptPeerStart(this.connections[i]);\n        }\n      }\n    }\n  }, {\n    key: \"attemptPeerStart\",\n    value: function attemptPeerStart(connection) {\n      this.debug && console.log('Attempting peer start', connection.peerStarted, connection.roomReady);\n      if (!connection.peerStarted && connection.roomReady) {\n        this.debug && console.log('Creating peer connection');\n        this.createPeerConnection(connection);\n      } else {\n        this.debug && console.log('Not creating peer connection');\n      }\n    }\n  }, {\n    key: \"createPeerConnection\",\n    value: function createPeerConnection(connection) {\n      var _this = this;\n      this.debug && console.log('creating simple peer');\n      var options = this._getPeerOptions(connection.initiator);\n      var peer = new Peer(options);\n\n      // If initiator,peer.on'signal' will fire right away, if not it waits for signal\n      // https://github.com/feross/simple-peer#peeronsignal-data--\n      peer.on('signal', function (data) {\n        return _this._sendSignal(data, connection);\n      });\n      peer.on('connect', function () {\n        return _this._handleConnection();\n      });\n      peer.on('error', function (err) {\n        return _this._handleError(err);\n      });\n      peer.on('stream', function (stream) {\n        return _this._handleStream(stream);\n      });\n      peer.on('data', function (data) {\n        return _this._handleData(data);\n      });\n      // peer.on('track', (track, stream) =>\n      //   this._handleTrack(track, stream),\n      // );\n      peer.on('close', function () {\n        return _this._handleClose();\n      });\n      connection.peerStarted = true;\n      connection.peer = peer;\n    }\n  }, {\n    key: \"isPeerStarted\",\n    value: function isPeerStarted() {\n      var peerStarted = false;\n\n      // if any peer connection is not started then it returns false\n      for (var i = 0; i < this.connections.length; i++) {\n        peerStarted = this.connections[i].peerStarted;\n      }\n      return peerStarted;\n    }\n  }, {\n    key: \"setEventCallback\",\n    value: function setEventCallback(event, callback) {\n      switch (event) {\n        case 'connect':\n          this.onConnectCallback = callback;\n          break;\n        case 'data':\n          this.onDataCallback = callback;\n          break;\n        case 'stream':\n          this.onStreamCallback = callback;\n          break;\n        // case 'track':\n        //   this.onTrackCallback = callback;\n        //   break;\n        case 'close':\n          this.onCloseCallback = callback;\n          break;\n        case 'error':\n          this.onErrorCallback = callback;\n      }\n    }\n  }, {\n    key: \"sendData\",\n    value: function sendData(data) {\n      var msg = JSON.stringify({\n        data: data,\n        userId: this.socket.id\n      });\n      for (var i = 0; i < this.connections.length; i++) {\n        var peer = this.connections[i];\n        if (peer.peerStarted) {\n          var peerConn = peer.peer;\n          if (peerConn.connected) {\n            peerConn.write(msg);\n          }\n        }\n      }\n    }\n  }, {\n    key: \"terminateSession\",\n    value: function terminateSession() {\n      for (var i = 0; i < this.connections.length; i++) {\n        var peer = this.connections[i].peer;\n        peer.destroy(); // simple-peer method to close and cleanup peer connection\n        this.connections[i].peer = null;\n        this.connections[i].peerStarted = false;\n      }\n      this.socket.emit('hangup');\n      this.socket.close();\n    }\n  }, {\n    key: \"_getPeerOptions\",\n    value: function _getPeerOptions(initiator) {\n      var options = {\n        initiator: initiator\n      };\n      if (typeof this.localStream !== 'undefined') {\n        options.stream = this.localStream;\n      }\n      if (typeof this.simplePeerOptions !== 'undefined') {\n        var spOptions = Object.entries(this.simplePeerOptions);\n        if (spOptions.length > 0) {\n          var _iterator = _createForOfIteratorHelper(spOptions),\n            _step;\n          try {\n            for (_iterator.s(); !(_step = _iterator.n()).done;) {\n              var _step$value = _slicedToArray(_step.value, 2),\n                key = _step$value[0],\n                value = _step$value[1];\n              options[key] = value;\n            }\n          } catch (err) {\n            _iterator.e(err);\n          } finally {\n            _iterator.f();\n          }\n        }\n      }\n      return options;\n    }\n  }, {\n    key: \"_sendSignal\",\n    value: function _sendSignal(data, connection) {\n      this.debug && console.log('sending signal');\n      var message = {\n        room: connection.room,\n        data: JSON.stringify(data)\n      };\n      this.socket.emit('sending signal', message);\n    }\n  }, {\n    key: \"_handleConnection\",\n    value: function _handleConnection() {\n      this.debug && console.log('SIMPLE PEER IS CONNECTED');\n      if (this.onConnectCallback) this.onConnectCallback();\n    }\n  }, {\n    key: \"_handleStream\",\n    value: function _handleStream(stream) {\n      this.onStreamCallback(stream);\n    }\n  }, {\n    key: \"_handleError\",\n    value: function _handleError(err) {\n      if (typeof this.onErrorCallback !== 'undefined') {\n        this.onErrorCallback(err);\n      } else {\n        console.log(err);\n      }\n    }\n  }, {\n    key: \"_handleData\",\n    value: function _handleData(data) {\n      var decodedString = new TextDecoder('utf-8').decode(data);\n      var decodedJSON = JSON.parse(decodedString);\n      this.onDataCallback(decodedJSON);\n    }\n  }, {\n    key: \"_handleClose\",\n    value: function _handleClose() {\n      if (typeof this.onCloseCallback !== 'undefined') {\n        this.onCloseCallback();\n      }\n      this.debug && console.log('Closing Connection');\n    }\n  }, {\n    key: \"_handleRemoteHangup\",\n    value: function _handleRemoteHangup() {\n      this.debug && console.log('Handling remote hangup');\n      this.terminateSession(true);\n    }\n  }, {\n    key: \"_closePeerConnection\",\n    value: function _closePeerConnection() {\n      // peerStarted = false;\n      // peer.destroy();\n      // peer = null;\n    }\n  }]);\n  return SimplePeerClientWrapper;\n}();\nmodule.exports = SimplePeerClientWrapper;","map":{"version":3,"names":["Peer","require","SimplePeerClientWrapper","socket","debug","simplePeerOptions","initPeerRequest","localStream","connections","onConnectCallback","onDataCallback","onStreamCallback","onCloseCallback","onErrorCallback","stream","console","log","length","i","emit","room","initiator","attemptPeerStart","connection","peerStarted","roomReady","createPeerConnection","options","_getPeerOptions","peer","on","data","_sendSignal","_handleConnection","err","_handleError","_handleStream","_handleData","_handleClose","event","callback","msg","JSON","stringify","userId","id","peerConn","connected","write","destroy","close","spOptions","Object","entries","key","value","message","decodedString","TextDecoder","decode","decodedJSON","parse","terminateSession","module","exports"],"sources":["C:/Users/Amali/Desktop/Building_the_IoT_w._P2P_and_Cloud_Computing/IoTProject/node_modules/simple-peer-wrapper/src/simple-peer-client-wrapper.js"],"sourcesContent":["const Peer = require('simple-peer');\n\nclass SimplePeerClientWrapper {\n  constructor(socket, debug, simplePeerOptions) {\n    this.initPeerRequest = false;\n    this.socket = socket;\n    this.localStream;\n    this.debug = debug;\n    this.connections = [];\n    this.onConnectCallback;\n    this.onDataCallback;\n    this.onStreamCallback;\n    // this.onTrackCallback;\n    this.onCloseCallback;\n    this.onErrorCallback;\n    this.simplePeerOptions;\n\n    if (typeof simplePeerOptions !== 'undefined') {\n      this.simplePeerOptions = simplePeerOptions;\n    }\n  }\n\n  setlocalStream(stream) {\n    this.localStream = stream;\n  }\n\n  init() {\n    this.debug &&\n      console.log(\n        'running init Peer Client. # of ' + this.connections.length,\n      );\n    this.initPeerRequest = true;\n\n    for (let i = 0; i < this.connections.length; i++) {\n      this.socket.emit('initiate peer', this.connections[i].room);\n      if (this.connections[i].initiator) {\n        this.attemptPeerStart(this.connections[i]);\n      }\n    }\n  }\n\n  attemptPeerStart(connection) {\n    this.debug &&\n      console.log(\n        'Attempting peer start',\n        connection.peerStarted,\n        connection.roomReady,\n      );\n\n    if (!connection.peerStarted && connection.roomReady) {\n      this.debug && console.log('Creating peer connection');\n      this.createPeerConnection(connection);\n    } else {\n      this.debug && console.log('Not creating peer connection');\n    }\n  }\n\n  createPeerConnection(connection) {\n    this.debug && console.log('creating simple peer');\n\n    const options = this._getPeerOptions(connection.initiator);\n    const peer = new Peer(options);\n\n    // If initiator,peer.on'signal' will fire right away, if not it waits for signal\n    // https://github.com/feross/simple-peer#peeronsignal-data--\n    peer.on('signal', (data) => this._sendSignal(data, connection));\n    peer.on('connect', () => this._handleConnection());\n    peer.on('error', (err) => this._handleError(err));\n    peer.on('stream', (stream) => this._handleStream(stream));\n    peer.on('data', (data) => this._handleData(data));\n    // peer.on('track', (track, stream) =>\n    //   this._handleTrack(track, stream),\n    // );\n    peer.on('close', () => this._handleClose());\n\n    connection.peerStarted = true;\n    connection.peer = peer;\n  }\n\n  isPeerStarted() {\n    let peerStarted = false;\n\n    // if any peer connection is not started then it returns false\n    for (let i = 0; i < this.connections.length; i++) {\n      peerStarted = this.connections[i].peerStarted;\n    }\n    return peerStarted;\n  }\n\n  setEventCallback(event, callback) {\n    switch (event) {\n      case 'connect':\n        this.onConnectCallback = callback;\n        break;\n      case 'data':\n        this.onDataCallback = callback;\n        break;\n      case 'stream':\n        this.onStreamCallback = callback;\n        break;\n      // case 'track':\n      //   this.onTrackCallback = callback;\n      //   break;\n      case 'close':\n        this.onCloseCallback = callback;\n        break;\n      case 'error':\n        this.onErrorCallback = callback;\n    }\n  }\n\n  sendData(data) {\n    let msg = JSON.stringify({ data: data, userId: this.socket.id });\n    for (let i = 0; i < this.connections.length; i++) {\n      const peer = this.connections[i];\n      if (peer.peerStarted) {\n        const peerConn = peer.peer;\n        if (peerConn.connected) {\n          peerConn.write(msg);\n        }\n      }\n    }\n  }\n\n  terminateSession() {\n    for (let i = 0; i < this.connections.length; i++) {\n      const peer = this.connections[i].peer;\n      peer.destroy(); // simple-peer method to close and cleanup peer connection\n      this.connections[i].peer = null;\n      this.connections[i].peerStarted = false;\n    }\n\n    this.socket.emit('hangup');\n    this.socket.close();\n  }\n\n  _getPeerOptions(initiator) {\n    const options = {\n      initiator: initiator,\n    };\n\n    if (typeof this.localStream !== 'undefined') {\n      options.stream = this.localStream;\n    }\n\n    if (typeof this.simplePeerOptions !== 'undefined') {\n      const spOptions = Object.entries(this.simplePeerOptions);\n\n      if (spOptions.length > 0) {\n        for (const [key, value] of spOptions) {\n          options[key] = value;\n        }\n      }\n    }\n    return options;\n  }\n\n  _sendSignal(data, connection) {\n    this.debug && console.log('sending signal');\n\n    const message = {\n      room: connection.room,\n      data: JSON.stringify(data),\n    };\n\n    this.socket.emit('sending signal', message);\n  }\n\n  _handleConnection() {\n    this.debug && console.log('SIMPLE PEER IS CONNECTED');\n    if (this.onConnectCallback) this.onConnectCallback();\n  }\n\n  _handleStream(stream) {\n    this.onStreamCallback(stream);\n  }\n\n  _handleError(err) {\n    if (typeof this.onErrorCallback !== 'undefined') {\n      this.onErrorCallback(err);\n    } else {\n      console.log(err);\n    }\n  }\n\n  _handleData(data) {\n    const decodedString = new TextDecoder('utf-8').decode(data);\n    const decodedJSON = JSON.parse(decodedString);\n    this.onDataCallback(decodedJSON);\n  }\n\n  _handleClose() {\n    if (typeof this.onCloseCallback !== 'undefined') {\n      this.onCloseCallback();\n    }\n\n    this.debug && console.log('Closing Connection');\n  }\n\n  _handleRemoteHangup() {\n    this.debug && console.log('Handling remote hangup');\n    this.terminateSession(true);\n  }\n\n  _closePeerConnection() {\n    // peerStarted = false;\n    // peer.destroy();\n    // peer = null;\n  }\n}\n\nmodule.exports = SimplePeerClientWrapper;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}