{"ast":null,"code":"import { __read, __spreadArray, __values } from \"tslib\";\nimport { isFunction } from './util/isFunction';\nimport { UnsubscriptionError } from './util/UnsubscriptionError';\nimport { arrRemove } from './util/arrRemove';\nvar Subscription = function () {\n  function Subscription(initialTeardown) {\n    this.initialTeardown = initialTeardown;\n    this.closed = false;\n    this._parentage = null;\n    this._finalizers = null;\n  }\n  Subscription.prototype.unsubscribe = function () {\n    var e_1, _a, e_2, _b;\n    var errors;\n    if (!this.closed) {\n      this.closed = true;\n      var _parentage = this._parentage;\n      if (_parentage) {\n        this._parentage = null;\n        if (Array.isArray(_parentage)) {\n          try {\n            for (var _parentage_1 = __values(_parentage), _parentage_1_1 = _parentage_1.next(); !_parentage_1_1.done; _parentage_1_1 = _parentage_1.next()) {\n              var parent_1 = _parentage_1_1.value;\n              parent_1.remove(this);\n            }\n          } catch (e_1_1) {\n            e_1 = {\n              error: e_1_1\n            };\n          } finally {\n            try {\n              if (_parentage_1_1 && !_parentage_1_1.done && (_a = _parentage_1.return)) _a.call(_parentage_1);\n            } finally {\n              if (e_1) throw e_1.error;\n            }\n          }\n        } else {\n          _parentage.remove(this);\n        }\n      }\n      var initialFinalizer = this.initialTeardown;\n      if (isFunction(initialFinalizer)) {\n        try {\n          initialFinalizer();\n        } catch (e) {\n          errors = e instanceof UnsubscriptionError ? e.errors : [e];\n        }\n      }\n      var _finalizers = this._finalizers;\n      if (_finalizers) {\n        this._finalizers = null;\n        try {\n          for (var _finalizers_1 = __values(_finalizers), _finalizers_1_1 = _finalizers_1.next(); !_finalizers_1_1.done; _finalizers_1_1 = _finalizers_1.next()) {\n            var finalizer = _finalizers_1_1.value;\n            try {\n              execFinalizer(finalizer);\n            } catch (err) {\n              errors = errors !== null && errors !== void 0 ? errors : [];\n              if (err instanceof UnsubscriptionError) {\n                errors = __spreadArray(__spreadArray([], __read(errors)), __read(err.errors));\n              } else {\n                errors.push(err);\n              }\n            }\n          }\n        } catch (e_2_1) {\n          e_2 = {\n            error: e_2_1\n          };\n        } finally {\n          try {\n            if (_finalizers_1_1 && !_finalizers_1_1.done && (_b = _finalizers_1.return)) _b.call(_finalizers_1);\n          } finally {\n            if (e_2) throw e_2.error;\n          }\n        }\n      }\n      if (errors) {\n        throw new UnsubscriptionError(errors);\n      }\n    }\n  };\n  Subscription.prototype.add = function (teardown) {\n    var _a;\n    if (teardown && teardown !== this) {\n      if (this.closed) {\n        execFinalizer(teardown);\n      } else {\n        if (teardown instanceof Subscription) {\n          if (teardown.closed || teardown._hasParent(this)) {\n            return;\n          }\n          teardown._addParent(this);\n        }\n        (this._finalizers = (_a = this._finalizers) !== null && _a !== void 0 ? _a : []).push(teardown);\n      }\n    }\n  };\n  Subscription.prototype._hasParent = function (parent) {\n    var _parentage = this._parentage;\n    return _parentage === parent || Array.isArray(_parentage) && _parentage.includes(parent);\n  };\n  Subscription.prototype._addParent = function (parent) {\n    var _parentage = this._parentage;\n    this._parentage = Array.isArray(_parentage) ? (_parentage.push(parent), _parentage) : _parentage ? [_parentage, parent] : parent;\n  };\n  Subscription.prototype._removeParent = function (parent) {\n    var _parentage = this._parentage;\n    if (_parentage === parent) {\n      this._parentage = null;\n    } else if (Array.isArray(_parentage)) {\n      arrRemove(_parentage, parent);\n    }\n  };\n  Subscription.prototype.remove = function (teardown) {\n    var _finalizers = this._finalizers;\n    _finalizers && arrRemove(_finalizers, teardown);\n    if (teardown instanceof Subscription) {\n      teardown._removeParent(this);\n    }\n  };\n  Subscription.EMPTY = function () {\n    var empty = new Subscription();\n    empty.closed = true;\n    return empty;\n  }();\n  return Subscription;\n}();\nexport { Subscription };\nexport var EMPTY_SUBSCRIPTION = Subscription.EMPTY;\nexport function isSubscription(value) {\n  return value instanceof Subscription || value && 'closed' in value && isFunction(value.remove) && isFunction(value.add) && isFunction(value.unsubscribe);\n}\nfunction execFinalizer(finalizer) {\n  if (isFunction(finalizer)) {\n    finalizer();\n  } else {\n    finalizer.unsubscribe();\n  }\n}","map":{"version":3,"mappings":"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","names":["isFunction","UnsubscriptionError","arrRemove","initialTeardown","Subscription","errors","closed","_parentage","Array","isArray","parent_1","remove","initialFinalizer","e","_finalizers","finalizer","execFinalizer","err","push","teardown","_hasParent","_addParent","parent","includes","_removeParent","empty","EMPTY_SUBSCRIPTION","EMPTY","isSubscription","value","add","unsubscribe"],"sources":["C:\\Users\\Amali\\Desktop\\Building_the_IoT_w._P2P_and_Cloud_Computing\\IoTProject\\node_modules\\rxjs\\src\\internal\\Subscription.ts"],"sourcesContent":["import { isFunction } from './util/isFunction';\r\nimport { UnsubscriptionError } from './util/UnsubscriptionError';\r\nimport { SubscriptionLike, TeardownLogic, Unsubscribable } from './types';\r\nimport { arrRemove } from './util/arrRemove';\r\n\r\n/**\r\n * Represents a disposable resource, such as the execution of an Observable. A\r\n * Subscription has one important method, `unsubscribe`, that takes no argument\r\n * and just disposes the resource held by the subscription.\r\n *\r\n * Additionally, subscriptions may be grouped together through the `add()`\r\n * method, which will attach a child Subscription to the current Subscription.\r\n * When a Subscription is unsubscribed, all its children (and its grandchildren)\r\n * will be unsubscribed as well.\r\n *\r\n * @class Subscription\r\n */\r\nexport class Subscription implements SubscriptionLike {\r\n  /** @nocollapse */\r\n  public static EMPTY = (() => {\r\n    const empty = new Subscription();\r\n    empty.closed = true;\r\n    return empty;\r\n  })();\r\n\r\n  /**\r\n   * A flag to indicate whether this Subscription has already been unsubscribed.\r\n   */\r\n  public closed = false;\r\n\r\n  private _parentage: Subscription[] | Subscription | null = null;\r\n\r\n  /**\r\n   * The list of registered finalizers to execute upon unsubscription. Adding and removing from this\r\n   * list occurs in the {@link #add} and {@link #remove} methods.\r\n   */\r\n  private _finalizers: Exclude<TeardownLogic, void>[] | null = null;\r\n\r\n  /**\r\n   * @param initialTeardown A function executed first as part of the finalization\r\n   * process that is kicked off when {@link #unsubscribe} is called.\r\n   */\r\n  constructor(private initialTeardown?: () => void) {}\r\n\r\n  /**\r\n   * Disposes the resources held by the subscription. May, for instance, cancel\r\n   * an ongoing Observable execution or cancel any other type of work that\r\n   * started when the Subscription was created.\r\n   * @return {void}\r\n   */\r\n  unsubscribe(): void {\r\n    let errors: any[] | undefined;\r\n\r\n    if (!this.closed) {\r\n      this.closed = true;\r\n\r\n      // Remove this from it's parents.\r\n      const { _parentage } = this;\r\n      if (_parentage) {\r\n        this._parentage = null;\r\n        if (Array.isArray(_parentage)) {\r\n          for (const parent of _parentage) {\r\n            parent.remove(this);\r\n          }\r\n        } else {\r\n          _parentage.remove(this);\r\n        }\r\n      }\r\n\r\n      const { initialTeardown: initialFinalizer } = this;\r\n      if (isFunction(initialFinalizer)) {\r\n        try {\r\n          initialFinalizer();\r\n        } catch (e) {\r\n          errors = e instanceof UnsubscriptionError ? e.errors : [e];\r\n        }\r\n      }\r\n\r\n      const { _finalizers } = this;\r\n      if (_finalizers) {\r\n        this._finalizers = null;\r\n        for (const finalizer of _finalizers) {\r\n          try {\r\n            execFinalizer(finalizer);\r\n          } catch (err) {\r\n            errors = errors ?? [];\r\n            if (err instanceof UnsubscriptionError) {\r\n              errors = [...errors, ...err.errors];\r\n            } else {\r\n              errors.push(err);\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      if (errors) {\r\n        throw new UnsubscriptionError(errors);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Adds a finalizer to this subscription, so that finalization will be unsubscribed/called\r\n   * when this subscription is unsubscribed. If this subscription is already {@link #closed},\r\n   * because it has already been unsubscribed, then whatever finalizer is passed to it\r\n   * will automatically be executed (unless the finalizer itself is also a closed subscription).\r\n   *\r\n   * Closed Subscriptions cannot be added as finalizers to any subscription. Adding a closed\r\n   * subscription to a any subscription will result in no operation. (A noop).\r\n   *\r\n   * Adding a subscription to itself, or adding `null` or `undefined` will not perform any\r\n   * operation at all. (A noop).\r\n   *\r\n   * `Subscription` instances that are added to this instance will automatically remove themselves\r\n   * if they are unsubscribed. Functions and {@link Unsubscribable} objects that you wish to remove\r\n   * will need to be removed manually with {@link #remove}\r\n   *\r\n   * @param teardown The finalization logic to add to this subscription.\r\n   */\r\n  add(teardown: TeardownLogic): void {\r\n    // Only add the finalizer if it's not undefined\r\n    // and don't add a subscription to itself.\r\n    if (teardown && teardown !== this) {\r\n      if (this.closed) {\r\n        // If this subscription is already closed,\r\n        // execute whatever finalizer is handed to it automatically.\r\n        execFinalizer(teardown);\r\n      } else {\r\n        if (teardown instanceof Subscription) {\r\n          // We don't add closed subscriptions, and we don't add the same subscription\r\n          // twice. Subscription unsubscribe is idempotent.\r\n          if (teardown.closed || teardown._hasParent(this)) {\r\n            return;\r\n          }\r\n          teardown._addParent(this);\r\n        }\r\n        (this._finalizers = this._finalizers ?? []).push(teardown);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Checks to see if a this subscription already has a particular parent.\r\n   * This will signal that this subscription has already been added to the parent in question.\r\n   * @param parent the parent to check for\r\n   */\r\n  private _hasParent(parent: Subscription) {\r\n    const { _parentage } = this;\r\n    return _parentage === parent || (Array.isArray(_parentage) && _parentage.includes(parent));\r\n  }\r\n\r\n  /**\r\n   * Adds a parent to this subscription so it can be removed from the parent if it\r\n   * unsubscribes on it's own.\r\n   *\r\n   * NOTE: THIS ASSUMES THAT {@link _hasParent} HAS ALREADY BEEN CHECKED.\r\n   * @param parent The parent subscription to add\r\n   */\r\n  private _addParent(parent: Subscription) {\r\n    const { _parentage } = this;\r\n    this._parentage = Array.isArray(_parentage) ? (_parentage.push(parent), _parentage) : _parentage ? [_parentage, parent] : parent;\r\n  }\r\n\r\n  /**\r\n   * Called on a child when it is removed via {@link #remove}.\r\n   * @param parent The parent to remove\r\n   */\r\n  private _removeParent(parent: Subscription) {\r\n    const { _parentage } = this;\r\n    if (_parentage === parent) {\r\n      this._parentage = null;\r\n    } else if (Array.isArray(_parentage)) {\r\n      arrRemove(_parentage, parent);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Removes a finalizer from this subscription that was previously added with the {@link #add} method.\r\n   *\r\n   * Note that `Subscription` instances, when unsubscribed, will automatically remove themselves\r\n   * from every other `Subscription` they have been added to. This means that using the `remove` method\r\n   * is not a common thing and should be used thoughtfully.\r\n   *\r\n   * If you add the same finalizer instance of a function or an unsubscribable object to a `Subscription` instance\r\n   * more than once, you will need to call `remove` the same number of times to remove all instances.\r\n   *\r\n   * All finalizer instances are removed to free up memory upon unsubscription.\r\n   *\r\n   * @param teardown The finalizer to remove from this subscription\r\n   */\r\n  remove(teardown: Exclude<TeardownLogic, void>): void {\r\n    const { _finalizers } = this;\r\n    _finalizers && arrRemove(_finalizers, teardown);\r\n\r\n    if (teardown instanceof Subscription) {\r\n      teardown._removeParent(this);\r\n    }\r\n  }\r\n}\r\n\r\nexport const EMPTY_SUBSCRIPTION = Subscription.EMPTY;\r\n\r\nexport function isSubscription(value: any): value is Subscription {\r\n  return (\r\n    value instanceof Subscription ||\r\n    (value && 'closed' in value && isFunction(value.remove) && isFunction(value.add) && isFunction(value.unsubscribe))\r\n  );\r\n}\r\n\r\nfunction execFinalizer(finalizer: Unsubscribable | (() => void)) {\r\n  if (isFunction(finalizer)) {\r\n    finalizer();\r\n  } else {\r\n    finalizer.unsubscribe();\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}