{"ast":null,"code":"import { reduce } from './reduce';\nimport { operate } from '../util/lift';\nvar arrReducer = function (arr, value) {\n  return arr.push(value), arr;\n};\nexport function toArray() {\n  return operate(function (source, subscriber) {\n    reduce(arrReducer, [])(source).subscribe(subscriber);\n  });\n}","map":{"version":3,"mappings":"AAAA,SAASA,MAAM,QAAQ,UAAU;AAEjC,SAASC,OAAO,QAAQ,cAAc;AAEtC,IAAMC,UAAU,GAAG,UAACC,GAAU,EAAEC,KAAU;EAAK,OAACD,GAAG,CAACE,IAAI,CAACD,KAAK,CAAC,EAAED,GAAG;AAArB,CAAsB;AAgCrE,OAAM,SAAUG,OAAO;EAIrB,OAAOL,OAAO,CAAC,UAACM,MAAM,EAAEC,UAAU;IAChCR,MAAM,CAACE,UAAU,EAAE,EAAS,CAAC,CAACK,MAAM,CAAC,CAACE,SAAS,CAACD,UAAU,CAAC;EAC7D,CAAC,CAAC;AACJ","names":["reduce","operate","arrReducer","arr","value","push","toArray","source","subscriber","subscribe"],"sources":["C:\\Users\\Amali\\Desktop\\Building_the_IoT_w._P2P_and_Cloud_Computing\\IoTProject\\node_modules\\rxjs\\src\\internal\\operators\\toArray.ts"],"sourcesContent":["import { reduce } from './reduce';\r\nimport { OperatorFunction } from '../types';\r\nimport { operate } from '../util/lift';\r\n\r\nconst arrReducer = (arr: any[], value: any) => (arr.push(value), arr);\r\n\r\n/**\r\n * Collects all source emissions and emits them as an array when the source completes.\r\n *\r\n * <span class=\"informal\">Get all values inside an array when the source completes</span>\r\n *\r\n * ![](toArray.png)\r\n *\r\n * `toArray` will wait until the source Observable completes before emitting\r\n * the array containing all emissions. When the source Observable errors no\r\n * array will be emitted.\r\n *\r\n * ## Example\r\n *\r\n * ```ts\r\n * import { interval, take, toArray } from 'rxjs';\r\n *\r\n * const source = interval(1000);\r\n * const example = source.pipe(\r\n *   take(10),\r\n *   toArray()\r\n * );\r\n *\r\n * example.subscribe(value => console.log(value));\r\n *\r\n * // output: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\r\n * ```\r\n *\r\n * @return A function that returns an Observable that emits an array of items\r\n * emitted by the source Observable when source completes.\r\n */\r\nexport function toArray<T>(): OperatorFunction<T, T[]> {\r\n  // Because arrays are mutable, and we're mutating the array in this\r\n  // reducer process, we have to encapsulate the creation of the initial\r\n  // array within this `operate` function.\r\n  return operate((source, subscriber) => {\r\n    reduce(arrReducer, [] as T[])(source).subscribe(subscriber);\r\n  });\r\n}\r\n"]},"metadata":{},"sourceType":"module"}