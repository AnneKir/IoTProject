{"ast":null,"code":"var _classCallCheck = require(\"C:/Users/Amali/Desktop/Building_the_IoT_w._P2P_and_Cloud_Computing/IoTProject/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"C:/Users/Amali/Desktop/Building_the_IoT_w._P2P_and_Cloud_Computing/IoTProject/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar io = require('socket.io-client');\nvar SimplePeerClientWrapper = require('./simple-peer-client-wrapper.js');\nvar SocketIOClientWrapper = /*#__PURE__*/function () {\n  \"use strict\";\n\n  function SocketIOClientWrapper() {\n    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      stream = _ref.stream,\n      serverUrl = _ref.serverUrl,\n      _ref$debug = _ref.debug,\n      debug = _ref$debug === void 0 ? false : _ref$debug,\n      simplePeerOptions = _ref.simplePeerOptions;\n    _classCallCheck(this, SocketIOClientWrapper);\n    this.debug = debug;\n    if (typeof serverUrl === 'undefined') {\n      console.error('simple-peer-wrapper requires that you specify a serverUrl on startup. Please specify a serverUrl and try again. See documentation for more information https://github.com/lisajamhoury/simple-peer-wrapper');\n    }\n    this.debug && console.log('connecting socket to ' + serverUrl);\n    this.socket = io.connect(serverUrl);\n    this.peerClient = new SimplePeerClientWrapper(this.socket, this.debug, simplePeerOptions);\n    if (typeof stream !== 'undefined') {\n      this.peerClient.setlocalStream(stream);\n    }\n    this._initSocket();\n  }\n  _createClass(SocketIOClientWrapper, [{\n    key: \"_initSocket\",\n    value: function _initSocket() {\n      var _this = this;\n      this.socket.on('created', function (room) {\n        return _this._handleCreated(room);\n      });\n      this.socket.on('full', function (room) {\n        return _this._handleFullRoom(room);\n      });\n      this.socket.on('join', function (room) {\n        return _this._handleJoinRoom(room);\n      });\n      this.socket.on('joined', function (room) {\n        return _this._handleJoinedRoom(room);\n      });\n      this.socket.on('initiate peer', function (room) {\n        return _this._handleInitPeer(room);\n      });\n      this.socket.on('sending signal', function (message) {\n        return _this._handleSendSignal(message);\n      });\n      this.socket.on('log', function (array) {\n        return _this._handleLog(array);\n      });\n      this.socket.on('message', function (message) {\n        return _this._handleMessage(message);\n      });\n      this.socket.on('simple peer options', function (options) {\n        return _this._setSimplePeerOptionsFromServer(options);\n      });\n      this._startSocketCommunication();\n    }\n\n    // starts socket client communication with signal server automatically\n  }, {\n    key: \"_startSocketCommunication\",\n    value: function _startSocketCommunication() {\n      this.socket.emit('create or join');\n      this.debug && console.log('Attempted to create or join room');\n    }\n  }, {\n    key: \"_handleCreated\",\n    value: function _handleCreated(room) {\n      this.debug && console.log('Created room ' + room);\n    }\n\n    // room only holds two clients, can be changed in signal_socket.js\n  }, {\n    key: \"_handleFullRoom\",\n    value: function _handleFullRoom(room) {\n      this.debug && console.log('Room ' + room + ' is full');\n    }\n\n    // called by initiator client only\n  }, {\n    key: \"_handleJoinRoom\",\n    value: function _handleJoinRoom(room) {\n      this.debug && console.log('Another peer made a request to join room ' + room);\n      this.debug && console.log('This peer is the initiator of room ' + room + '!');\n      this._logConnection(room, true, true, false);\n      if (this.peerClient.initPeerRequest) {\n        this.debug && console.log('initing peer from handle join');\n        this.peerClient.init();\n      }\n    }\n\n    // called by non-initiator client\n  }, {\n    key: \"_handleJoinedRoom\",\n    value: function _handleJoinedRoom(room) {\n      this.debug && console.log('joined: ' + room);\n      this._logConnection(room, false, true, false);\n      if (this.peerClient.initPeerRequest) {\n        this.debug && console.log('initing peer from handle joined');\n        this.peerClient.init();\n      }\n    }\n  }, {\n    key: \"_logConnection\",\n    value: function _logConnection(_room, _initiator, _roomReady, _peerStarted) {\n      this.debug && console.log('logging connection');\n      var newConnection = {\n        room: _room,\n        // socket.io server room\n        initiator: _initiator,\n        // client initiates the communication\n        roomReady: _roomReady,\n        // socket.io room is created or joined\n        peerStarted: _peerStarted // the peer connection is started\n      };\n\n      this.peerClient.connections.push(newConnection);\n    }\n\n    // logs messages from server\n  }, {\n    key: \"_handleLog\",\n    value: function _handleLog(array) {\n      log.apply(console, array);\n    }\n  }, {\n    key: \"_handleInitPeer\",\n    value: function _handleInitPeer(room) {\n      var connection = this._findConnection(room);\n      this.peerClient.attemptPeerStart(connection);\n    }\n  }, {\n    key: \"_handleSendSignal\",\n    value: function _handleSendSignal(message) {\n      this.debug && console.log('receiving simple signal data');\n      var connection = this._findConnection(message.room);\n      if (!connection.peerStarted) {\n        this.debug && console.log('Creating peer from messages!');\n        this.peerClient.createPeerConnection(connection);\n        connection.peer.signal(message.data);\n      } else {\n        connection.peer.signal(message.data);\n      }\n    }\n  }, {\n    key: \"_findConnection\",\n    value: function _findConnection(room) {\n      var connection = null;\n      for (var i = 0; i < this.peerClient.connections.length; i++) {\n        if (this.peerClient.connections[i].room === room) {\n          connection = this.peerClient.connections[i];\n        }\n      }\n      if (connection === null) {\n        this.debug && console.log('UT OH THAT CONNECTION DOESNT EXIST');\n      } else {\n        this.debug && console.log('found the connection for room: ' + room);\n      }\n      return connection;\n    }\n\n    // This client receives a message\n  }, {\n    key: \"_handleMessage\",\n    value: function _handleMessage(message) {\n      this.debug && console.log('MESSAGE ' + message);\n      if (message.type) {\n        this.debug && console.log('received msg typ ' + message.type);\n      } else {\n        this.debug && console.log('Client received message: ' + message);\n      }\n\n      // TO DO HANDLE BYE\n      // } else if (message === 'bye' && peerStarted) {\n      //   handleRemoteHangup();\n    }\n  }, {\n    key: \"_emitSocketMessage\",\n    value: function _emitSocketMessage(message) {\n      this.debug && console.log('Client sending message: ', message);\n      this.socket.emit('message', message);\n    }\n  }, {\n    key: \"_setSimplePeerOptionsFromServer\",\n    value: function _setSimplePeerOptionsFromServer(options) {\n      this.debug && console.log('Setting Simple Peer Options from Server.');\n      this.peerClient.simplePeerOptions = options;\n    }\n  }]);\n  return SocketIOClientWrapper;\n}();\nmodule.exports = SocketIOClientWrapper;","map":{"version":3,"names":["io","require","SimplePeerClientWrapper","SocketIOClientWrapper","stream","serverUrl","debug","simplePeerOptions","console","error","log","socket","connect","peerClient","setlocalStream","_initSocket","on","room","_handleCreated","_handleFullRoom","_handleJoinRoom","_handleJoinedRoom","_handleInitPeer","message","_handleSendSignal","array","_handleLog","_handleMessage","options","_setSimplePeerOptionsFromServer","_startSocketCommunication","emit","_logConnection","initPeerRequest","init","_room","_initiator","_roomReady","_peerStarted","newConnection","initiator","roomReady","peerStarted","connections","push","apply","connection","_findConnection","attemptPeerStart","createPeerConnection","peer","signal","data","i","length","type","module","exports"],"sources":["C:/Users/Amali/Desktop/Building_the_IoT_w._P2P_and_Cloud_Computing/IoTProject/node_modules/simple-peer-wrapper/src/socket-io-client-wrapper.js"],"sourcesContent":["const io = require('socket.io-client');\nconst SimplePeerClientWrapper = require('./simple-peer-client-wrapper.js');\n\nclass SocketIOClientWrapper {\n  constructor({\n    stream,\n    serverUrl,\n    debug = false,\n    simplePeerOptions,\n  } = {}) {\n    this.debug = debug;\n\n    if (typeof serverUrl === 'undefined') {\n      console.error(\n        'simple-peer-wrapper requires that you specify a serverUrl on startup. Please specify a serverUrl and try again. See documentation for more information https://github.com/lisajamhoury/simple-peer-wrapper',\n      );\n    }\n\n    this.debug && console.log('connecting socket to ' + serverUrl);\n    this.socket = io.connect(serverUrl);\n\n    this.peerClient = new SimplePeerClientWrapper(\n      this.socket,\n      this.debug,\n      simplePeerOptions,\n    );\n\n    if (typeof stream !== 'undefined') {\n      this.peerClient.setlocalStream(stream);\n    }\n\n    this._initSocket();\n  }\n\n  _initSocket() {\n    this.socket.on('created', (room) => this._handleCreated(room));\n    this.socket.on('full', (room) => this._handleFullRoom(room));\n    this.socket.on('join', (room) => this._handleJoinRoom(room));\n    this.socket.on('joined', (room) => this._handleJoinedRoom(room));\n    this.socket.on('initiate peer', (room) =>\n      this._handleInitPeer(room),\n    );\n    this.socket.on('sending signal', (message) =>\n      this._handleSendSignal(message),\n    );\n    this.socket.on('log', (array) => this._handleLog(array));\n    this.socket.on('message', (message) =>\n      this._handleMessage(message),\n    );\n    this.socket.on('simple peer options', (options) =>\n      this._setSimplePeerOptionsFromServer(options),\n    );\n\n    this._startSocketCommunication();\n  }\n\n  // starts socket client communication with signal server automatically\n  _startSocketCommunication() {\n    this.socket.emit('create or join');\n    this.debug && console.log('Attempted to create or join room');\n  }\n\n  _handleCreated(room) {\n    this.debug && console.log('Created room ' + room);\n  }\n\n  // room only holds two clients, can be changed in signal_socket.js\n  _handleFullRoom(room) {\n    this.debug && console.log('Room ' + room + ' is full');\n  }\n\n  // called by initiator client only\n  _handleJoinRoom(room) {\n    this.debug &&\n      console.log('Another peer made a request to join room ' + room);\n    this.debug &&\n      console.log('This peer is the initiator of room ' + room + '!');\n\n    this._logConnection(room, true, true, false);\n    if (this.peerClient.initPeerRequest) {\n      this.debug && console.log('initing peer from handle join');\n      this.peerClient.init();\n    }\n  }\n\n  // called by non-initiator client\n  _handleJoinedRoom(room) {\n    this.debug && console.log('joined: ' + room);\n\n    this._logConnection(room, false, true, false);\n    if (this.peerClient.initPeerRequest) {\n      this.debug && console.log('initing peer from handle joined');\n      this.peerClient.init();\n    }\n  }\n\n  _logConnection(_room, _initiator, _roomReady, _peerStarted) {\n    this.debug && console.log('logging connection');\n    const newConnection = {\n      room: _room, // socket.io server room\n      initiator: _initiator, // client initiates the communication\n      roomReady: _roomReady, // socket.io room is created or joined\n      peerStarted: _peerStarted, // the peer connection is started\n    };\n\n    this.peerClient.connections.push(newConnection);\n  }\n\n  // logs messages from server\n  _handleLog(array) {\n    log.apply(console, array);\n  }\n\n  _handleInitPeer(room) {\n    const connection = this._findConnection(room);\n    this.peerClient.attemptPeerStart(connection);\n  }\n\n  _handleSendSignal(message) {\n    this.debug && console.log('receiving simple signal data');\n    const connection = this._findConnection(message.room);\n\n    if (!connection.peerStarted) {\n      this.debug && console.log('Creating peer from messages!');\n      this.peerClient.createPeerConnection(connection);\n      connection.peer.signal(message.data);\n    } else {\n      connection.peer.signal(message.data);\n    }\n  }\n\n  _findConnection(room) {\n    let connection = null;\n\n    for (let i = 0; i < this.peerClient.connections.length; i++) {\n      if (this.peerClient.connections[i].room === room) {\n        connection = this.peerClient.connections[i];\n      }\n    }\n\n    if (connection === null) {\n      this.debug && console.log('UT OH THAT CONNECTION DOESNT EXIST');\n    } else {\n      this.debug &&\n        console.log('found the connection for room: ' + room);\n    }\n\n    return connection;\n  }\n\n  // This client receives a message\n  _handleMessage(message) {\n    this.debug && console.log('MESSAGE ' + message);\n\n    if (message.type) {\n      this.debug && console.log('received msg typ ' + message.type);\n    } else {\n      this.debug &&\n        console.log('Client received message: ' + message);\n    }\n\n    // TO DO HANDLE BYE\n    // } else if (message === 'bye' && peerStarted) {\n    //   handleRemoteHangup();\n  }\n\n  _emitSocketMessage(message) {\n    this.debug && console.log('Client sending message: ', message);\n    this.socket.emit('message', message);\n  }\n\n  _setSimplePeerOptionsFromServer(options) {\n    this.debug &&\n      console.log('Setting Simple Peer Options from Server.');\n    this.peerClient.simplePeerOptions = options;\n  }\n}\n\nmodule.exports = SocketIOClientWrapper;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}