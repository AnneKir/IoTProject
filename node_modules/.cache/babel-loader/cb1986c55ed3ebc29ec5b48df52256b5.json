{"ast":null,"code":"import { EMPTY } from './observable/empty';\nimport { of } from './observable/of';\nimport { throwError } from './observable/throwError';\nimport { isFunction } from './util/isFunction';\nexport var NotificationKind;\n(function (NotificationKind) {\n  NotificationKind[\"NEXT\"] = \"N\";\n  NotificationKind[\"ERROR\"] = \"E\";\n  NotificationKind[\"COMPLETE\"] = \"C\";\n})(NotificationKind || (NotificationKind = {}));\nvar Notification = function () {\n  function Notification(kind, value, error) {\n    this.kind = kind;\n    this.value = value;\n    this.error = error;\n    this.hasValue = kind === 'N';\n  }\n  Notification.prototype.observe = function (observer) {\n    return observeNotification(this, observer);\n  };\n  Notification.prototype.do = function (nextHandler, errorHandler, completeHandler) {\n    var _a = this,\n      kind = _a.kind,\n      value = _a.value,\n      error = _a.error;\n    return kind === 'N' ? nextHandler === null || nextHandler === void 0 ? void 0 : nextHandler(value) : kind === 'E' ? errorHandler === null || errorHandler === void 0 ? void 0 : errorHandler(error) : completeHandler === null || completeHandler === void 0 ? void 0 : completeHandler();\n  };\n  Notification.prototype.accept = function (nextOrObserver, error, complete) {\n    var _a;\n    return isFunction((_a = nextOrObserver) === null || _a === void 0 ? void 0 : _a.next) ? this.observe(nextOrObserver) : this.do(nextOrObserver, error, complete);\n  };\n  Notification.prototype.toObservable = function () {\n    var _a = this,\n      kind = _a.kind,\n      value = _a.value,\n      error = _a.error;\n    var result = kind === 'N' ? of(value) : kind === 'E' ? throwError(function () {\n      return error;\n    }) : kind === 'C' ? EMPTY : 0;\n    if (!result) {\n      throw new TypeError(\"Unexpected notification kind \" + kind);\n    }\n    return result;\n  };\n  Notification.createNext = function (value) {\n    return new Notification('N', value);\n  };\n  Notification.createError = function (err) {\n    return new Notification('E', undefined, err);\n  };\n  Notification.createComplete = function () {\n    return Notification.completeNotification;\n  };\n  Notification.completeNotification = new Notification('C');\n  return Notification;\n}();\nexport { Notification };\nexport function observeNotification(notification, observer) {\n  var _a, _b, _c;\n  var _d = notification,\n    kind = _d.kind,\n    value = _d.value,\n    error = _d.error;\n  if (typeof kind !== 'string') {\n    throw new TypeError('Invalid notification, missing \"kind\"');\n  }\n  kind === 'N' ? (_a = observer.next) === null || _a === void 0 ? void 0 : _a.call(observer, value) : kind === 'E' ? (_b = observer.error) === null || _b === void 0 ? void 0 : _b.call(observer, error) : (_c = observer.complete) === null || _c === void 0 ? void 0 : _c.call(observer);\n}","map":{"version":3,"mappings":"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","names":["EMPTY","of","throwError","isFunction","NotificationKind","kind","value","error","hasValue","Notification","observer","observeNotification","nextHandler","errorHandler","completeHandler","nextOrObserver","complete","next","observe","do","result","TypeError","err","undefined","completeNotification","notification"],"sources":["C:\\Users\\Amali\\Desktop\\Building_the_IoT_w._P2P_and_Cloud_Computing\\IoTProject\\node_modules\\rxjs\\src\\internal\\Notification.ts"],"sourcesContent":["import { PartialObserver, ObservableNotification, CompleteNotification, NextNotification, ErrorNotification } from './types';\r\nimport { Observable } from './Observable';\r\nimport { EMPTY } from './observable/empty';\r\nimport { of } from './observable/of';\r\nimport { throwError } from './observable/throwError';\r\nimport { isFunction } from './util/isFunction';\r\n\r\n// TODO: When this enum is removed, replace it with a type alias. See #4556.\r\n/**\r\n * @deprecated Use a string literal instead. `NotificationKind` will be replaced with a type alias in v8.\r\n * It will not be replaced with a const enum as those are not compatible with isolated modules.\r\n */\r\nexport enum NotificationKind {\r\n  NEXT = 'N',\r\n  ERROR = 'E',\r\n  COMPLETE = 'C',\r\n}\r\n\r\n/**\r\n * Represents a push-based event or value that an {@link Observable} can emit.\r\n * This class is particularly useful for operators that manage notifications,\r\n * like {@link materialize}, {@link dematerialize}, {@link observeOn}, and\r\n * others. Besides wrapping the actual delivered value, it also annotates it\r\n * with metadata of, for instance, what type of push message it is (`next`,\r\n * `error`, or `complete`).\r\n *\r\n * @see {@link materialize}\r\n * @see {@link dematerialize}\r\n * @see {@link observeOn}\r\n * @deprecated It is NOT recommended to create instances of `Notification` directly.\r\n * Rather, try to create POJOs matching the signature outlined in {@link ObservableNotification}.\r\n * For example: `{ kind: 'N', value: 1 }`, `{ kind: 'E', error: new Error('bad') }`, or `{ kind: 'C' }`.\r\n * Will be removed in v8.\r\n */\r\nexport class Notification<T> {\r\n  /**\r\n   * A value signifying that the notification will \"next\" if observed. In truth,\r\n   * This is really synonymous with just checking `kind === \"N\"`.\r\n   * @deprecated Will be removed in v8. Instead, just check to see if the value of `kind` is `\"N\"`.\r\n   */\r\n  readonly hasValue: boolean;\r\n\r\n  /**\r\n   * Creates a \"Next\" notification object.\r\n   * @param kind Always `'N'`\r\n   * @param value The value to notify with if observed.\r\n   * @deprecated Internal implementation detail. Use {@link Notification#createNext createNext} instead.\r\n   */\r\n  constructor(kind: 'N', value?: T);\r\n  /**\r\n   * Creates an \"Error\" notification object.\r\n   * @param kind Always `'E'`\r\n   * @param value Always `undefined`\r\n   * @param error The error to notify with if observed.\r\n   * @deprecated Internal implementation detail. Use {@link Notification#createError createError} instead.\r\n   */\r\n  constructor(kind: 'E', value: undefined, error: any);\r\n  /**\r\n   * Creates a \"completion\" notification object.\r\n   * @param kind Always `'C'`\r\n   * @deprecated Internal implementation detail. Use {@link Notification#createComplete createComplete} instead.\r\n   */\r\n  constructor(kind: 'C');\r\n  constructor(public readonly kind: 'N' | 'E' | 'C', public readonly value?: T, public readonly error?: any) {\r\n    this.hasValue = kind === 'N';\r\n  }\r\n\r\n  /**\r\n   * Executes the appropriate handler on a passed `observer` given the `kind` of notification.\r\n   * If the handler is missing it will do nothing. Even if the notification is an error, if\r\n   * there is no error handler on the observer, an error will not be thrown, it will noop.\r\n   * @param observer The observer to notify.\r\n   */\r\n  observe(observer: PartialObserver<T>): void {\r\n    return observeNotification(this as ObservableNotification<T>, observer);\r\n  }\r\n\r\n  /**\r\n   * Executes a notification on the appropriate handler from a list provided.\r\n   * If a handler is missing for the kind of notification, nothing is called\r\n   * and no error is thrown, it will be a noop.\r\n   * @param next A next handler\r\n   * @param error An error handler\r\n   * @param complete A complete handler\r\n   * @deprecated Replaced with {@link Notification#observe observe}. Will be removed in v8.\r\n   */\r\n  do(next: (value: T) => void, error: (err: any) => void, complete: () => void): void;\r\n  /**\r\n   * Executes a notification on the appropriate handler from a list provided.\r\n   * If a handler is missing for the kind of notification, nothing is called\r\n   * and no error is thrown, it will be a noop.\r\n   * @param next A next handler\r\n   * @param error An error handler\r\n   * @deprecated Replaced with {@link Notification#observe observe}. Will be removed in v8.\r\n   */\r\n  do(next: (value: T) => void, error: (err: any) => void): void;\r\n  /**\r\n   * Executes the next handler if the Notification is of `kind` `\"N\"`. Otherwise\r\n   * this will not error, and it will be a noop.\r\n   * @param next The next handler\r\n   * @deprecated Replaced with {@link Notification#observe observe}. Will be removed in v8.\r\n   */\r\n  do(next: (value: T) => void): void;\r\n  do(nextHandler: (value: T) => void, errorHandler?: (err: any) => void, completeHandler?: () => void): void {\r\n    const { kind, value, error } = this;\r\n    return kind === 'N' ? nextHandler?.(value!) : kind === 'E' ? errorHandler?.(error) : completeHandler?.();\r\n  }\r\n\r\n  /**\r\n   * Executes a notification on the appropriate handler from a list provided.\r\n   * If a handler is missing for the kind of notification, nothing is called\r\n   * and no error is thrown, it will be a noop.\r\n   * @param next A next handler\r\n   * @param error An error handler\r\n   * @param complete A complete handler\r\n   * @deprecated Replaced with {@link Notification#observe observe}. Will be removed in v8.\r\n   */\r\n  accept(next: (value: T) => void, error: (err: any) => void, complete: () => void): void;\r\n  /**\r\n   * Executes a notification on the appropriate handler from a list provided.\r\n   * If a handler is missing for the kind of notification, nothing is called\r\n   * and no error is thrown, it will be a noop.\r\n   * @param next A next handler\r\n   * @param error An error handler\r\n   * @deprecated Replaced with {@link Notification#observe observe}. Will be removed in v8.\r\n   */\r\n  accept(next: (value: T) => void, error: (err: any) => void): void;\r\n  /**\r\n   * Executes the next handler if the Notification is of `kind` `\"N\"`. Otherwise\r\n   * this will not error, and it will be a noop.\r\n   * @param next The next handler\r\n   * @deprecated Replaced with {@link Notification#observe observe}. Will be removed in v8.\r\n   */\r\n  accept(next: (value: T) => void): void;\r\n\r\n  /**\r\n   * Executes the appropriate handler on a passed `observer` given the `kind` of notification.\r\n   * If the handler is missing it will do nothing. Even if the notification is an error, if\r\n   * there is no error handler on the observer, an error will not be thrown, it will noop.\r\n   * @param observer The observer to notify.\r\n   * @deprecated Replaced with {@link Notification#observe observe}. Will be removed in v8.\r\n   */\r\n  accept(observer: PartialObserver<T>): void;\r\n  accept(nextOrObserver: PartialObserver<T> | ((value: T) => void), error?: (err: any) => void, complete?: () => void) {\r\n    return isFunction((nextOrObserver as any)?.next)\r\n      ? this.observe(nextOrObserver as PartialObserver<T>)\r\n      : this.do(nextOrObserver as (value: T) => void, error as any, complete as any);\r\n  }\r\n\r\n  /**\r\n   * Returns a simple Observable that just delivers the notification represented\r\n   * by this Notification instance.\r\n   *\r\n   * @deprecated Will be removed in v8. To convert a `Notification` to an {@link Observable},\r\n   * use {@link of} and {@link dematerialize}: `of(notification).pipe(dematerialize())`.\r\n   */\r\n  toObservable(): Observable<T> {\r\n    const { kind, value, error } = this;\r\n    // Select the observable to return by `kind`\r\n    const result =\r\n      kind === 'N'\r\n        ? // Next kind. Return an observable of that value.\r\n          of(value!)\r\n        : //\r\n        kind === 'E'\r\n        ? // Error kind. Return an observable that emits the error.\r\n          throwError(() => error)\r\n        : //\r\n        kind === 'C'\r\n        ? // Completion kind. Kind is \"C\", return an observable that just completes.\r\n          EMPTY\r\n        : // Unknown kind, return falsy, so we error below.\r\n          0;\r\n    if (!result) {\r\n      // TODO: consider removing this check. The only way to cause this would be to\r\n      // use the Notification constructor directly in a way that is not type-safe.\r\n      // and direct use of the Notification constructor is deprecated.\r\n      throw new TypeError(`Unexpected notification kind ${kind}`);\r\n    }\r\n    return result;\r\n  }\r\n\r\n  private static completeNotification = new Notification('C') as Notification<never> & CompleteNotification;\r\n  /**\r\n   * A shortcut to create a Notification instance of the type `next` from a\r\n   * given value.\r\n   * @param {T} value The `next` value.\r\n   * @return {Notification<T>} The \"next\" Notification representing the\r\n   * argument.\r\n   * @nocollapse\r\n   * @deprecated It is NOT recommended to create instances of `Notification` directly.\r\n   * Rather, try to create POJOs matching the signature outlined in {@link ObservableNotification}.\r\n   * For example: `{ kind: 'N', value: 1 }`, `{ kind: 'E', error: new Error('bad') }`, or `{ kind: 'C' }`.\r\n   * Will be removed in v8.\r\n   */\r\n  static createNext<T>(value: T) {\r\n    return new Notification('N', value) as Notification<T> & NextNotification<T>;\r\n  }\r\n\r\n  /**\r\n   * A shortcut to create a Notification instance of the type `error` from a\r\n   * given error.\r\n   * @param {any} [err] The `error` error.\r\n   * @return {Notification<T>} The \"error\" Notification representing the\r\n   * argument.\r\n   * @nocollapse\r\n   * @deprecated It is NOT recommended to create instances of `Notification` directly.\r\n   * Rather, try to create POJOs matching the signature outlined in {@link ObservableNotification}.\r\n   * For example: `{ kind: 'N', value: 1 }`, `{ kind: 'E', error: new Error('bad') }`, or `{ kind: 'C' }`.\r\n   * Will be removed in v8.\r\n   */\r\n  static createError(err?: any) {\r\n    return new Notification('E', undefined, err) as Notification<never> & ErrorNotification;\r\n  }\r\n\r\n  /**\r\n   * A shortcut to create a Notification instance of the type `complete`.\r\n   * @return {Notification<any>} The valueless \"complete\" Notification.\r\n   * @nocollapse\r\n   * @deprecated It is NOT recommended to create instances of `Notification` directly.\r\n   * Rather, try to create POJOs matching the signature outlined in {@link ObservableNotification}.\r\n   * For example: `{ kind: 'N', value: 1 }`, `{ kind: 'E', error: new Error('bad') }`, or `{ kind: 'C' }`.\r\n   * Will be removed in v8.\r\n   */\r\n  static createComplete(): Notification<never> & CompleteNotification {\r\n    return Notification.completeNotification;\r\n  }\r\n}\r\n\r\n/**\r\n * Executes the appropriate handler on a passed `observer` given the `kind` of notification.\r\n * If the handler is missing it will do nothing. Even if the notification is an error, if\r\n * there is no error handler on the observer, an error will not be thrown, it will noop.\r\n * @param notification The notification object to observe.\r\n * @param observer The observer to notify.\r\n */\r\nexport function observeNotification<T>(notification: ObservableNotification<T>, observer: PartialObserver<T>) {\r\n  const { kind, value, error } = notification as any;\r\n  if (typeof kind !== 'string') {\r\n    throw new TypeError('Invalid notification, missing \"kind\"');\r\n  }\r\n  kind === 'N' ? observer.next?.(value!) : kind === 'E' ? observer.error?.(error) : observer.complete?.();\r\n}\r\n"]},"metadata":{},"sourceType":"module"}