{"ast":null,"code":"import { asyncScheduler } from '../scheduler/async';\nimport { delayWhen } from './delayWhen';\nimport { timer } from '../observable/timer';\nexport function delay(due, scheduler) {\n  if (scheduler === void 0) {\n    scheduler = asyncScheduler;\n  }\n  var duration = timer(due, scheduler);\n  return delayWhen(function () {\n    return duration;\n  });\n}","map":{"version":3,"mappings":"AAAA,SAASA,cAAc,QAAQ,oBAAoB;AAEnD,SAASC,SAAS,QAAQ,aAAa;AACvC,SAASC,KAAK,QAAQ,qBAAqB;AA0D3C,OAAM,SAAUC,KAAK,CAAIC,GAAkB,EAAEC,SAAyC;EAAzC;IAAAA,0BAAyC;EAAA;EACpF,IAAMC,QAAQ,GAAGJ,KAAK,CAACE,GAAG,EAAEC,SAAS,CAAC;EACtC,OAAOJ,SAAS,CAAC;IAAM,eAAQ;EAAR,CAAQ,CAAC;AAClC","names":["asyncScheduler","delayWhen","timer","delay","due","scheduler","duration"],"sources":["C:\\Users\\Amali\\Desktop\\Building_the_IoT_w._P2P_and_Cloud_Computing\\IoTProject\\node_modules\\rxjs\\src\\internal\\operators\\delay.ts"],"sourcesContent":["import { asyncScheduler } from '../scheduler/async';\r\nimport { MonoTypeOperatorFunction, SchedulerLike } from '../types';\r\nimport { delayWhen } from './delayWhen';\r\nimport { timer } from '../observable/timer';\r\n\r\n/**\r\n * Delays the emission of items from the source Observable by a given timeout or\r\n * until a given Date.\r\n *\r\n * <span class=\"informal\">Time shifts each item by some specified amount of\r\n * milliseconds.</span>\r\n *\r\n * ![](delay.svg)\r\n *\r\n * If the delay argument is a Number, this operator time shifts the source\r\n * Observable by that amount of time expressed in milliseconds. The relative\r\n * time intervals between the values are preserved.\r\n *\r\n * If the delay argument is a Date, this operator time shifts the start of the\r\n * Observable execution until the given date occurs.\r\n *\r\n * ## Examples\r\n *\r\n * Delay each click by one second\r\n *\r\n * ```ts\r\n * import { fromEvent, delay } from 'rxjs';\r\n *\r\n * const clicks = fromEvent(document, 'click');\r\n * const delayedClicks = clicks.pipe(delay(1000)); // each click emitted after 1 second\r\n * delayedClicks.subscribe(x => console.log(x));\r\n * ```\r\n *\r\n * Delay all clicks until a future date happens\r\n *\r\n * ```ts\r\n * import { fromEvent, delay } from 'rxjs';\r\n *\r\n * const clicks = fromEvent(document, 'click');\r\n * const date = new Date('March 15, 2050 12:00:00'); // in the future\r\n * const delayedClicks = clicks.pipe(delay(date)); // click emitted only after that date\r\n * delayedClicks.subscribe(x => console.log(x));\r\n * ```\r\n *\r\n * @see {@link delayWhen}\r\n * @see {@link throttle}\r\n * @see {@link throttleTime}\r\n * @see {@link debounce}\r\n * @see {@link debounceTime}\r\n * @see {@link sample}\r\n * @see {@link sampleTime}\r\n * @see {@link audit}\r\n * @see {@link auditTime}\r\n *\r\n * @param {number|Date} due The delay duration in milliseconds (a `number`) or\r\n * a `Date` until which the emission of the source items is delayed.\r\n * @param {SchedulerLike} [scheduler=async] The {@link SchedulerLike} to use for\r\n * managing the timers that handle the time-shift for each item.\r\n * @return A function that returns an Observable that delays the emissions of\r\n * the source Observable by the specified timeout or Date.\r\n */\r\nexport function delay<T>(due: number | Date, scheduler: SchedulerLike = asyncScheduler): MonoTypeOperatorFunction<T> {\r\n  const duration = timer(due, scheduler);\r\n  return delayWhen(() => duration);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}