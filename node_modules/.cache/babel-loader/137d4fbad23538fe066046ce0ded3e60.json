{"ast":null,"code":"import { __read, __spreadArray } from \"tslib\";\nimport { Observable } from '../Observable';\nimport { innerFrom } from './innerFrom';\nimport { argsOrArgArray } from '../util/argsOrArgArray';\nimport { EMPTY } from './empty';\nimport { createOperatorSubscriber } from '../operators/OperatorSubscriber';\nimport { popResultSelector } from '../util/args';\nexport function zip() {\n  var args = [];\n  for (var _i = 0; _i < arguments.length; _i++) {\n    args[_i] = arguments[_i];\n  }\n  var resultSelector = popResultSelector(args);\n  var sources = argsOrArgArray(args);\n  return sources.length ? new Observable(function (subscriber) {\n    var buffers = sources.map(function () {\n      return [];\n    });\n    var completed = sources.map(function () {\n      return false;\n    });\n    subscriber.add(function () {\n      buffers = completed = null;\n    });\n    var _loop_1 = function (sourceIndex) {\n      innerFrom(sources[sourceIndex]).subscribe(createOperatorSubscriber(subscriber, function (value) {\n        buffers[sourceIndex].push(value);\n        if (buffers.every(function (buffer) {\n          return buffer.length;\n        })) {\n          var result = buffers.map(function (buffer) {\n            return buffer.shift();\n          });\n          subscriber.next(resultSelector ? resultSelector.apply(void 0, __spreadArray([], __read(result))) : result);\n          if (buffers.some(function (buffer, i) {\n            return !buffer.length && completed[i];\n          })) {\n            subscriber.complete();\n          }\n        }\n      }, function () {\n        completed[sourceIndex] = true;\n        !buffers[sourceIndex].length && subscriber.complete();\n      }));\n    };\n    for (var sourceIndex = 0; !subscriber.closed && sourceIndex < sources.length; sourceIndex++) {\n      _loop_1(sourceIndex);\n    }\n    return function () {\n      buffers = completed = null;\n    };\n  }) : EMPTY;\n}","map":{"version":3,"mappings":";AAAA,SAASA,UAAU,QAAQ,eAAe;AAE1C,SAASC,SAAS,QAAQ,aAAa;AACvC,SAASC,cAAc,QAAQ,wBAAwB;AACvD,SAASC,KAAK,QAAQ,SAAS;AAC/B,SAASC,wBAAwB,QAAQ,iCAAiC;AAC1E,SAASC,iBAAiB,QAAQ,cAAc;AA4ChD,OAAM,SAAUC,GAAG;EAAC;OAAA,UAAkB,EAAlBC,qBAAkB,EAAlBA,IAAkB;IAAlBC;;EAClB,IAAMC,cAAc,GAAGJ,iBAAiB,CAACG,IAAI,CAAC;EAE9C,IAAME,OAAO,GAAGR,cAAc,CAACM,IAAI,CAA0B;EAE7D,OAAOE,OAAO,CAACC,MAAM,GACjB,IAAIX,UAAU,CAAY,UAACY,UAAU;IAGnC,IAAIC,OAAO,GAAgBH,OAAO,CAACI,GAAG,CAAC;MAAM,SAAE;IAAF,CAAE,CAAC;IAKhD,IAAIC,SAAS,GAAGL,OAAO,CAACI,GAAG,CAAC;MAAM,YAAK;IAAL,CAAK,CAAC;IAGxCF,UAAU,CAACI,GAAG,CAAC;MACbH,OAAO,GAAGE,SAAS,GAAG,IAAK;IAC7B,CAAC,CAAC;4BAKOE,WAAW;MAClBhB,SAAS,CAACS,OAAO,CAACO,WAAW,CAAC,CAAC,CAACC,SAAS,CACvCd,wBAAwB,CACtBQ,UAAU,EACV,UAACO,KAAK;QACJN,OAAO,CAACI,WAAW,CAAC,CAACG,IAAI,CAACD,KAAK,CAAC;QAIhC,IAAIN,OAAO,CAACQ,KAAK,CAAC,UAACC,MAAM;UAAK,aAAM,CAACX,MAAM;QAAb,CAAa,CAAC,EAAE;UAC5C,IAAMY,MAAM,GAAQV,OAAO,CAACC,GAAG,CAAC,UAACQ,MAAM;YAAK,aAAM,CAACE,KAAK,EAAG;UAAf,CAAe,CAAC;UAE5DZ,UAAU,CAACa,IAAI,CAAChB,cAAc,GAAGA,cAAc,wCAAIc,MAAM,MAAIA,MAAM,CAAC;UAIpE,IAAIV,OAAO,CAACa,IAAI,CAAC,UAACJ,MAAM,EAAEK,CAAC;YAAK,QAACL,MAAM,CAACX,MAAM,IAAII,SAAS,CAACY,CAAC,CAAC;UAA9B,CAA8B,CAAC,EAAE;YAC/Df,UAAU,CAACgB,QAAQ,EAAE;;;MAG3B,CAAC,EACD;QAGEb,SAAS,CAACE,WAAW,CAAC,GAAG,IAAI;QAI7B,CAACJ,OAAO,CAACI,WAAW,CAAC,CAACN,MAAM,IAAIC,UAAU,CAACgB,QAAQ,EAAE;MACvD,CAAC,CACF,CACF;;IA/BH,KAAK,IAAIX,WAAW,GAAG,CAAC,EAAE,CAACL,UAAU,CAACiB,MAAM,IAAIZ,WAAW,GAAGP,OAAO,CAACC,MAAM,EAAEM,WAAW,EAAE;cAAlFA,WAAW;;IAmCpB,OAAO;MACLJ,OAAO,GAAGE,SAAS,GAAG,IAAK;IAC7B,CAAC;EACH,CAAC,CAAC,GACFZ,KAAK;AACX","names":["Observable","innerFrom","argsOrArgArray","EMPTY","createOperatorSubscriber","popResultSelector","zip","_i","args","resultSelector","sources","length","subscriber","buffers","map","completed","add","sourceIndex","subscribe","value","push","every","buffer","result","shift","next","some","i","complete","closed"],"sources":["C:\\Users\\Amali\\Desktop\\Building_the_IoT_w._P2P_and_Cloud_Computing\\IoTProject\\node_modules\\rxjs\\src\\internal\\observable\\zip.ts"],"sourcesContent":["import { Observable } from '../Observable';\r\nimport { ObservableInputTuple } from '../types';\r\nimport { innerFrom } from './innerFrom';\r\nimport { argsOrArgArray } from '../util/argsOrArgArray';\r\nimport { EMPTY } from './empty';\r\nimport { createOperatorSubscriber } from '../operators/OperatorSubscriber';\r\nimport { popResultSelector } from '../util/args';\r\n\r\nexport function zip<A extends readonly unknown[]>(sources: [...ObservableInputTuple<A>]): Observable<A>;\r\nexport function zip<A extends readonly unknown[], R>(\r\n  sources: [...ObservableInputTuple<A>],\r\n  resultSelector: (...values: A) => R\r\n): Observable<R>;\r\nexport function zip<A extends readonly unknown[]>(...sources: [...ObservableInputTuple<A>]): Observable<A>;\r\nexport function zip<A extends readonly unknown[], R>(\r\n  ...sourcesAndResultSelector: [...ObservableInputTuple<A>, (...values: A) => R]\r\n): Observable<R>;\r\n\r\n/**\r\n * Combines multiple Observables to create an Observable whose values are calculated from the values, in order, of each\r\n * of its input Observables.\r\n *\r\n * If the last parameter is a function, this function is used to compute the created value from the input values.\r\n * Otherwise, an array of the input values is returned.\r\n *\r\n * ## Example\r\n *\r\n * Combine age and name from different sources\r\n *\r\n * ```ts\r\n * import { of, zip, map } from 'rxjs';\r\n *\r\n * const age$ = of(27, 25, 29);\r\n * const name$ = of('Foo', 'Bar', 'Beer');\r\n * const isDev$ = of(true, true, false);\r\n *\r\n * zip(age$, name$, isDev$).pipe(\r\n *   map(([age, name, isDev]) => ({ age, name, isDev }))\r\n * )\r\n * .subscribe(x => console.log(x));\r\n *\r\n * // Outputs\r\n * // { age: 27, name: 'Foo', isDev: true }\r\n * // { age: 25, name: 'Bar', isDev: true }\r\n * // { age: 29, name: 'Beer', isDev: false }\r\n * ```\r\n *\r\n * @param sources\r\n * @return {Observable<R>}\r\n */\r\nexport function zip(...args: unknown[]): Observable<unknown> {\r\n  const resultSelector = popResultSelector(args);\r\n\r\n  const sources = argsOrArgArray(args) as Observable<unknown>[];\r\n\r\n  return sources.length\r\n    ? new Observable<unknown[]>((subscriber) => {\r\n        // A collection of buffers of values from each source.\r\n        // Keyed by the same index with which the sources were passed in.\r\n        let buffers: unknown[][] = sources.map(() => []);\r\n\r\n        // An array of flags of whether or not the sources have completed.\r\n        // This is used to check to see if we should complete the result.\r\n        // Keyed by the same index with which the sources were passed in.\r\n        let completed = sources.map(() => false);\r\n\r\n        // When everything is done, release the arrays above.\r\n        subscriber.add(() => {\r\n          buffers = completed = null!;\r\n        });\r\n\r\n        // Loop over our sources and subscribe to each one. The index `i` is\r\n        // especially important here, because we use it in closures below to\r\n        // access the related buffers and completion properties\r\n        for (let sourceIndex = 0; !subscriber.closed && sourceIndex < sources.length; sourceIndex++) {\r\n          innerFrom(sources[sourceIndex]).subscribe(\r\n            createOperatorSubscriber(\r\n              subscriber,\r\n              (value) => {\r\n                buffers[sourceIndex].push(value);\r\n                // if every buffer has at least one value in it, then we\r\n                // can shift out the oldest value from each buffer and emit\r\n                // them as an array.\r\n                if (buffers.every((buffer) => buffer.length)) {\r\n                  const result: any = buffers.map((buffer) => buffer.shift()!);\r\n                  // Emit the array. If theres' a result selector, use that.\r\n                  subscriber.next(resultSelector ? resultSelector(...result) : result);\r\n                  // If any one of the sources is both complete and has an empty buffer\r\n                  // then we complete the result. This is because we cannot possibly have\r\n                  // any more values to zip together.\r\n                  if (buffers.some((buffer, i) => !buffer.length && completed[i])) {\r\n                    subscriber.complete();\r\n                  }\r\n                }\r\n              },\r\n              () => {\r\n                // This source completed. Mark it as complete so we can check it later\r\n                // if we have to.\r\n                completed[sourceIndex] = true;\r\n                // But, if this complete source has nothing in its buffer, then we\r\n                // can complete the result, because we can't possibly have any more\r\n                // values from this to zip together with the other values.\r\n                !buffers[sourceIndex].length && subscriber.complete();\r\n              }\r\n            )\r\n          );\r\n        }\r\n\r\n        // When everything is done, release the arrays above.\r\n        return () => {\r\n          buffers = completed = null!;\r\n        };\r\n      })\r\n    : EMPTY;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}