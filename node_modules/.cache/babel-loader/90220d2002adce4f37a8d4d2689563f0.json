{"ast":null,"code":"import { mergeAll } from './mergeAll';\nexport function concatAll() {\n  return mergeAll(1);\n}","map":{"version":3,"mappings":"AAAA,SAASA,QAAQ,QAAQ,YAAY;AA2DrC,OAAM,SAAUC,SAAS;EACvB,OAAOD,QAAQ,CAAC,CAAC,CAAC;AACpB","names":["mergeAll","concatAll"],"sources":["C:\\Users\\Amali\\Desktop\\Building_the_IoT_w._P2P_and_Cloud_Computing\\IoTProject\\node_modules\\rxjs\\src\\internal\\operators\\concatAll.ts"],"sourcesContent":["import { mergeAll } from './mergeAll';\r\nimport { OperatorFunction, ObservableInput, ObservedValueOf } from '../types';\r\n\r\n/**\r\n * Converts a higher-order Observable into a first-order Observable by\r\n * concatenating the inner Observables in order.\r\n *\r\n * <span class=\"informal\">Flattens an Observable-of-Observables by putting one\r\n * inner Observable after the other.</span>\r\n *\r\n * ![](concatAll.svg)\r\n *\r\n * Joins every Observable emitted by the source (a higher-order Observable), in\r\n * a serial fashion. It subscribes to each inner Observable only after the\r\n * previous inner Observable has completed, and merges all of their values into\r\n * the returned observable.\r\n *\r\n * __Warning:__ If the source Observable emits Observables quickly and\r\n * endlessly, and the inner Observables it emits generally complete slower than\r\n * the source emits, you can run into memory issues as the incoming Observables\r\n * collect in an unbounded buffer.\r\n *\r\n * Note: `concatAll` is equivalent to `mergeAll` with concurrency parameter set\r\n * to `1`.\r\n *\r\n * ## Example\r\n *\r\n * For each click event, tick every second from 0 to 3, with no concurrency\r\n *\r\n * ```ts\r\n * import { fromEvent, map, interval, take, concatAll } from 'rxjs';\r\n *\r\n * const clicks = fromEvent(document, 'click');\r\n * const higherOrder = clicks.pipe(\r\n *   map(() => interval(1000).pipe(take(4)))\r\n * );\r\n * const firstOrder = higherOrder.pipe(concatAll());\r\n * firstOrder.subscribe(x => console.log(x));\r\n *\r\n * // Results in the following:\r\n * // (results are not concurrent)\r\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\r\n * // on a 1000ms interval\r\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\r\n * ```\r\n *\r\n * @see {@link combineLatestAll}\r\n * @see {@link concat}\r\n * @see {@link concatMap}\r\n * @see {@link concatMapTo}\r\n * @see {@link exhaustAll}\r\n * @see {@link mergeAll}\r\n * @see {@link switchAll}\r\n * @see {@link switchMap}\r\n * @see {@link zipAll}\r\n *\r\n * @return A function that returns an Observable emitting values from all the\r\n * inner Observables concatenated.\r\n */\r\nexport function concatAll<O extends ObservableInput<any>>(): OperatorFunction<O, ObservedValueOf<O>> {\r\n  return mergeAll(1);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}