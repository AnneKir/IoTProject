{"ast":null,"code":"import { identity } from './identity';\nexport function pipe() {\n  var fns = [];\n  for (var _i = 0; _i < arguments.length; _i++) {\n    fns[_i] = arguments[_i];\n  }\n  return pipeFromArray(fns);\n}\nexport function pipeFromArray(fns) {\n  if (fns.length === 0) {\n    return identity;\n  }\n  if (fns.length === 1) {\n    return fns[0];\n  }\n  return function piped(input) {\n    return fns.reduce(function (prev, fn) {\n      return fn(prev);\n    }, input);\n  };\n}","map":{"version":3,"mappings":"AAAA,SAASA,QAAQ,QAAQ,YAAY;AA6ErC,OAAM,SAAUC,IAAI;EAAC;OAAA,UAAsC,EAAtCC,qBAAsC,EAAtCA,IAAsC;IAAtCC;;EACnB,OAAOC,aAAa,CAACD,GAAG,CAAC;AAC3B;AAGA,OAAM,SAAUC,aAAa,CAAOD,GAA+B;EACjE,IAAIA,GAAG,CAACE,MAAM,KAAK,CAAC,EAAE;IACpB,OAAOL,QAAmC;;EAG5C,IAAIG,GAAG,CAACE,MAAM,KAAK,CAAC,EAAE;IACpB,OAAOF,GAAG,CAAC,CAAC,CAAC;;EAGf,OAAO,SAASG,KAAK,CAACC,KAAQ;IAC5B,OAAOJ,GAAG,CAACK,MAAM,CAAC,UAACC,IAAS,EAAEC,EAAuB;MAAK,SAAE,CAACD,IAAI,CAAC;IAAR,CAAQ,EAAEF,KAAY,CAAC;EACnF,CAAC;AACH","names":["identity","pipe","_i","fns","pipeFromArray","length","piped","input","reduce","prev","fn"],"sources":["C:\\Users\\Amali\\Desktop\\Building_the_IoT_w._P2P_and_Cloud_Computing\\IoTProject\\node_modules\\rxjs\\src\\internal\\util\\pipe.ts"],"sourcesContent":["import { identity } from './identity';\r\nimport { UnaryFunction } from '../types';\r\n\r\nexport function pipe(): typeof identity;\r\nexport function pipe<T, A>(fn1: UnaryFunction<T, A>): UnaryFunction<T, A>;\r\nexport function pipe<T, A, B>(fn1: UnaryFunction<T, A>, fn2: UnaryFunction<A, B>): UnaryFunction<T, B>;\r\nexport function pipe<T, A, B, C>(fn1: UnaryFunction<T, A>, fn2: UnaryFunction<A, B>, fn3: UnaryFunction<B, C>): UnaryFunction<T, C>;\r\nexport function pipe<T, A, B, C, D>(\r\n  fn1: UnaryFunction<T, A>,\r\n  fn2: UnaryFunction<A, B>,\r\n  fn3: UnaryFunction<B, C>,\r\n  fn4: UnaryFunction<C, D>\r\n): UnaryFunction<T, D>;\r\nexport function pipe<T, A, B, C, D, E>(\r\n  fn1: UnaryFunction<T, A>,\r\n  fn2: UnaryFunction<A, B>,\r\n  fn3: UnaryFunction<B, C>,\r\n  fn4: UnaryFunction<C, D>,\r\n  fn5: UnaryFunction<D, E>\r\n): UnaryFunction<T, E>;\r\nexport function pipe<T, A, B, C, D, E, F>(\r\n  fn1: UnaryFunction<T, A>,\r\n  fn2: UnaryFunction<A, B>,\r\n  fn3: UnaryFunction<B, C>,\r\n  fn4: UnaryFunction<C, D>,\r\n  fn5: UnaryFunction<D, E>,\r\n  fn6: UnaryFunction<E, F>\r\n): UnaryFunction<T, F>;\r\nexport function pipe<T, A, B, C, D, E, F, G>(\r\n  fn1: UnaryFunction<T, A>,\r\n  fn2: UnaryFunction<A, B>,\r\n  fn3: UnaryFunction<B, C>,\r\n  fn4: UnaryFunction<C, D>,\r\n  fn5: UnaryFunction<D, E>,\r\n  fn6: UnaryFunction<E, F>,\r\n  fn7: UnaryFunction<F, G>\r\n): UnaryFunction<T, G>;\r\nexport function pipe<T, A, B, C, D, E, F, G, H>(\r\n  fn1: UnaryFunction<T, A>,\r\n  fn2: UnaryFunction<A, B>,\r\n  fn3: UnaryFunction<B, C>,\r\n  fn4: UnaryFunction<C, D>,\r\n  fn5: UnaryFunction<D, E>,\r\n  fn6: UnaryFunction<E, F>,\r\n  fn7: UnaryFunction<F, G>,\r\n  fn8: UnaryFunction<G, H>\r\n): UnaryFunction<T, H>;\r\nexport function pipe<T, A, B, C, D, E, F, G, H, I>(\r\n  fn1: UnaryFunction<T, A>,\r\n  fn2: UnaryFunction<A, B>,\r\n  fn3: UnaryFunction<B, C>,\r\n  fn4: UnaryFunction<C, D>,\r\n  fn5: UnaryFunction<D, E>,\r\n  fn6: UnaryFunction<E, F>,\r\n  fn7: UnaryFunction<F, G>,\r\n  fn8: UnaryFunction<G, H>,\r\n  fn9: UnaryFunction<H, I>\r\n): UnaryFunction<T, I>;\r\nexport function pipe<T, A, B, C, D, E, F, G, H, I>(\r\n  fn1: UnaryFunction<T, A>,\r\n  fn2: UnaryFunction<A, B>,\r\n  fn3: UnaryFunction<B, C>,\r\n  fn4: UnaryFunction<C, D>,\r\n  fn5: UnaryFunction<D, E>,\r\n  fn6: UnaryFunction<E, F>,\r\n  fn7: UnaryFunction<F, G>,\r\n  fn8: UnaryFunction<G, H>,\r\n  fn9: UnaryFunction<H, I>,\r\n  ...fns: UnaryFunction<any, any>[]\r\n): UnaryFunction<T, unknown>;\r\n\r\n/**\r\n * pipe() can be called on one or more functions, each of which can take one argument (\"UnaryFunction\")\r\n * and uses it to return a value.\r\n * It returns a function that takes one argument, passes it to the first UnaryFunction, and then\r\n * passes the result to the next one, passes that result to the next one, and so on.  \r\n */\r\nexport function pipe(...fns: Array<UnaryFunction<any, any>>): UnaryFunction<any, any> {\r\n  return pipeFromArray(fns);\r\n}\r\n\r\n/** @internal */\r\nexport function pipeFromArray<T, R>(fns: Array<UnaryFunction<T, R>>): UnaryFunction<T, R> {\r\n  if (fns.length === 0) {\r\n    return identity as UnaryFunction<any, any>;\r\n  }\r\n\r\n  if (fns.length === 1) {\r\n    return fns[0];\r\n  }\r\n\r\n  return function piped(input: T): R {\r\n    return fns.reduce((prev: any, fn: UnaryFunction<T, R>) => fn(prev), input as any);\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}