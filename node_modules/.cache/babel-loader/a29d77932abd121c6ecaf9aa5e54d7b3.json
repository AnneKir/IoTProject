{"ast":null,"code":"import { operate } from '../util/lift';\nimport { innerFrom } from '../observable/innerFrom';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function audit(durationSelector) {\n  return operate(function (source, subscriber) {\n    var hasValue = false;\n    var lastValue = null;\n    var durationSubscriber = null;\n    var isComplete = false;\n    var endDuration = function () {\n      durationSubscriber === null || durationSubscriber === void 0 ? void 0 : durationSubscriber.unsubscribe();\n      durationSubscriber = null;\n      if (hasValue) {\n        hasValue = false;\n        var value = lastValue;\n        lastValue = null;\n        subscriber.next(value);\n      }\n      isComplete && subscriber.complete();\n    };\n    var cleanupDuration = function () {\n      durationSubscriber = null;\n      isComplete && subscriber.complete();\n    };\n    source.subscribe(createOperatorSubscriber(subscriber, function (value) {\n      hasValue = true;\n      lastValue = value;\n      if (!durationSubscriber) {\n        innerFrom(durationSelector(value)).subscribe(durationSubscriber = createOperatorSubscriber(subscriber, endDuration, cleanupDuration));\n      }\n    }, function () {\n      isComplete = true;\n      (!hasValue || !durationSubscriber || durationSubscriber.closed) && subscriber.complete();\n    }));\n  });\n}","map":{"version":3,"mappings":"AAGA,SAASA,OAAO,QAAQ,cAAc;AACtC,SAASC,SAAS,QAAQ,yBAAyB;AACnD,SAASC,wBAAwB,QAAQ,sBAAsB;AA+C/D,OAAM,SAAUC,KAAK,CAAIC,gBAAoD;EAC3E,OAAOJ,OAAO,CAAC,UAACK,MAAM,EAAEC,UAAU;IAChC,IAAIC,QAAQ,GAAG,KAAK;IACpB,IAAIC,SAAS,GAAa,IAAI;IAC9B,IAAIC,kBAAkB,GAA2B,IAAI;IACrD,IAAIC,UAAU,GAAG,KAAK;IAEtB,IAAMC,WAAW,GAAG;MAClBF,kBAAkB,aAAlBA,kBAAkB,uBAAlBA,kBAAkB,CAAEG,WAAW,EAAE;MACjCH,kBAAkB,GAAG,IAAI;MACzB,IAAIF,QAAQ,EAAE;QACZA,QAAQ,GAAG,KAAK;QAChB,IAAMM,KAAK,GAAGL,SAAU;QACxBA,SAAS,GAAG,IAAI;QAChBF,UAAU,CAACQ,IAAI,CAACD,KAAK,CAAC;;MAExBH,UAAU,IAAIJ,UAAU,CAACS,QAAQ,EAAE;IACrC,CAAC;IAED,IAAMC,eAAe,GAAG;MACtBP,kBAAkB,GAAG,IAAI;MACzBC,UAAU,IAAIJ,UAAU,CAACS,QAAQ,EAAE;IACrC,CAAC;IAEDV,MAAM,CAACY,SAAS,CACdf,wBAAwB,CACtBI,UAAU,EACV,UAACO,KAAK;MACJN,QAAQ,GAAG,IAAI;MACfC,SAAS,GAAGK,KAAK;MACjB,IAAI,CAACJ,kBAAkB,EAAE;QACvBR,SAAS,CAACG,gBAAgB,CAACS,KAAK,CAAC,CAAC,CAACI,SAAS,CACzCR,kBAAkB,GAAGP,wBAAwB,CAACI,UAAU,EAAEK,WAAW,EAAEK,eAAe,CAAC,CACzF;;IAEL,CAAC,EACD;MACEN,UAAU,GAAG,IAAI;MACjB,CAAC,CAACH,QAAQ,IAAI,CAACE,kBAAkB,IAAIA,kBAAkB,CAACS,MAAM,KAAKZ,UAAU,CAACS,QAAQ,EAAE;IAC1F,CAAC,CACF,CACF;EACH,CAAC,CAAC;AACJ","names":["operate","innerFrom","createOperatorSubscriber","audit","durationSelector","source","subscriber","hasValue","lastValue","durationSubscriber","isComplete","endDuration","unsubscribe","value","next","complete","cleanupDuration","subscribe","closed"],"sources":["C:\\Users\\Amali\\Desktop\\Building_the_IoT_w._P2P_and_Cloud_Computing\\IoTProject\\node_modules\\rxjs\\src\\internal\\operators\\audit.ts"],"sourcesContent":["import { Subscriber } from '../Subscriber';\r\nimport { MonoTypeOperatorFunction, ObservableInput } from '../types';\r\n\r\nimport { operate } from '../util/lift';\r\nimport { innerFrom } from '../observable/innerFrom';\r\nimport { createOperatorSubscriber } from './OperatorSubscriber';\r\n\r\n/**\r\n * Ignores source values for a duration determined by another Observable, then\r\n * emits the most recent value from the source Observable, then repeats this\r\n * process.\r\n *\r\n * <span class=\"informal\">It's like {@link auditTime}, but the silencing\r\n * duration is determined by a second Observable.</span>\r\n *\r\n * ![](audit.svg)\r\n *\r\n * `audit` is similar to `throttle`, but emits the last value from the silenced\r\n * time window, instead of the first value. `audit` emits the most recent value\r\n * from the source Observable on the output Observable as soon as its internal\r\n * timer becomes disabled, and ignores source values while the timer is enabled.\r\n * Initially, the timer is disabled. As soon as the first source value arrives,\r\n * the timer is enabled by calling the `durationSelector` function with the\r\n * source value, which returns the \"duration\" Observable. When the duration\r\n * Observable emits a value, the timer is disabled, then the most\r\n * recent source value is emitted on the output Observable, and this process\r\n * repeats for the next source value.\r\n *\r\n * ## Example\r\n *\r\n * Emit clicks at a rate of at most one click per second\r\n *\r\n * ```ts\r\n * import { fromEvent, audit, interval } from 'rxjs';\r\n *\r\n * const clicks = fromEvent(document, 'click');\r\n * const result = clicks.pipe(audit(ev => interval(1000)));\r\n * result.subscribe(x => console.log(x));\r\n * ```\r\n *\r\n * @see {@link auditTime}\r\n * @see {@link debounce}\r\n * @see {@link delayWhen}\r\n * @see {@link sample}\r\n * @see {@link throttle}\r\n *\r\n * @param durationSelector A function\r\n * that receives a value from the source Observable, for computing the silencing\r\n * duration, returned as an Observable or a Promise.\r\n * @return A function that returns an Observable that performs rate-limiting of\r\n * emissions from the source Observable.\r\n */\r\nexport function audit<T>(durationSelector: (value: T) => ObservableInput<any>): MonoTypeOperatorFunction<T> {\r\n  return operate((source, subscriber) => {\r\n    let hasValue = false;\r\n    let lastValue: T | null = null;\r\n    let durationSubscriber: Subscriber<any> | null = null;\r\n    let isComplete = false;\r\n\r\n    const endDuration = () => {\r\n      durationSubscriber?.unsubscribe();\r\n      durationSubscriber = null;\r\n      if (hasValue) {\r\n        hasValue = false;\r\n        const value = lastValue!;\r\n        lastValue = null;\r\n        subscriber.next(value);\r\n      }\r\n      isComplete && subscriber.complete();\r\n    };\r\n\r\n    const cleanupDuration = () => {\r\n      durationSubscriber = null;\r\n      isComplete && subscriber.complete();\r\n    };\r\n\r\n    source.subscribe(\r\n      createOperatorSubscriber(\r\n        subscriber,\r\n        (value) => {\r\n          hasValue = true;\r\n          lastValue = value;\r\n          if (!durationSubscriber) {\r\n            innerFrom(durationSelector(value)).subscribe(\r\n              (durationSubscriber = createOperatorSubscriber(subscriber, endDuration, cleanupDuration))\r\n            );\r\n          }\r\n        },\r\n        () => {\r\n          isComplete = true;\r\n          (!hasValue || !durationSubscriber || durationSubscriber.closed) && subscriber.complete();\r\n        }\r\n      )\r\n    );\r\n  });\r\n}\r\n"]},"metadata":{},"sourceType":"module"}