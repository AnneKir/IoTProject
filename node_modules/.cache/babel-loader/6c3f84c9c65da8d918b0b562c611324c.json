{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { refCount as higherOrderRefCount } from '../operators/refCount';\nimport { createOperatorSubscriber } from '../operators/OperatorSubscriber';\nimport { hasLift } from '../util/lift';\nvar ConnectableObservable = function (_super) {\n  __extends(ConnectableObservable, _super);\n  function ConnectableObservable(source, subjectFactory) {\n    var _this = _super.call(this) || this;\n    _this.source = source;\n    _this.subjectFactory = subjectFactory;\n    _this._subject = null;\n    _this._refCount = 0;\n    _this._connection = null;\n    if (hasLift(source)) {\n      _this.lift = source.lift;\n    }\n    return _this;\n  }\n  ConnectableObservable.prototype._subscribe = function (subscriber) {\n    return this.getSubject().subscribe(subscriber);\n  };\n  ConnectableObservable.prototype.getSubject = function () {\n    var subject = this._subject;\n    if (!subject || subject.isStopped) {\n      this._subject = this.subjectFactory();\n    }\n    return this._subject;\n  };\n  ConnectableObservable.prototype._teardown = function () {\n    this._refCount = 0;\n    var _connection = this._connection;\n    this._subject = this._connection = null;\n    _connection === null || _connection === void 0 ? void 0 : _connection.unsubscribe();\n  };\n  ConnectableObservable.prototype.connect = function () {\n    var _this = this;\n    var connection = this._connection;\n    if (!connection) {\n      connection = this._connection = new Subscription();\n      var subject_1 = this.getSubject();\n      connection.add(this.source.subscribe(createOperatorSubscriber(subject_1, undefined, function () {\n        _this._teardown();\n        subject_1.complete();\n      }, function (err) {\n        _this._teardown();\n        subject_1.error(err);\n      }, function () {\n        return _this._teardown();\n      })));\n      if (connection.closed) {\n        this._connection = null;\n        connection = Subscription.EMPTY;\n      }\n    }\n    return connection;\n  };\n  ConnectableObservable.prototype.refCount = function () {\n    return higherOrderRefCount()(this);\n  };\n  return ConnectableObservable;\n}(Observable);\nexport { ConnectableObservable };","map":{"version":3,"mappings":";AACA,SAASA,UAAU,QAAQ,eAAe;AAE1C,SAASC,YAAY,QAAQ,iBAAiB;AAC9C,SAASC,QAAQ,IAAIC,mBAAmB,QAAQ,uBAAuB;AACvE,SAASC,wBAAwB,QAAQ,iCAAiC;AAC1E,SAASC,OAAO,QAAQ,cAAc;AAStC;EAA8CC;EAgB5C,+BAAmBC,MAAqB,EAAYC,cAAgC;IAApF,YACEC,iBAAO;IADUC,YAAM,GAANH,MAAM;IAA2BG,oBAAc,GAAdF,cAAc;IAfxDE,cAAQ,GAAsB,IAAI;IAClCA,eAAS,GAAW,CAAC;IACrBA,iBAAW,GAAwB,IAAI;IAkB/C,IAAIL,OAAO,CAACE,MAAM,CAAC,EAAE;MACnBG,KAAI,CAACC,IAAI,GAAGJ,MAAM,CAACI,IAAI;;;EAE3B;EAGUC,0CAAU,GAApB,UAAqBC,UAAyB;IAC5C,OAAO,IAAI,CAACC,UAAU,EAAE,CAACC,SAAS,CAACF,UAAU,CAAC;EAChD,CAAC;EAESD,0CAAU,GAApB;IACE,IAAMI,OAAO,GAAG,IAAI,CAACC,QAAQ;IAC7B,IAAI,CAACD,OAAO,IAAIA,OAAO,CAACE,SAAS,EAAE;MACjC,IAAI,CAACD,QAAQ,GAAG,IAAI,CAACT,cAAc,EAAE;;IAEvC,OAAO,IAAI,CAACS,QAAS;EACvB,CAAC;EAESL,yCAAS,GAAnB;IACE,IAAI,CAACO,SAAS,GAAG,CAAC;IACV,eAAW,GAAK,IAAI,YAAT;IACnB,IAAI,CAACF,QAAQ,GAAG,IAAI,CAACG,WAAW,GAAG,IAAI;IACvCA,WAAW,aAAXA,WAAW,uBAAXA,WAAW,CAAEC,WAAW,EAAE;EAC5B,CAAC;EAMDT,uCAAO,GAAP;IAAA;IACE,IAAIU,UAAU,GAAG,IAAI,CAACF,WAAW;IACjC,IAAI,CAACE,UAAU,EAAE;MACfA,UAAU,GAAG,IAAI,CAACF,WAAW,GAAG,IAAInB,YAAY,EAAE;MAClD,IAAMsB,SAAO,GAAG,IAAI,CAACT,UAAU,EAAE;MACjCQ,UAAU,CAACE,GAAG,CACZ,IAAI,CAACjB,MAAM,CAACQ,SAAS,CACnBX,wBAAwB,CACtBmB,SAAc,EACdE,SAAS,EACT;QACEf,KAAI,CAACgB,SAAS,EAAE;QAChBH,SAAO,CAACI,QAAQ,EAAE;MACpB,CAAC,EACD,UAACC,GAAG;QACFlB,KAAI,CAACgB,SAAS,EAAE;QAChBH,SAAO,CAACM,KAAK,CAACD,GAAG,CAAC;MACpB,CAAC,EACD;QAAM,YAAI,CAACF,SAAS,EAAE;MAAhB,CAAgB,CACvB,CACF,CACF;MAED,IAAIJ,UAAU,CAACQ,MAAM,EAAE;QACrB,IAAI,CAACV,WAAW,GAAG,IAAI;QACvBE,UAAU,GAAGrB,YAAY,CAAC8B,KAAK;;;IAGnC,OAAOT,UAAU;EACnB,CAAC;EAMDV,wCAAQ,GAAR;IACE,OAAOT,mBAAmB,EAAE,CAAC,IAAI,CAAkB;EACrD,CAAC;EACH,4BAAC;AAAD,CAAC,CAxF6CH,UAAU","names":["Observable","Subscription","refCount","higherOrderRefCount","createOperatorSubscriber","hasLift","__extends","source","subjectFactory","_super","_this","lift","ConnectableObservable","subscriber","getSubject","subscribe","subject","_subject","isStopped","_refCount","_connection","unsubscribe","connection","subject_1","add","undefined","_teardown","complete","err","error","closed","EMPTY"],"sourceRoot":"","sources":["../../../../src/internal/observable/ConnectableObservable.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}