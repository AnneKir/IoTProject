{"ast":null,"code":"import { Observable } from '../Observable';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { isFunction } from '../util/isFunction';\nimport { executeSchedule } from '../util/executeSchedule';\nexport function scheduleIterable(input, scheduler) {\n  return new Observable(function (subscriber) {\n    var iterator;\n    executeSchedule(subscriber, scheduler, function () {\n      iterator = input[Symbol_iterator]();\n      executeSchedule(subscriber, scheduler, function () {\n        var _a;\n        var value;\n        var done;\n        try {\n          _a = iterator.next(), value = _a.value, done = _a.done;\n        } catch (err) {\n          subscriber.error(err);\n          return;\n        }\n        if (done) {\n          subscriber.complete();\n        } else {\n          subscriber.next(value);\n        }\n      }, 0, true);\n    });\n    return function () {\n      return isFunction(iterator === null || iterator === void 0 ? void 0 : iterator.return) && iterator.return();\n    };\n  });\n}","map":{"version":3,"mappings":"AAAA,SAASA,UAAU,QAAQ,eAAe;AAE1C,SAASC,QAAQ,IAAIC,eAAe,QAAQ,oBAAoB;AAChE,SAASC,UAAU,QAAQ,oBAAoB;AAC/C,SAASC,eAAe,QAAQ,yBAAyB;AAOzD,OAAM,SAAUC,gBAAgB,CAAIC,KAAkB,EAAEC,SAAwB;EAC9E,OAAO,IAAIP,UAAU,CAAI,UAACQ,UAAU;IAClC,IAAIP,QAAwB;IAK5BG,eAAe,CAACI,UAAU,EAAED,SAAS,EAAE;MAErCN,QAAQ,GAAIK,KAAa,CAACJ,eAAe,CAAC,EAAE;MAE5CE,eAAe,CACbI,UAAU,EACVD,SAAS,EACT;;QACE,IAAIE,KAAQ;QACZ,IAAIC,IAAyB;QAC7B,IAAI;UAEDC,KAAkBV,QAAQ,CAACW,IAAI,EAAE,EAA/BH,KAAK,aAAEC,IAAI;SACf,CAAC,OAAOG,GAAG,EAAE;UAEZL,UAAU,CAACM,KAAK,CAACD,GAAG,CAAC;UACrB;;QAGF,IAAIH,IAAI,EAAE;UAKRF,UAAU,CAACO,QAAQ,EAAE;SACtB,MAAM;UAELP,UAAU,CAACI,IAAI,CAACH,KAAK,CAAC;;MAE1B,CAAC,EACD,CAAC,EACD,IAAI,CACL;IACH,CAAC,CAAC;IAMF,OAAO;MAAM,iBAAU,CAACR,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAEe,MAAM,CAAC,IAAIf,QAAQ,CAACe,MAAM,EAAE;IAAjD,CAAiD;EAChE,CAAC,CAAC;AACJ","names":["Observable","iterator","Symbol_iterator","isFunction","executeSchedule","scheduleIterable","input","scheduler","subscriber","value","done","_a","next","err","error","complete","return"],"sources":["C:\\Users\\Amali\\Desktop\\Building_the_IoT_w._P2P_and_Cloud_Computing\\IoTProject\\node_modules\\rxjs\\src\\internal\\scheduled\\scheduleIterable.ts"],"sourcesContent":["import { Observable } from '../Observable';\r\nimport { SchedulerLike } from '../types';\r\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\r\nimport { isFunction } from '../util/isFunction';\r\nimport { executeSchedule } from '../util/executeSchedule';\r\n\r\n/**\r\n * Used in {@link scheduled} to create an observable from an Iterable.\r\n * @param input The iterable to create an observable from\r\n * @param scheduler The scheduler to use\r\n */\r\nexport function scheduleIterable<T>(input: Iterable<T>, scheduler: SchedulerLike) {\r\n  return new Observable<T>((subscriber) => {\r\n    let iterator: Iterator<T, T>;\r\n\r\n    // Schedule the initial creation of the iterator from\r\n    // the iterable. This is so the code in the iterable is\r\n    // not called until the scheduled job fires.\r\n    executeSchedule(subscriber, scheduler, () => {\r\n      // Create the iterator.\r\n      iterator = (input as any)[Symbol_iterator]();\r\n\r\n      executeSchedule(\r\n        subscriber,\r\n        scheduler,\r\n        () => {\r\n          let value: T;\r\n          let done: boolean | undefined;\r\n          try {\r\n            // Pull the value out of the iterator\r\n            ({ value, done } = iterator.next());\r\n          } catch (err) {\r\n            // We got an error while pulling from the iterator\r\n            subscriber.error(err);\r\n            return;\r\n          }\r\n\r\n          if (done) {\r\n            // If it is \"done\" we just complete. This mimics the\r\n            // behavior of JavaScript's `for..of` consumption of\r\n            // iterables, which will not emit the value from an iterator\r\n            // result of `{ done: true: value: 'here' }`.\r\n            subscriber.complete();\r\n          } else {\r\n            // The iterable is not done, emit the value.\r\n            subscriber.next(value);\r\n          }\r\n        },\r\n        0,\r\n        true\r\n      );\r\n    });\r\n\r\n    // During finalization, if we see this iterator has a `return` method,\r\n    // then we know it is a Generator, and not just an Iterator. So we call\r\n    // the `return()` function. This will ensure that any `finally { }` blocks\r\n    // inside of the generator we can hit will be hit properly.\r\n    return () => isFunction(iterator?.return) && iterator.return();\r\n  });\r\n}\r\n"]},"metadata":{},"sourceType":"module"}