{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Request = exports.Polling = void 0;\nconst transport_js_1 = require(\"../transport.js\");\nconst debug_1 = __importDefault(require(\"debug\")); // debug()\nconst yeast_js_1 = require(\"../contrib/yeast.js\");\nconst parseqs_js_1 = require(\"../contrib/parseqs.js\");\nconst engine_io_parser_1 = require(\"engine.io-parser\");\nconst xmlhttprequest_js_1 = require(\"./xmlhttprequest.js\");\nconst component_emitter_1 = require(\"@socket.io/component-emitter\");\nconst util_js_1 = require(\"../util.js\");\nconst globalThis_js_1 = require(\"../globalThis.js\");\nconst debug = (0, debug_1.default)(\"engine.io-client:polling\"); // debug()\nfunction empty() {}\nconst hasXHR2 = function () {\n  const xhr = new xmlhttprequest_js_1.XHR({\n    xdomain: false\n  });\n  return null != xhr.responseType;\n}();\nclass Polling extends transport_js_1.Transport {\n  /**\n   * XHR Polling constructor.\n   *\n   * @param {Object} opts\n   * @api public\n   */\n  constructor(opts) {\n    super(opts);\n    this.polling = false;\n    if (typeof location !== \"undefined\") {\n      const isSSL = \"https:\" === location.protocol;\n      let port = location.port;\n      // some user agents have empty `location.port`\n      if (!port) {\n        port = isSSL ? \"443\" : \"80\";\n      }\n      this.xd = typeof location !== \"undefined\" && opts.hostname !== location.hostname || port !== opts.port;\n      this.xs = opts.secure !== isSSL;\n    }\n    /**\n     * XHR supports binary\n     */\n    const forceBase64 = opts && opts.forceBase64;\n    this.supportsBinary = hasXHR2 && !forceBase64;\n  }\n  /**\n   * Transport name.\n   */\n  get name() {\n    return \"polling\";\n  }\n  /**\n   * Opens the socket (triggers polling). We write a PING message to determine\n   * when the transport is open.\n   *\n   * @api private\n   */\n  doOpen() {\n    this.poll();\n  }\n  /**\n   * Pauses polling.\n   *\n   * @param {Function} callback upon buffers are flushed and transport is paused\n   * @api private\n   */\n  pause(onPause) {\n    this.readyState = \"pausing\";\n    const pause = () => {\n      debug(\"paused\");\n      this.readyState = \"paused\";\n      onPause();\n    };\n    if (this.polling || !this.writable) {\n      let total = 0;\n      if (this.polling) {\n        debug(\"we are currently polling - waiting to pause\");\n        total++;\n        this.once(\"pollComplete\", function () {\n          debug(\"pre-pause polling complete\");\n          --total || pause();\n        });\n      }\n      if (!this.writable) {\n        debug(\"we are currently writing - waiting to pause\");\n        total++;\n        this.once(\"drain\", function () {\n          debug(\"pre-pause writing complete\");\n          --total || pause();\n        });\n      }\n    } else {\n      pause();\n    }\n  }\n  /**\n   * Starts polling cycle.\n   *\n   * @api public\n   */\n  poll() {\n    debug(\"polling\");\n    this.polling = true;\n    this.doPoll();\n    this.emitReserved(\"poll\");\n  }\n  /**\n   * Overloads onData to detect payloads.\n   *\n   * @api private\n   */\n  onData(data) {\n    debug(\"polling got data %s\", data);\n    const callback = packet => {\n      // if its the first message we consider the transport open\n      if (\"opening\" === this.readyState && packet.type === \"open\") {\n        this.onOpen();\n      }\n      // if its a close packet, we close the ongoing requests\n      if (\"close\" === packet.type) {\n        this.onClose({\n          description: \"transport closed by the server\"\n        });\n        return false;\n      }\n      // otherwise bypass onData and handle the message\n      this.onPacket(packet);\n    };\n    // decode payload\n    (0, engine_io_parser_1.decodePayload)(data, this.socket.binaryType).forEach(callback);\n    // if an event did not trigger closing\n    if (\"closed\" !== this.readyState) {\n      // if we got data we're not polling\n      this.polling = false;\n      this.emitReserved(\"pollComplete\");\n      if (\"open\" === this.readyState) {\n        this.poll();\n      } else {\n        debug('ignoring poll - transport state \"%s\"', this.readyState);\n      }\n    }\n  }\n  /**\n   * For polling, send a close packet.\n   *\n   * @api private\n   */\n  doClose() {\n    const close = () => {\n      debug(\"writing close packet\");\n      this.write([{\n        type: \"close\"\n      }]);\n    };\n    if (\"open\" === this.readyState) {\n      debug(\"transport open - closing\");\n      close();\n    } else {\n      // in case we're trying to close while\n      // handshaking is in progress (GH-164)\n      debug(\"transport not open - deferring close\");\n      this.once(\"open\", close);\n    }\n  }\n  /**\n   * Writes a packets payload.\n   *\n   * @param {Array} data packets\n   * @param {Function} drain callback\n   * @api private\n   */\n  write(packets) {\n    this.writable = false;\n    (0, engine_io_parser_1.encodePayload)(packets, data => {\n      this.doWrite(data, () => {\n        this.writable = true;\n        this.emitReserved(\"drain\");\n      });\n    });\n  }\n  /**\n   * Generates uri for connection.\n   *\n   * @api private\n   */\n  uri() {\n    let query = this.query || {};\n    const schema = this.opts.secure ? \"https\" : \"http\";\n    let port = \"\";\n    // cache busting is forced\n    if (false !== this.opts.timestampRequests) {\n      query[this.opts.timestampParam] = (0, yeast_js_1.yeast)();\n    }\n    if (!this.supportsBinary && !query.sid) {\n      query.b64 = 1;\n    }\n    // avoid port if default for schema\n    if (this.opts.port && (\"https\" === schema && Number(this.opts.port) !== 443 || \"http\" === schema && Number(this.opts.port) !== 80)) {\n      port = \":\" + this.opts.port;\n    }\n    const encodedQuery = (0, parseqs_js_1.encode)(query);\n    const ipv6 = this.opts.hostname.indexOf(\":\") !== -1;\n    return schema + \"://\" + (ipv6 ? \"[\" + this.opts.hostname + \"]\" : this.opts.hostname) + port + this.opts.path + (encodedQuery.length ? \"?\" + encodedQuery : \"\");\n  }\n  /**\n   * Creates a request.\n   *\n   * @param {String} method\n   * @api private\n   */\n  request() {\n    let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    Object.assign(opts, {\n      xd: this.xd,\n      xs: this.xs\n    }, this.opts);\n    return new Request(this.uri(), opts);\n  }\n  /**\n   * Sends data.\n   *\n   * @param {String} data to send.\n   * @param {Function} called upon flush.\n   * @api private\n   */\n  doWrite(data, fn) {\n    const req = this.request({\n      method: \"POST\",\n      data: data\n    });\n    req.on(\"success\", fn);\n    req.on(\"error\", (xhrStatus, context) => {\n      this.onError(\"xhr post error\", xhrStatus, context);\n    });\n  }\n  /**\n   * Starts a poll cycle.\n   *\n   * @api private\n   */\n  doPoll() {\n    debug(\"xhr poll\");\n    const req = this.request();\n    req.on(\"data\", this.onData.bind(this));\n    req.on(\"error\", (xhrStatus, context) => {\n      this.onError(\"xhr poll error\", xhrStatus, context);\n    });\n    this.pollXhr = req;\n  }\n}\nexports.Polling = Polling;\nclass Request extends component_emitter_1.Emitter {\n  /**\n   * Request constructor\n   *\n   * @param {Object} options\n   * @api public\n   */\n  constructor(uri, opts) {\n    super();\n    (0, util_js_1.installTimerFunctions)(this, opts);\n    this.opts = opts;\n    this.method = opts.method || \"GET\";\n    this.uri = uri;\n    this.async = false !== opts.async;\n    this.data = undefined !== opts.data ? opts.data : null;\n    this.create();\n  }\n  /**\n   * Creates the XHR object and sends the request.\n   *\n   * @api private\n   */\n  create() {\n    const opts = (0, util_js_1.pick)(this.opts, \"agent\", \"pfx\", \"key\", \"passphrase\", \"cert\", \"ca\", \"ciphers\", \"rejectUnauthorized\", \"autoUnref\");\n    opts.xdomain = !!this.opts.xd;\n    opts.xscheme = !!this.opts.xs;\n    const xhr = this.xhr = new xmlhttprequest_js_1.XHR(opts);\n    try {\n      debug(\"xhr open %s: %s\", this.method, this.uri);\n      xhr.open(this.method, this.uri, this.async);\n      try {\n        if (this.opts.extraHeaders) {\n          xhr.setDisableHeaderCheck && xhr.setDisableHeaderCheck(true);\n          for (let i in this.opts.extraHeaders) {\n            if (this.opts.extraHeaders.hasOwnProperty(i)) {\n              xhr.setRequestHeader(i, this.opts.extraHeaders[i]);\n            }\n          }\n        }\n      } catch (e) {}\n      if (\"POST\" === this.method) {\n        try {\n          xhr.setRequestHeader(\"Content-type\", \"text/plain;charset=UTF-8\");\n        } catch (e) {}\n      }\n      try {\n        xhr.setRequestHeader(\"Accept\", \"*/*\");\n      } catch (e) {}\n      // ie6 check\n      if (\"withCredentials\" in xhr) {\n        xhr.withCredentials = this.opts.withCredentials;\n      }\n      if (this.opts.requestTimeout) {\n        xhr.timeout = this.opts.requestTimeout;\n      }\n      xhr.onreadystatechange = () => {\n        if (4 !== xhr.readyState) return;\n        if (200 === xhr.status || 1223 === xhr.status) {\n          this.onLoad();\n        } else {\n          // make sure the `error` event handler that's user-set\n          // does not throw in the same tick and gets caught here\n          this.setTimeoutFn(() => {\n            this.onError(typeof xhr.status === \"number\" ? xhr.status : 0);\n          }, 0);\n        }\n      };\n      debug(\"xhr data %s\", this.data);\n      xhr.send(this.data);\n    } catch (e) {\n      // Need to defer since .create() is called directly from the constructor\n      // and thus the 'error' event can only be only bound *after* this exception\n      // occurs.  Therefore, also, we cannot throw here at all.\n      this.setTimeoutFn(() => {\n        this.onError(e);\n      }, 0);\n      return;\n    }\n    if (typeof document !== \"undefined\") {\n      this.index = Request.requestsCount++;\n      Request.requests[this.index] = this;\n    }\n  }\n  /**\n   * Called upon error.\n   *\n   * @api private\n   */\n  onError(err) {\n    this.emitReserved(\"error\", err, this.xhr);\n    this.cleanup(true);\n  }\n  /**\n   * Cleans up house.\n   *\n   * @api private\n   */\n  cleanup(fromError) {\n    if (\"undefined\" === typeof this.xhr || null === this.xhr) {\n      return;\n    }\n    this.xhr.onreadystatechange = empty;\n    if (fromError) {\n      try {\n        this.xhr.abort();\n      } catch (e) {}\n    }\n    if (typeof document !== \"undefined\") {\n      delete Request.requests[this.index];\n    }\n    this.xhr = null;\n  }\n  /**\n   * Called upon load.\n   *\n   * @api private\n   */\n  onLoad() {\n    const data = this.xhr.responseText;\n    if (data !== null) {\n      this.emitReserved(\"data\", data);\n      this.emitReserved(\"success\");\n      this.cleanup();\n    }\n  }\n  /**\n   * Aborts the request.\n   *\n   * @api public\n   */\n  abort() {\n    this.cleanup();\n  }\n}\nexports.Request = Request;\nRequest.requestsCount = 0;\nRequest.requests = {};\n/**\n * Aborts pending requests when unloading the window. This is needed to prevent\n * memory leaks (e.g. when using IE) and to ensure that no spurious error is\n * emitted.\n */\nif (typeof document !== \"undefined\") {\n  // @ts-ignore\n  if (typeof attachEvent === \"function\") {\n    // @ts-ignore\n    attachEvent(\"onunload\", unloadHandler);\n  } else if (typeof addEventListener === \"function\") {\n    const terminationEvent = \"onpagehide\" in globalThis_js_1.globalThisShim ? \"pagehide\" : \"unload\";\n    addEventListener(terminationEvent, unloadHandler, false);\n  }\n}\nfunction unloadHandler() {\n  for (let i in Request.requests) {\n    if (Request.requests.hasOwnProperty(i)) {\n      Request.requests[i].abort();\n    }\n  }\n}","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","Request","Polling","transport_js_1","require","debug_1","yeast_js_1","parseqs_js_1","engine_io_parser_1","xmlhttprequest_js_1","component_emitter_1","util_js_1","globalThis_js_1","debug","default","empty","hasXHR2","xhr","XHR","xdomain","responseType","Transport","constructor","opts","polling","location","isSSL","protocol","port","xd","hostname","xs","secure","forceBase64","supportsBinary","name","doOpen","poll","pause","onPause","readyState","writable","total","once","doPoll","emitReserved","onData","data","callback","packet","type","onOpen","onClose","description","onPacket","decodePayload","socket","binaryType","forEach","doClose","close","write","packets","encodePayload","doWrite","uri","query","schema","timestampRequests","timestampParam","yeast","sid","b64","Number","encodedQuery","encode","ipv6","indexOf","path","length","request","assign","fn","req","method","on","xhrStatus","context","onError","bind","pollXhr","Emitter","installTimerFunctions","async","undefined","create","pick","xscheme","open","extraHeaders","setDisableHeaderCheck","i","hasOwnProperty","setRequestHeader","e","withCredentials","requestTimeout","timeout","onreadystatechange","status","onLoad","setTimeoutFn","send","document","index","requestsCount","requests","err","cleanup","fromError","abort","responseText","attachEvent","unloadHandler","addEventListener","terminationEvent","globalThisShim"],"sources":["C:/Users/Amali/Desktop/Building_the_IoT_w._P2P_and_Cloud_Computing/IoTProject/node_modules/engine.io-client/build/cjs/transports/polling.js"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Request = exports.Polling = void 0;\nconst transport_js_1 = require(\"../transport.js\");\nconst debug_1 = __importDefault(require(\"debug\")); // debug()\nconst yeast_js_1 = require(\"../contrib/yeast.js\");\nconst parseqs_js_1 = require(\"../contrib/parseqs.js\");\nconst engine_io_parser_1 = require(\"engine.io-parser\");\nconst xmlhttprequest_js_1 = require(\"./xmlhttprequest.js\");\nconst component_emitter_1 = require(\"@socket.io/component-emitter\");\nconst util_js_1 = require(\"../util.js\");\nconst globalThis_js_1 = require(\"../globalThis.js\");\nconst debug = (0, debug_1.default)(\"engine.io-client:polling\"); // debug()\nfunction empty() { }\nconst hasXHR2 = (function () {\n    const xhr = new xmlhttprequest_js_1.XHR({\n        xdomain: false\n    });\n    return null != xhr.responseType;\n})();\nclass Polling extends transport_js_1.Transport {\n    /**\n     * XHR Polling constructor.\n     *\n     * @param {Object} opts\n     * @api public\n     */\n    constructor(opts) {\n        super(opts);\n        this.polling = false;\n        if (typeof location !== \"undefined\") {\n            const isSSL = \"https:\" === location.protocol;\n            let port = location.port;\n            // some user agents have empty `location.port`\n            if (!port) {\n                port = isSSL ? \"443\" : \"80\";\n            }\n            this.xd =\n                (typeof location !== \"undefined\" &&\n                    opts.hostname !== location.hostname) ||\n                    port !== opts.port;\n            this.xs = opts.secure !== isSSL;\n        }\n        /**\n         * XHR supports binary\n         */\n        const forceBase64 = opts && opts.forceBase64;\n        this.supportsBinary = hasXHR2 && !forceBase64;\n    }\n    /**\n     * Transport name.\n     */\n    get name() {\n        return \"polling\";\n    }\n    /**\n     * Opens the socket (triggers polling). We write a PING message to determine\n     * when the transport is open.\n     *\n     * @api private\n     */\n    doOpen() {\n        this.poll();\n    }\n    /**\n     * Pauses polling.\n     *\n     * @param {Function} callback upon buffers are flushed and transport is paused\n     * @api private\n     */\n    pause(onPause) {\n        this.readyState = \"pausing\";\n        const pause = () => {\n            debug(\"paused\");\n            this.readyState = \"paused\";\n            onPause();\n        };\n        if (this.polling || !this.writable) {\n            let total = 0;\n            if (this.polling) {\n                debug(\"we are currently polling - waiting to pause\");\n                total++;\n                this.once(\"pollComplete\", function () {\n                    debug(\"pre-pause polling complete\");\n                    --total || pause();\n                });\n            }\n            if (!this.writable) {\n                debug(\"we are currently writing - waiting to pause\");\n                total++;\n                this.once(\"drain\", function () {\n                    debug(\"pre-pause writing complete\");\n                    --total || pause();\n                });\n            }\n        }\n        else {\n            pause();\n        }\n    }\n    /**\n     * Starts polling cycle.\n     *\n     * @api public\n     */\n    poll() {\n        debug(\"polling\");\n        this.polling = true;\n        this.doPoll();\n        this.emitReserved(\"poll\");\n    }\n    /**\n     * Overloads onData to detect payloads.\n     *\n     * @api private\n     */\n    onData(data) {\n        debug(\"polling got data %s\", data);\n        const callback = packet => {\n            // if its the first message we consider the transport open\n            if (\"opening\" === this.readyState && packet.type === \"open\") {\n                this.onOpen();\n            }\n            // if its a close packet, we close the ongoing requests\n            if (\"close\" === packet.type) {\n                this.onClose({ description: \"transport closed by the server\" });\n                return false;\n            }\n            // otherwise bypass onData and handle the message\n            this.onPacket(packet);\n        };\n        // decode payload\n        (0, engine_io_parser_1.decodePayload)(data, this.socket.binaryType).forEach(callback);\n        // if an event did not trigger closing\n        if (\"closed\" !== this.readyState) {\n            // if we got data we're not polling\n            this.polling = false;\n            this.emitReserved(\"pollComplete\");\n            if (\"open\" === this.readyState) {\n                this.poll();\n            }\n            else {\n                debug('ignoring poll - transport state \"%s\"', this.readyState);\n            }\n        }\n    }\n    /**\n     * For polling, send a close packet.\n     *\n     * @api private\n     */\n    doClose() {\n        const close = () => {\n            debug(\"writing close packet\");\n            this.write([{ type: \"close\" }]);\n        };\n        if (\"open\" === this.readyState) {\n            debug(\"transport open - closing\");\n            close();\n        }\n        else {\n            // in case we're trying to close while\n            // handshaking is in progress (GH-164)\n            debug(\"transport not open - deferring close\");\n            this.once(\"open\", close);\n        }\n    }\n    /**\n     * Writes a packets payload.\n     *\n     * @param {Array} data packets\n     * @param {Function} drain callback\n     * @api private\n     */\n    write(packets) {\n        this.writable = false;\n        (0, engine_io_parser_1.encodePayload)(packets, data => {\n            this.doWrite(data, () => {\n                this.writable = true;\n                this.emitReserved(\"drain\");\n            });\n        });\n    }\n    /**\n     * Generates uri for connection.\n     *\n     * @api private\n     */\n    uri() {\n        let query = this.query || {};\n        const schema = this.opts.secure ? \"https\" : \"http\";\n        let port = \"\";\n        // cache busting is forced\n        if (false !== this.opts.timestampRequests) {\n            query[this.opts.timestampParam] = (0, yeast_js_1.yeast)();\n        }\n        if (!this.supportsBinary && !query.sid) {\n            query.b64 = 1;\n        }\n        // avoid port if default for schema\n        if (this.opts.port &&\n            ((\"https\" === schema && Number(this.opts.port) !== 443) ||\n                (\"http\" === schema && Number(this.opts.port) !== 80))) {\n            port = \":\" + this.opts.port;\n        }\n        const encodedQuery = (0, parseqs_js_1.encode)(query);\n        const ipv6 = this.opts.hostname.indexOf(\":\") !== -1;\n        return (schema +\n            \"://\" +\n            (ipv6 ? \"[\" + this.opts.hostname + \"]\" : this.opts.hostname) +\n            port +\n            this.opts.path +\n            (encodedQuery.length ? \"?\" + encodedQuery : \"\"));\n    }\n    /**\n     * Creates a request.\n     *\n     * @param {String} method\n     * @api private\n     */\n    request(opts = {}) {\n        Object.assign(opts, { xd: this.xd, xs: this.xs }, this.opts);\n        return new Request(this.uri(), opts);\n    }\n    /**\n     * Sends data.\n     *\n     * @param {String} data to send.\n     * @param {Function} called upon flush.\n     * @api private\n     */\n    doWrite(data, fn) {\n        const req = this.request({\n            method: \"POST\",\n            data: data\n        });\n        req.on(\"success\", fn);\n        req.on(\"error\", (xhrStatus, context) => {\n            this.onError(\"xhr post error\", xhrStatus, context);\n        });\n    }\n    /**\n     * Starts a poll cycle.\n     *\n     * @api private\n     */\n    doPoll() {\n        debug(\"xhr poll\");\n        const req = this.request();\n        req.on(\"data\", this.onData.bind(this));\n        req.on(\"error\", (xhrStatus, context) => {\n            this.onError(\"xhr poll error\", xhrStatus, context);\n        });\n        this.pollXhr = req;\n    }\n}\nexports.Polling = Polling;\nclass Request extends component_emitter_1.Emitter {\n    /**\n     * Request constructor\n     *\n     * @param {Object} options\n     * @api public\n     */\n    constructor(uri, opts) {\n        super();\n        (0, util_js_1.installTimerFunctions)(this, opts);\n        this.opts = opts;\n        this.method = opts.method || \"GET\";\n        this.uri = uri;\n        this.async = false !== opts.async;\n        this.data = undefined !== opts.data ? opts.data : null;\n        this.create();\n    }\n    /**\n     * Creates the XHR object and sends the request.\n     *\n     * @api private\n     */\n    create() {\n        const opts = (0, util_js_1.pick)(this.opts, \"agent\", \"pfx\", \"key\", \"passphrase\", \"cert\", \"ca\", \"ciphers\", \"rejectUnauthorized\", \"autoUnref\");\n        opts.xdomain = !!this.opts.xd;\n        opts.xscheme = !!this.opts.xs;\n        const xhr = (this.xhr = new xmlhttprequest_js_1.XHR(opts));\n        try {\n            debug(\"xhr open %s: %s\", this.method, this.uri);\n            xhr.open(this.method, this.uri, this.async);\n            try {\n                if (this.opts.extraHeaders) {\n                    xhr.setDisableHeaderCheck && xhr.setDisableHeaderCheck(true);\n                    for (let i in this.opts.extraHeaders) {\n                        if (this.opts.extraHeaders.hasOwnProperty(i)) {\n                            xhr.setRequestHeader(i, this.opts.extraHeaders[i]);\n                        }\n                    }\n                }\n            }\n            catch (e) { }\n            if (\"POST\" === this.method) {\n                try {\n                    xhr.setRequestHeader(\"Content-type\", \"text/plain;charset=UTF-8\");\n                }\n                catch (e) { }\n            }\n            try {\n                xhr.setRequestHeader(\"Accept\", \"*/*\");\n            }\n            catch (e) { }\n            // ie6 check\n            if (\"withCredentials\" in xhr) {\n                xhr.withCredentials = this.opts.withCredentials;\n            }\n            if (this.opts.requestTimeout) {\n                xhr.timeout = this.opts.requestTimeout;\n            }\n            xhr.onreadystatechange = () => {\n                if (4 !== xhr.readyState)\n                    return;\n                if (200 === xhr.status || 1223 === xhr.status) {\n                    this.onLoad();\n                }\n                else {\n                    // make sure the `error` event handler that's user-set\n                    // does not throw in the same tick and gets caught here\n                    this.setTimeoutFn(() => {\n                        this.onError(typeof xhr.status === \"number\" ? xhr.status : 0);\n                    }, 0);\n                }\n            };\n            debug(\"xhr data %s\", this.data);\n            xhr.send(this.data);\n        }\n        catch (e) {\n            // Need to defer since .create() is called directly from the constructor\n            // and thus the 'error' event can only be only bound *after* this exception\n            // occurs.  Therefore, also, we cannot throw here at all.\n            this.setTimeoutFn(() => {\n                this.onError(e);\n            }, 0);\n            return;\n        }\n        if (typeof document !== \"undefined\") {\n            this.index = Request.requestsCount++;\n            Request.requests[this.index] = this;\n        }\n    }\n    /**\n     * Called upon error.\n     *\n     * @api private\n     */\n    onError(err) {\n        this.emitReserved(\"error\", err, this.xhr);\n        this.cleanup(true);\n    }\n    /**\n     * Cleans up house.\n     *\n     * @api private\n     */\n    cleanup(fromError) {\n        if (\"undefined\" === typeof this.xhr || null === this.xhr) {\n            return;\n        }\n        this.xhr.onreadystatechange = empty;\n        if (fromError) {\n            try {\n                this.xhr.abort();\n            }\n            catch (e) { }\n        }\n        if (typeof document !== \"undefined\") {\n            delete Request.requests[this.index];\n        }\n        this.xhr = null;\n    }\n    /**\n     * Called upon load.\n     *\n     * @api private\n     */\n    onLoad() {\n        const data = this.xhr.responseText;\n        if (data !== null) {\n            this.emitReserved(\"data\", data);\n            this.emitReserved(\"success\");\n            this.cleanup();\n        }\n    }\n    /**\n     * Aborts the request.\n     *\n     * @api public\n     */\n    abort() {\n        this.cleanup();\n    }\n}\nexports.Request = Request;\nRequest.requestsCount = 0;\nRequest.requests = {};\n/**\n * Aborts pending requests when unloading the window. This is needed to prevent\n * memory leaks (e.g. when using IE) and to ensure that no spurious error is\n * emitted.\n */\nif (typeof document !== \"undefined\") {\n    // @ts-ignore\n    if (typeof attachEvent === \"function\") {\n        // @ts-ignore\n        attachEvent(\"onunload\", unloadHandler);\n    }\n    else if (typeof addEventListener === \"function\") {\n        const terminationEvent = \"onpagehide\" in globalThis_js_1.globalThisShim ? \"pagehide\" : \"unload\";\n        addEventListener(terminationEvent, unloadHandler, false);\n    }\n}\nfunction unloadHandler() {\n    for (let i in Request.requests) {\n        if (Request.requests.hasOwnProperty(i)) {\n            Request.requests[i].abort();\n        }\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}