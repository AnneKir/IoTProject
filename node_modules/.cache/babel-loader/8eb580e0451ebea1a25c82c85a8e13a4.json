{"ast":null,"code":"import { Subject } from '../Subject';\nimport { innerFrom } from '../observable/innerFrom';\nimport { operate } from '../util/lift';\nimport { fromSubscribable } from '../observable/fromSubscribable';\nvar DEFAULT_CONFIG = {\n  connector: function () {\n    return new Subject();\n  }\n};\nexport function connect(selector, config) {\n  if (config === void 0) {\n    config = DEFAULT_CONFIG;\n  }\n  var connector = config.connector;\n  return operate(function (source, subscriber) {\n    var subject = connector();\n    innerFrom(selector(fromSubscribable(subject))).subscribe(subscriber);\n    subscriber.add(source.subscribe(subject));\n  });\n}","map":{"version":3,"mappings":"AAEA,SAASA,OAAO,QAAQ,YAAY;AACpC,SAASC,SAAS,QAAQ,yBAAyB;AACnD,SAASC,OAAO,QAAQ,cAAc;AACtC,SAASC,gBAAgB,QAAQ,gCAAgC;AAgBjE,IAAMC,cAAc,GAA2B;EAC7CC,SAAS,EAAE;IAAM,WAAIL,OAAO,EAAW;EAAtB;CAClB;AA2ED,OAAM,SAAUM,OAAO,CACrBC,QAAsC,EACtCC,MAAyC;EAAzC;IAAAA,uBAAyC;EAAA;EAEjC,aAAS,GAAKA,MAAM,UAAX;EACjB,OAAON,OAAO,CAAC,UAACO,MAAM,EAAEC,UAAU;IAChC,IAAMC,OAAO,GAAGN,SAAS,EAAE;IAC3BJ,SAAS,CAACM,QAAQ,CAACJ,gBAAgB,CAACQ,OAAO,CAAC,CAAC,CAAC,CAACC,SAAS,CAACF,UAAU,CAAC;IACpEA,UAAU,CAACG,GAAG,CAACJ,MAAM,CAACG,SAAS,CAACD,OAAO,CAAC,CAAC;EAC3C,CAAC,CAAC;AACJ","names":["Subject","innerFrom","operate","fromSubscribable","DEFAULT_CONFIG","connector","connect","selector","config","source","subscriber","subject","subscribe","add"],"sources":["C:\\Users\\Amali\\Desktop\\Building_the_IoT_w._P2P_and_Cloud_Computing\\IoTProject\\node_modules\\rxjs\\src\\internal\\operators\\connect.ts"],"sourcesContent":["import { OperatorFunction, ObservableInput, ObservedValueOf, SubjectLike } from '../types';\r\nimport { Observable } from '../Observable';\r\nimport { Subject } from '../Subject';\r\nimport { innerFrom } from '../observable/innerFrom';\r\nimport { operate } from '../util/lift';\r\nimport { fromSubscribable } from '../observable/fromSubscribable';\r\n\r\n/**\r\n * An object used to configure {@link connect} operator.\r\n */\r\nexport interface ConnectConfig<T> {\r\n  /**\r\n   * A factory function used to create the Subject through which the source\r\n   * is multicast. By default, this creates a {@link Subject}.\r\n   */\r\n  connector: () => SubjectLike<T>;\r\n}\r\n\r\n/**\r\n * The default configuration for `connect`.\r\n */\r\nconst DEFAULT_CONFIG: ConnectConfig<unknown> = {\r\n  connector: () => new Subject<unknown>(),\r\n};\r\n\r\n/**\r\n * Creates an observable by multicasting the source within a function that\r\n * allows the developer to define the usage of the multicast prior to connection.\r\n *\r\n * This is particularly useful if the observable source you wish to multicast could\r\n * be synchronous or asynchronous. This sets it apart from {@link share}, which, in the\r\n * case of totally synchronous sources will fail to share a single subscription with\r\n * multiple consumers, as by the time the subscription to the result of {@link share}\r\n * has returned, if the source is synchronous its internal reference count will jump from\r\n * 0 to 1 back to 0 and reset.\r\n *\r\n * To use `connect`, you provide a `selector` function that will give you\r\n * a multicast observable that is not yet connected. You then use that multicast observable\r\n * to create a resulting observable that, when subscribed, will set up your multicast. This is\r\n * generally, but not always, accomplished with {@link merge}.\r\n *\r\n * Note that using a {@link takeUntil} inside of `connect`'s `selector` _might_ mean you were looking\r\n * to use the {@link takeWhile} operator instead.\r\n *\r\n * When you subscribe to the result of `connect`, the `selector` function will be called. After\r\n * the `selector` function returns, the observable it returns will be subscribed to, _then_ the\r\n * multicast will be connected to the source.\r\n *\r\n * ## Example\r\n *\r\n * Sharing a totally synchronous observable\r\n *\r\n * ```ts\r\n * import { of, tap, connect, merge, map, filter } from 'rxjs';\r\n *\r\n * const source$ = of(1, 2, 3, 4, 5).pipe(\r\n *   tap({\r\n *     subscribe: () => console.log('subscription started'),\r\n *     next: n => console.log(`source emitted ${ n }`)\r\n *   })\r\n * );\r\n *\r\n * source$.pipe(\r\n *   // Notice in here we're merging 3 subscriptions to `shared$`.\r\n *   connect(shared$ => merge(\r\n *     shared$.pipe(map(n => `all ${ n }`)),\r\n *     shared$.pipe(filter(n => n % 2 === 0), map(n => `even ${ n }`)),\r\n *     shared$.pipe(filter(n => n % 2 === 1), map(n => `odd ${ n }`))\r\n *   ))\r\n * )\r\n * .subscribe(console.log);\r\n *\r\n * // Expected output: (notice only one subscription)\r\n * 'subscription started'\r\n * 'source emitted 1'\r\n * 'all 1'\r\n * 'odd 1'\r\n * 'source emitted 2'\r\n * 'all 2'\r\n * 'even 2'\r\n * 'source emitted 3'\r\n * 'all 3'\r\n * 'odd 3'\r\n * 'source emitted 4'\r\n * 'all 4'\r\n * 'even 4'\r\n * 'source emitted 5'\r\n * 'all 5'\r\n * 'odd 5'\r\n * ```\r\n *\r\n * @param selector A function used to set up the multicast. Gives you a multicast observable\r\n * that is not yet connected. With that, you're expected to create and return\r\n * and Observable, that when subscribed to, will utilize the multicast observable.\r\n * After this function is executed -- and its return value subscribed to -- the\r\n * operator will subscribe to the source, and the connection will be made.\r\n * @param config The configuration object for `connect`.\r\n */\r\nexport function connect<T, O extends ObservableInput<unknown>>(\r\n  selector: (shared: Observable<T>) => O,\r\n  config: ConnectConfig<T> = DEFAULT_CONFIG\r\n): OperatorFunction<T, ObservedValueOf<O>> {\r\n  const { connector } = config;\r\n  return operate((source, subscriber) => {\r\n    const subject = connector();\r\n    innerFrom(selector(fromSubscribable(subject))).subscribe(subscriber);\r\n    subscriber.add(source.subscribe(subject));\r\n  });\r\n}\r\n"]},"metadata":{},"sourceType":"module"}