{"ast":null,"code":"import { reduce } from './reduce';\nimport { isFunction } from '../util/isFunction';\nexport function max(comparer) {\n  return reduce(isFunction(comparer) ? function (x, y) {\n    return comparer(x, y) > 0 ? x : y;\n  } : function (x, y) {\n    return x > y ? x : y;\n  });\n}","map":{"version":3,"mappings":"AAAA,SAASA,MAAM,QAAQ,UAAU;AAEjC,SAASC,UAAU,QAAQ,oBAAoB;AAgD/C,OAAM,SAAUC,GAAG,CAAIC,QAAiC;EACtD,OAAOH,MAAM,CAACC,UAAU,CAACE,QAAQ,CAAC,GAAG,UAACC,CAAC,EAAEC,CAAC;IAAK,OAACF,QAAQ,CAACC,CAAC,EAAEC,CAAC,CAAC,GAAG,CAAC,GAAGD,CAAC,GAAGC,CAAC;EAA3B,CAA4B,GAAG,UAACD,CAAC,EAAEC,CAAC;IAAK,OAACD,CAAC,GAAGC,CAAC,GAAGD,CAAC,GAAGC,CAAC;EAAd,CAAe,CAAC;AAC1G","names":["reduce","isFunction","max","comparer","x","y"],"sources":["C:\\Users\\Amali\\Desktop\\Building_the_IoT_w._P2P_and_Cloud_Computing\\IoTProject\\node_modules\\rxjs\\src\\internal\\operators\\max.ts"],"sourcesContent":["import { reduce } from './reduce';\r\nimport { MonoTypeOperatorFunction } from '../types';\r\nimport { isFunction } from '../util/isFunction';\r\n\r\n/**\r\n * The Max operator operates on an Observable that emits numbers (or items that can be compared with a provided function),\r\n * and when source Observable completes it emits a single item: the item with the largest value.\r\n *\r\n * ![](max.png)\r\n *\r\n * ## Examples\r\n *\r\n * Get the maximal value of a series of numbers\r\n *\r\n * ```ts\r\n * import { of, max } from 'rxjs';\r\n *\r\n * of(5, 4, 7, 2, 8)\r\n *   .pipe(max())\r\n *   .subscribe(x => console.log(x));\r\n *\r\n * // Outputs\r\n * // 8\r\n * ```\r\n *\r\n * Use a comparer function to get the maximal item\r\n *\r\n * ```ts\r\n * import { of, max } from 'rxjs';\r\n *\r\n * of(\r\n *   { age: 7, name: 'Foo' },\r\n *   { age: 5, name: 'Bar' },\r\n *   { age: 9, name: 'Beer' }\r\n * ).pipe(\r\n *   max((a, b) => a.age < b.age ? -1 : 1)\r\n * )\r\n * .subscribe(x => console.log(x.name));\r\n *\r\n * // Outputs\r\n * // 'Beer'\r\n * ```\r\n *\r\n * @see {@link min}\r\n *\r\n * @param {Function} [comparer] - Optional comparer function that it will use instead of its default to compare the\r\n * value of two items.\r\n * @return A function that returns an Observable that emits item with the\r\n * largest value.\r\n */\r\nexport function max<T>(comparer?: (x: T, y: T) => number): MonoTypeOperatorFunction<T> {\r\n  return reduce(isFunction(comparer) ? (x, y) => (comparer(x, y) > 0 ? x : y) : (x, y) => (x > y ? x : y));\r\n}\r\n"]},"metadata":{},"sourceType":"module"}