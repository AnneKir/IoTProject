{"ast":null,"code":"import { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nimport { noop } from '../util/noop';\nexport function ignoreElements() {\n  return operate(function (source, subscriber) {\n    source.subscribe(createOperatorSubscriber(subscriber, noop));\n  });\n}","map":{"version":3,"mappings":"AACA,SAASA,OAAO,QAAQ,cAAc;AACtC,SAASC,wBAAwB,QAAQ,sBAAsB;AAC/D,SAASC,IAAI,QAAQ,cAAc;AAqCnC,OAAM,SAAUC,cAAc;EAC5B,OAAOH,OAAO,CAAC,UAACI,MAAM,EAAEC,UAAU;IAChCD,MAAM,CAACE,SAAS,CAACL,wBAAwB,CAACI,UAAU,EAAEH,IAAI,CAAC,CAAC;EAC9D,CAAC,CAAC;AACJ","names":["operate","createOperatorSubscriber","noop","ignoreElements","source","subscriber","subscribe"],"sources":["C:\\Users\\Amali\\Desktop\\Building_the_IoT_w._P2P_and_Cloud_Computing\\IoTProject\\node_modules\\rxjs\\src\\internal\\operators\\ignoreElements.ts"],"sourcesContent":["import { OperatorFunction } from '../types';\r\nimport { operate } from '../util/lift';\r\nimport { createOperatorSubscriber } from './OperatorSubscriber';\r\nimport { noop } from '../util/noop';\r\n\r\n/**\r\n * Ignores all items emitted by the source Observable and only passes calls of `complete` or `error`.\r\n *\r\n * ![](ignoreElements.png)\r\n *\r\n * The `ignoreElements` operator suppresses all items emitted by the source Observable,\r\n * but allows its termination notification (either `error` or `complete`) to pass through unchanged.\r\n *\r\n * If you do not care about the items being emitted by an Observable, but you do want to be notified\r\n * when it completes or when it terminates with an error, you can apply the `ignoreElements` operator\r\n * to the Observable, which will ensure that it will never call its observersâ€™ `next` handlers.\r\n *\r\n * ## Example\r\n *\r\n * Ignore all `next` emissions from the source\r\n *\r\n * ```ts\r\n * import { of, ignoreElements } from 'rxjs';\r\n *\r\n * of('you', 'talking', 'to', 'me')\r\n *   .pipe(ignoreElements())\r\n *   .subscribe({\r\n *     next: word => console.log(word),\r\n *     error: err => console.log('error:', err),\r\n *     complete: () => console.log('the end'),\r\n *   });\r\n *\r\n * // result:\r\n * // 'the end'\r\n * ```\r\n *\r\n * @return A function that returns an empty Observable that only calls\r\n * `complete` or `error`, based on which one is called by the source\r\n * Observable.\r\n */\r\nexport function ignoreElements(): OperatorFunction<unknown, never> {\r\n  return operate((source, subscriber) => {\r\n    source.subscribe(createOperatorSubscriber(subscriber, noop));\r\n  });\r\n}\r\n"]},"metadata":{},"sourceType":"module"}