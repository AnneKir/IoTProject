{"ast":null,"code":"import { asyncScheduler } from '../scheduler/async';\nimport { timer } from './timer';\nexport function interval(period, scheduler) {\n  if (period === void 0) {\n    period = 0;\n  }\n  if (scheduler === void 0) {\n    scheduler = asyncScheduler;\n  }\n  if (period < 0) {\n    period = 0;\n  }\n  return timer(period, period, scheduler);\n}","map":{"version":3,"mappings":"AACA,SAASA,cAAc,QAAQ,oBAAoB;AAEnD,SAASC,KAAK,QAAQ,SAAS;AA+C/B,OAAM,SAAUC,QAAQ,CAACC,MAAU,EAAEC,SAAyC;EAArD;IAAAD,UAAU;EAAA;EAAE;IAAAC,0BAAyC;EAAA;EAC5E,IAAID,MAAM,GAAG,CAAC,EAAE;IAEdA,MAAM,GAAG,CAAC;;EAGZ,OAAOF,KAAK,CAACE,MAAM,EAAEA,MAAM,EAAEC,SAAS,CAAC;AACzC","names":["asyncScheduler","timer","interval","period","scheduler"],"sources":["C:\\Users\\Amali\\Desktop\\Building_the_IoT_w._P2P_and_Cloud_Computing\\IoTProject\\node_modules\\rxjs\\src\\internal\\observable\\interval.ts"],"sourcesContent":["import { Observable } from '../Observable';\r\nimport { asyncScheduler } from '../scheduler/async';\r\nimport { SchedulerLike } from '../types';\r\nimport { timer } from './timer';\r\n\r\n/**\r\n * Creates an Observable that emits sequential numbers every specified\r\n * interval of time, on a specified {@link SchedulerLike}.\r\n *\r\n * <span class=\"informal\">Emits incremental numbers periodically in time.</span>\r\n *\r\n * ![](interval.png)\r\n *\r\n * `interval` returns an Observable that emits an infinite sequence of\r\n * ascending integers, with a constant interval of time of your choosing\r\n * between those emissions. The first emission is not sent immediately, but\r\n * only after the first period has passed. By default, this operator uses the\r\n * `async` {@link SchedulerLike} to provide a notion of time, but you may pass any\r\n * {@link SchedulerLike} to it.\r\n *\r\n * ## Example\r\n *\r\n * Emits ascending numbers, one every second (1000ms) up to the number 3\r\n *\r\n * ```ts\r\n * import { interval, take } from 'rxjs';\r\n *\r\n * const numbers = interval(1000);\r\n *\r\n * const takeFourNumbers = numbers.pipe(take(4));\r\n *\r\n * takeFourNumbers.subscribe(x => console.log('Next: ', x));\r\n *\r\n * // Logs:\r\n * // Next: 0\r\n * // Next: 1\r\n * // Next: 2\r\n * // Next: 3\r\n * ```\r\n *\r\n * @see {@link timer}\r\n * @see {@link delay}\r\n *\r\n * @param {number} [period=0] The interval size in milliseconds (by default)\r\n * or the time unit determined by the scheduler's clock.\r\n * @param {SchedulerLike} [scheduler=async] The {@link SchedulerLike} to use for scheduling\r\n * the emission of values, and providing a notion of \"time\".\r\n * @return {Observable} An Observable that emits a sequential number each time\r\n * interval.\r\n */\r\nexport function interval(period = 0, scheduler: SchedulerLike = asyncScheduler): Observable<number> {\r\n  if (period < 0) {\r\n    // We cannot schedule an interval in the past.\r\n    period = 0;\r\n  }\r\n\r\n  return timer(period, period, scheduler);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}