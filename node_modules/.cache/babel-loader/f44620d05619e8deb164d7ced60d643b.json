{"ast":null,"code":"import { identity } from '../util/identity';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function skipLast(skipCount) {\n  return skipCount <= 0 ? identity : operate(function (source, subscriber) {\n    var ring = new Array(skipCount);\n    var seen = 0;\n    source.subscribe(createOperatorSubscriber(subscriber, function (value) {\n      var valueIndex = seen++;\n      if (valueIndex < skipCount) {\n        ring[valueIndex] = value;\n      } else {\n        var index = valueIndex % skipCount;\n        var oldValue = ring[index];\n        ring[index] = value;\n        subscriber.next(oldValue);\n      }\n    }));\n    return function () {\n      ring = null;\n    };\n  });\n}","map":{"version":3,"mappings":"AACA,SAASA,QAAQ,QAAQ,kBAAkB;AAC3C,SAASC,OAAO,QAAQ,cAAc;AACtC,SAASC,wBAAwB,QAAQ,sBAAsB;AA4C/D,OAAM,SAAUC,QAAQ,CAAIC,SAAiB;EAC3C,OAAOA,SAAS,IAAI,CAAC,GAEjBJ,QAAQ,GACRC,OAAO,CAAC,UAACI,MAAM,EAAEC,UAAU;IAIzB,IAAIC,IAAI,GAAQ,IAAIC,KAAK,CAACJ,SAAS,CAAC;IAGpC,IAAIK,IAAI,GAAG,CAAC;IACZJ,MAAM,CAACK,SAAS,CACdR,wBAAwB,CAACI,UAAU,EAAE,UAACK,KAAK;MAKzC,IAAMC,UAAU,GAAGH,IAAI,EAAE;MACzB,IAAIG,UAAU,GAAGR,SAAS,EAAE;QAI1BG,IAAI,CAACK,UAAU,CAAC,GAAGD,KAAK;OACzB,MAAM;QAIL,IAAME,KAAK,GAAGD,UAAU,GAAGR,SAAS;QAGpC,IAAMU,QAAQ,GAAGP,IAAI,CAACM,KAAK,CAAC;QAC5BN,IAAI,CAACM,KAAK,CAAC,GAAGF,KAAK;QAKnBL,UAAU,CAACS,IAAI,CAACD,QAAQ,CAAC;;IAE7B,CAAC,CAAC,CACH;IAED,OAAO;MAELP,IAAI,GAAG,IAAK;IACd,CAAC;EACH,CAAC,CAAC;AACR","names":["identity","operate","createOperatorSubscriber","skipLast","skipCount","source","subscriber","ring","Array","seen","subscribe","value","valueIndex","index","oldValue","next"],"sources":["C:\\Users\\Amali\\Desktop\\Building_the_IoT_w._P2P_and_Cloud_Computing\\IoTProject\\node_modules\\rxjs\\src\\internal\\operators\\skipLast.ts"],"sourcesContent":["import { MonoTypeOperatorFunction } from '../types';\r\nimport { identity } from '../util/identity';\r\nimport { operate } from '../util/lift';\r\nimport { createOperatorSubscriber } from './OperatorSubscriber';\r\n\r\n/**\r\n * Skip a specified number of values before the completion of an observable.\r\n *\r\n * ![](skipLast.png)\r\n *\r\n * Returns an observable that will emit values as soon as it can, given a number of\r\n * skipped values. For example, if you `skipLast(3)` on a source, when the source\r\n * emits its fourth value, the first value the source emitted will finally be emitted\r\n * from the returned observable, as it is no longer part of what needs to be skipped.\r\n *\r\n * All values emitted by the result of `skipLast(N)` will be delayed by `N` emissions,\r\n * as each value is held in a buffer until enough values have been emitted that that\r\n * the buffered value may finally be sent to the consumer.\r\n *\r\n * After subscribing, unsubscribing will not result in the emission of the buffered\r\n * skipped values.\r\n *\r\n * ## Example\r\n *\r\n * Skip the last 2 values of an observable with many values\r\n *\r\n * ```ts\r\n * import { of, skipLast } from 'rxjs';\r\n *\r\n * const numbers = of(1, 2, 3, 4, 5);\r\n * const skipLastTwo = numbers.pipe(skipLast(2));\r\n * skipLastTwo.subscribe(x => console.log(x));\r\n *\r\n * // Results in:\r\n * // 1 2 3\r\n * // (4 and 5 are skipped)\r\n * ```\r\n *\r\n * @see {@link skip}\r\n * @see {@link skipUntil}\r\n * @see {@link skipWhile}\r\n * @see {@link take}\r\n *\r\n * @param skipCount Number of elements to skip from the end of the source Observable.\r\n * @return A function that returns an Observable that skips the last `count`\r\n * values emitted by the source Observable.\r\n */\r\nexport function skipLast<T>(skipCount: number): MonoTypeOperatorFunction<T> {\r\n  return skipCount <= 0\r\n    ? // For skipCounts less than or equal to zero, we are just mirroring the source.\r\n      identity\r\n    : operate((source, subscriber) => {\r\n        // A ring buffer to hold the values while we wait to see\r\n        // if we can emit it or it's part of the \"skipped\" last values.\r\n        // Note that it is the _same size_ as the skip count.\r\n        let ring: T[] = new Array(skipCount);\r\n        // The number of values seen so far. This is used to get\r\n        // the index of the current value when it arrives.\r\n        let seen = 0;\r\n        source.subscribe(\r\n          createOperatorSubscriber(subscriber, (value) => {\r\n            // Get the index of the value we have right now\r\n            // relative to all other values we've seen, then\r\n            // increment `seen`. This ensures we've moved to\r\n            // the next slot in our ring buffer.\r\n            const valueIndex = seen++;\r\n            if (valueIndex < skipCount) {\r\n              // If we haven't seen enough values to fill our buffer yet,\r\n              // Then we aren't to a number of seen values where we can\r\n              // emit anything, so let's just start by filling the ring buffer.\r\n              ring[valueIndex] = value;\r\n            } else {\r\n              // We are traversing over the ring array in such\r\n              // a way that when we get to the end, we loop back\r\n              // and go to the start.\r\n              const index = valueIndex % skipCount;\r\n              // Pull the oldest value out so we can emit it,\r\n              // and stuff the new value in it's place.\r\n              const oldValue = ring[index];\r\n              ring[index] = value;\r\n              // Emit the old value. It is important that this happens\r\n              // after we swap the value in the buffer, if it happens\r\n              // before we swap the value in the buffer, then a synchronous\r\n              // source can get the buffer out of whack.\r\n              subscriber.next(oldValue);\r\n            }\r\n          })\r\n        );\r\n\r\n        return () => {\r\n          // Release our values in memory\r\n          ring = null!;\r\n        };\r\n      });\r\n}\r\n"]},"metadata":{},"sourceType":"module"}