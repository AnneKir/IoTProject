{"ast":null,"code":"/* Protocol - protocol constants */\nconst protocol = module.exports;\n\n/* Command code => mnemonic */\nprotocol.types = {\n  0: 'reserved',\n  1: 'connect',\n  2: 'connack',\n  3: 'publish',\n  4: 'puback',\n  5: 'pubrec',\n  6: 'pubrel',\n  7: 'pubcomp',\n  8: 'subscribe',\n  9: 'suback',\n  10: 'unsubscribe',\n  11: 'unsuback',\n  12: 'pingreq',\n  13: 'pingresp',\n  14: 'disconnect',\n  15: 'auth'\n};\n\n/* Mnemonic => Command code */\nprotocol.codes = {};\nfor (const k in protocol.types) {\n  const v = protocol.types[k];\n  protocol.codes[v] = k;\n}\n\n/* Header */\nprotocol.CMD_SHIFT = 4;\nprotocol.CMD_MASK = 0xF0;\nprotocol.DUP_MASK = 0x08;\nprotocol.QOS_MASK = 0x03;\nprotocol.QOS_SHIFT = 1;\nprotocol.RETAIN_MASK = 0x01;\n\n/* Length */\nprotocol.VARBYTEINT_MASK = 0x7F;\nprotocol.VARBYTEINT_FIN_MASK = 0x80;\nprotocol.VARBYTEINT_MAX = 268435455;\n\n/* Connack */\nprotocol.SESSIONPRESENT_MASK = 0x01;\nprotocol.SESSIONPRESENT_HEADER = Buffer.from([protocol.SESSIONPRESENT_MASK]);\nprotocol.CONNACK_HEADER = Buffer.from([protocol.codes.connack << protocol.CMD_SHIFT]);\n\n/* Connect */\nprotocol.USERNAME_MASK = 0x80;\nprotocol.PASSWORD_MASK = 0x40;\nprotocol.WILL_RETAIN_MASK = 0x20;\nprotocol.WILL_QOS_MASK = 0x18;\nprotocol.WILL_QOS_SHIFT = 3;\nprotocol.WILL_FLAG_MASK = 0x04;\nprotocol.CLEAN_SESSION_MASK = 0x02;\nprotocol.CONNECT_HEADER = Buffer.from([protocol.codes.connect << protocol.CMD_SHIFT]);\n\n/* Properties */\nprotocol.properties = {\n  sessionExpiryInterval: 17,\n  willDelayInterval: 24,\n  receiveMaximum: 33,\n  maximumPacketSize: 39,\n  topicAliasMaximum: 34,\n  requestResponseInformation: 25,\n  requestProblemInformation: 23,\n  userProperties: 38,\n  authenticationMethod: 21,\n  authenticationData: 22,\n  payloadFormatIndicator: 1,\n  messageExpiryInterval: 2,\n  contentType: 3,\n  responseTopic: 8,\n  correlationData: 9,\n  maximumQoS: 36,\n  retainAvailable: 37,\n  assignedClientIdentifier: 18,\n  reasonString: 31,\n  wildcardSubscriptionAvailable: 40,\n  subscriptionIdentifiersAvailable: 41,\n  sharedSubscriptionAvailable: 42,\n  serverKeepAlive: 19,\n  responseInformation: 26,\n  serverReference: 28,\n  topicAlias: 35,\n  subscriptionIdentifier: 11\n};\nprotocol.propertiesCodes = {};\nfor (const prop in protocol.properties) {\n  const id = protocol.properties[prop];\n  protocol.propertiesCodes[id] = prop;\n}\nprotocol.propertiesTypes = {\n  sessionExpiryInterval: 'int32',\n  willDelayInterval: 'int32',\n  receiveMaximum: 'int16',\n  maximumPacketSize: 'int32',\n  topicAliasMaximum: 'int16',\n  requestResponseInformation: 'byte',\n  requestProblemInformation: 'byte',\n  userProperties: 'pair',\n  authenticationMethod: 'string',\n  authenticationData: 'binary',\n  payloadFormatIndicator: 'byte',\n  messageExpiryInterval: 'int32',\n  contentType: 'string',\n  responseTopic: 'string',\n  correlationData: 'binary',\n  maximumQoS: 'int8',\n  retainAvailable: 'byte',\n  assignedClientIdentifier: 'string',\n  reasonString: 'string',\n  wildcardSubscriptionAvailable: 'byte',\n  subscriptionIdentifiersAvailable: 'byte',\n  sharedSubscriptionAvailable: 'byte',\n  serverKeepAlive: 'int16',\n  responseInformation: 'string',\n  serverReference: 'string',\n  topicAlias: 'int16',\n  subscriptionIdentifier: 'var'\n};\nfunction genHeader(type) {\n  return [0, 1, 2].map(qos => {\n    return [0, 1].map(dup => {\n      return [0, 1].map(retain => {\n        const buf = Buffer.alloc(1);\n        buf.writeUInt8(protocol.codes[type] << protocol.CMD_SHIFT | (dup ? protocol.DUP_MASK : 0) | qos << protocol.QOS_SHIFT | retain, 0, true);\n        return buf;\n      });\n    });\n  });\n}\n\n/* Publish */\nprotocol.PUBLISH_HEADER = genHeader('publish');\n\n/* Subscribe */\nprotocol.SUBSCRIBE_HEADER = genHeader('subscribe');\nprotocol.SUBSCRIBE_OPTIONS_QOS_MASK = 0x03;\nprotocol.SUBSCRIBE_OPTIONS_NL_MASK = 0x01;\nprotocol.SUBSCRIBE_OPTIONS_NL_SHIFT = 2;\nprotocol.SUBSCRIBE_OPTIONS_RAP_MASK = 0x01;\nprotocol.SUBSCRIBE_OPTIONS_RAP_SHIFT = 3;\nprotocol.SUBSCRIBE_OPTIONS_RH_MASK = 0x03;\nprotocol.SUBSCRIBE_OPTIONS_RH_SHIFT = 4;\nprotocol.SUBSCRIBE_OPTIONS_RH = [0x00, 0x10, 0x20];\nprotocol.SUBSCRIBE_OPTIONS_NL = 0x04;\nprotocol.SUBSCRIBE_OPTIONS_RAP = 0x08;\nprotocol.SUBSCRIBE_OPTIONS_QOS = [0x00, 0x01, 0x02];\n\n/* Unsubscribe */\nprotocol.UNSUBSCRIBE_HEADER = genHeader('unsubscribe');\n\n/* Confirmations */\nprotocol.ACKS = {\n  unsuback: genHeader('unsuback'),\n  puback: genHeader('puback'),\n  pubcomp: genHeader('pubcomp'),\n  pubrel: genHeader('pubrel'),\n  pubrec: genHeader('pubrec')\n};\nprotocol.SUBACK_HEADER = Buffer.from([protocol.codes.suback << protocol.CMD_SHIFT]);\n\n/* Protocol versions */\nprotocol.VERSION3 = Buffer.from([3]);\nprotocol.VERSION4 = Buffer.from([4]);\nprotocol.VERSION5 = Buffer.from([5]);\nprotocol.VERSION131 = Buffer.from([131]);\nprotocol.VERSION132 = Buffer.from([132]);\n\n/* QoS */\nprotocol.QOS = [0, 1, 2].map(qos => {\n  return Buffer.from([qos]);\n});\n\n/* Empty packets */\nprotocol.EMPTY = {\n  pingreq: Buffer.from([protocol.codes.pingreq << 4, 0]),\n  pingresp: Buffer.from([protocol.codes.pingresp << 4, 0]),\n  disconnect: Buffer.from([protocol.codes.disconnect << 4, 0])\n};","map":{"version":3,"names":["protocol","module","exports","types","codes","k","v","CMD_SHIFT","CMD_MASK","DUP_MASK","QOS_MASK","QOS_SHIFT","RETAIN_MASK","VARBYTEINT_MASK","VARBYTEINT_FIN_MASK","VARBYTEINT_MAX","SESSIONPRESENT_MASK","SESSIONPRESENT_HEADER","Buffer","from","CONNACK_HEADER","connack","USERNAME_MASK","PASSWORD_MASK","WILL_RETAIN_MASK","WILL_QOS_MASK","WILL_QOS_SHIFT","WILL_FLAG_MASK","CLEAN_SESSION_MASK","CONNECT_HEADER","connect","properties","sessionExpiryInterval","willDelayInterval","receiveMaximum","maximumPacketSize","topicAliasMaximum","requestResponseInformation","requestProblemInformation","userProperties","authenticationMethod","authenticationData","payloadFormatIndicator","messageExpiryInterval","contentType","responseTopic","correlationData","maximumQoS","retainAvailable","assignedClientIdentifier","reasonString","wildcardSubscriptionAvailable","subscriptionIdentifiersAvailable","sharedSubscriptionAvailable","serverKeepAlive","responseInformation","serverReference","topicAlias","subscriptionIdentifier","propertiesCodes","prop","id","propertiesTypes","genHeader","type","map","qos","dup","retain","buf","alloc","writeUInt8","PUBLISH_HEADER","SUBSCRIBE_HEADER","SUBSCRIBE_OPTIONS_QOS_MASK","SUBSCRIBE_OPTIONS_NL_MASK","SUBSCRIBE_OPTIONS_NL_SHIFT","SUBSCRIBE_OPTIONS_RAP_MASK","SUBSCRIBE_OPTIONS_RAP_SHIFT","SUBSCRIBE_OPTIONS_RH_MASK","SUBSCRIBE_OPTIONS_RH_SHIFT","SUBSCRIBE_OPTIONS_RH","SUBSCRIBE_OPTIONS_NL","SUBSCRIBE_OPTIONS_RAP","SUBSCRIBE_OPTIONS_QOS","UNSUBSCRIBE_HEADER","ACKS","unsuback","puback","pubcomp","pubrel","pubrec","SUBACK_HEADER","suback","VERSION3","VERSION4","VERSION5","VERSION131","VERSION132","QOS","EMPTY","pingreq","pingresp","disconnect"],"sources":["/Users/athallenberg/Dropbox/Kandidat/IoT/IoTProject/node_modules/mqtt-packet/constants.js"],"sourcesContent":["/* Protocol - protocol constants */\nconst protocol = module.exports\n\n/* Command code => mnemonic */\nprotocol.types = {\n  0: 'reserved',\n  1: 'connect',\n  2: 'connack',\n  3: 'publish',\n  4: 'puback',\n  5: 'pubrec',\n  6: 'pubrel',\n  7: 'pubcomp',\n  8: 'subscribe',\n  9: 'suback',\n  10: 'unsubscribe',\n  11: 'unsuback',\n  12: 'pingreq',\n  13: 'pingresp',\n  14: 'disconnect',\n  15: 'auth'\n}\n\n/* Mnemonic => Command code */\nprotocol.codes = {}\nfor (const k in protocol.types) {\n  const v = protocol.types[k]\n  protocol.codes[v] = k\n}\n\n/* Header */\nprotocol.CMD_SHIFT = 4\nprotocol.CMD_MASK = 0xF0\nprotocol.DUP_MASK = 0x08\nprotocol.QOS_MASK = 0x03\nprotocol.QOS_SHIFT = 1\nprotocol.RETAIN_MASK = 0x01\n\n/* Length */\nprotocol.VARBYTEINT_MASK = 0x7F\nprotocol.VARBYTEINT_FIN_MASK = 0x80\nprotocol.VARBYTEINT_MAX = 268435455\n\n/* Connack */\nprotocol.SESSIONPRESENT_MASK = 0x01\nprotocol.SESSIONPRESENT_HEADER = Buffer.from([protocol.SESSIONPRESENT_MASK])\nprotocol.CONNACK_HEADER = Buffer.from([protocol.codes.connack << protocol.CMD_SHIFT])\n\n/* Connect */\nprotocol.USERNAME_MASK = 0x80\nprotocol.PASSWORD_MASK = 0x40\nprotocol.WILL_RETAIN_MASK = 0x20\nprotocol.WILL_QOS_MASK = 0x18\nprotocol.WILL_QOS_SHIFT = 3\nprotocol.WILL_FLAG_MASK = 0x04\nprotocol.CLEAN_SESSION_MASK = 0x02\nprotocol.CONNECT_HEADER = Buffer.from([protocol.codes.connect << protocol.CMD_SHIFT])\n\n/* Properties */\nprotocol.properties = {\n  sessionExpiryInterval: 17,\n  willDelayInterval: 24,\n  receiveMaximum: 33,\n  maximumPacketSize: 39,\n  topicAliasMaximum: 34,\n  requestResponseInformation: 25,\n  requestProblemInformation: 23,\n  userProperties: 38,\n  authenticationMethod: 21,\n  authenticationData: 22,\n  payloadFormatIndicator: 1,\n  messageExpiryInterval: 2,\n  contentType: 3,\n  responseTopic: 8,\n  correlationData: 9,\n  maximumQoS: 36,\n  retainAvailable: 37,\n  assignedClientIdentifier: 18,\n  reasonString: 31,\n  wildcardSubscriptionAvailable: 40,\n  subscriptionIdentifiersAvailable: 41,\n  sharedSubscriptionAvailable: 42,\n  serverKeepAlive: 19,\n  responseInformation: 26,\n  serverReference: 28,\n  topicAlias: 35,\n  subscriptionIdentifier: 11\n}\nprotocol.propertiesCodes = {}\nfor (const prop in protocol.properties) {\n  const id = protocol.properties[prop]\n  protocol.propertiesCodes[id] = prop\n}\nprotocol.propertiesTypes = {\n  sessionExpiryInterval: 'int32',\n  willDelayInterval: 'int32',\n  receiveMaximum: 'int16',\n  maximumPacketSize: 'int32',\n  topicAliasMaximum: 'int16',\n  requestResponseInformation: 'byte',\n  requestProblemInformation: 'byte',\n  userProperties: 'pair',\n  authenticationMethod: 'string',\n  authenticationData: 'binary',\n  payloadFormatIndicator: 'byte',\n  messageExpiryInterval: 'int32',\n  contentType: 'string',\n  responseTopic: 'string',\n  correlationData: 'binary',\n  maximumQoS: 'int8',\n  retainAvailable: 'byte',\n  assignedClientIdentifier: 'string',\n  reasonString: 'string',\n  wildcardSubscriptionAvailable: 'byte',\n  subscriptionIdentifiersAvailable: 'byte',\n  sharedSubscriptionAvailable: 'byte',\n  serverKeepAlive: 'int16',\n  responseInformation: 'string',\n  serverReference: 'string',\n  topicAlias: 'int16',\n  subscriptionIdentifier: 'var'\n}\n\nfunction genHeader (type) {\n  return [0, 1, 2].map(qos => {\n    return [0, 1].map(dup => {\n      return [0, 1].map(retain => {\n        const buf = Buffer.alloc(1)\n        buf.writeUInt8(\n          protocol.codes[type] << protocol.CMD_SHIFT |\n          (dup ? protocol.DUP_MASK : 0) |\n          qos << protocol.QOS_SHIFT | retain, 0, true)\n        return buf\n      })\n    })\n  })\n}\n\n/* Publish */\nprotocol.PUBLISH_HEADER = genHeader('publish')\n\n/* Subscribe */\nprotocol.SUBSCRIBE_HEADER = genHeader('subscribe')\nprotocol.SUBSCRIBE_OPTIONS_QOS_MASK = 0x03\nprotocol.SUBSCRIBE_OPTIONS_NL_MASK = 0x01\nprotocol.SUBSCRIBE_OPTIONS_NL_SHIFT = 2\nprotocol.SUBSCRIBE_OPTIONS_RAP_MASK = 0x01\nprotocol.SUBSCRIBE_OPTIONS_RAP_SHIFT = 3\nprotocol.SUBSCRIBE_OPTIONS_RH_MASK = 0x03\nprotocol.SUBSCRIBE_OPTIONS_RH_SHIFT = 4\nprotocol.SUBSCRIBE_OPTIONS_RH = [0x00, 0x10, 0x20]\nprotocol.SUBSCRIBE_OPTIONS_NL = 0x04\nprotocol.SUBSCRIBE_OPTIONS_RAP = 0x08\nprotocol.SUBSCRIBE_OPTIONS_QOS = [0x00, 0x01, 0x02]\n\n/* Unsubscribe */\nprotocol.UNSUBSCRIBE_HEADER = genHeader('unsubscribe')\n\n/* Confirmations */\nprotocol.ACKS = {\n  unsuback: genHeader('unsuback'),\n  puback: genHeader('puback'),\n  pubcomp: genHeader('pubcomp'),\n  pubrel: genHeader('pubrel'),\n  pubrec: genHeader('pubrec')\n}\n\nprotocol.SUBACK_HEADER = Buffer.from([protocol.codes.suback << protocol.CMD_SHIFT])\n\n/* Protocol versions */\nprotocol.VERSION3 = Buffer.from([3])\nprotocol.VERSION4 = Buffer.from([4])\nprotocol.VERSION5 = Buffer.from([5])\nprotocol.VERSION131 = Buffer.from([131])\nprotocol.VERSION132 = Buffer.from([132])\n\n/* QoS */\nprotocol.QOS = [0, 1, 2].map(qos => {\n  return Buffer.from([qos])\n})\n\n/* Empty packets */\nprotocol.EMPTY = {\n  pingreq: Buffer.from([protocol.codes.pingreq << 4, 0]),\n  pingresp: Buffer.from([protocol.codes.pingresp << 4, 0]),\n  disconnect: Buffer.from([protocol.codes.disconnect << 4, 0])\n}\n"],"mappings":"AAAA;AACA,MAAMA,QAAQ,GAAGC,MAAM,CAACC,OAAO;;AAE/B;AACAF,QAAQ,CAACG,KAAK,GAAG;EACf,CAAC,EAAE,UAAU;EACb,CAAC,EAAE,SAAS;EACZ,CAAC,EAAE,SAAS;EACZ,CAAC,EAAE,SAAS;EACZ,CAAC,EAAE,QAAQ;EACX,CAAC,EAAE,QAAQ;EACX,CAAC,EAAE,QAAQ;EACX,CAAC,EAAE,SAAS;EACZ,CAAC,EAAE,WAAW;EACd,CAAC,EAAE,QAAQ;EACX,EAAE,EAAE,aAAa;EACjB,EAAE,EAAE,UAAU;EACd,EAAE,EAAE,SAAS;EACb,EAAE,EAAE,UAAU;EACd,EAAE,EAAE,YAAY;EAChB,EAAE,EAAE;AACN,CAAC;;AAED;AACAH,QAAQ,CAACI,KAAK,GAAG,CAAC,CAAC;AACnB,KAAK,MAAMC,CAAC,IAAIL,QAAQ,CAACG,KAAK,EAAE;EAC9B,MAAMG,CAAC,GAAGN,QAAQ,CAACG,KAAK,CAACE,CAAC,CAAC;EAC3BL,QAAQ,CAACI,KAAK,CAACE,CAAC,CAAC,GAAGD,CAAC;AACvB;;AAEA;AACAL,QAAQ,CAACO,SAAS,GAAG,CAAC;AACtBP,QAAQ,CAACQ,QAAQ,GAAG,IAAI;AACxBR,QAAQ,CAACS,QAAQ,GAAG,IAAI;AACxBT,QAAQ,CAACU,QAAQ,GAAG,IAAI;AACxBV,QAAQ,CAACW,SAAS,GAAG,CAAC;AACtBX,QAAQ,CAACY,WAAW,GAAG,IAAI;;AAE3B;AACAZ,QAAQ,CAACa,eAAe,GAAG,IAAI;AAC/Bb,QAAQ,CAACc,mBAAmB,GAAG,IAAI;AACnCd,QAAQ,CAACe,cAAc,GAAG,SAAS;;AAEnC;AACAf,QAAQ,CAACgB,mBAAmB,GAAG,IAAI;AACnChB,QAAQ,CAACiB,qBAAqB,GAAGC,MAAM,CAACC,IAAI,CAAC,CAACnB,QAAQ,CAACgB,mBAAmB,CAAC,CAAC;AAC5EhB,QAAQ,CAACoB,cAAc,GAAGF,MAAM,CAACC,IAAI,CAAC,CAACnB,QAAQ,CAACI,KAAK,CAACiB,OAAO,IAAIrB,QAAQ,CAACO,SAAS,CAAC,CAAC;;AAErF;AACAP,QAAQ,CAACsB,aAAa,GAAG,IAAI;AAC7BtB,QAAQ,CAACuB,aAAa,GAAG,IAAI;AAC7BvB,QAAQ,CAACwB,gBAAgB,GAAG,IAAI;AAChCxB,QAAQ,CAACyB,aAAa,GAAG,IAAI;AAC7BzB,QAAQ,CAAC0B,cAAc,GAAG,CAAC;AAC3B1B,QAAQ,CAAC2B,cAAc,GAAG,IAAI;AAC9B3B,QAAQ,CAAC4B,kBAAkB,GAAG,IAAI;AAClC5B,QAAQ,CAAC6B,cAAc,GAAGX,MAAM,CAACC,IAAI,CAAC,CAACnB,QAAQ,CAACI,KAAK,CAAC0B,OAAO,IAAI9B,QAAQ,CAACO,SAAS,CAAC,CAAC;;AAErF;AACAP,QAAQ,CAAC+B,UAAU,GAAG;EACpBC,qBAAqB,EAAE,EAAE;EACzBC,iBAAiB,EAAE,EAAE;EACrBC,cAAc,EAAE,EAAE;EAClBC,iBAAiB,EAAE,EAAE;EACrBC,iBAAiB,EAAE,EAAE;EACrBC,0BAA0B,EAAE,EAAE;EAC9BC,yBAAyB,EAAE,EAAE;EAC7BC,cAAc,EAAE,EAAE;EAClBC,oBAAoB,EAAE,EAAE;EACxBC,kBAAkB,EAAE,EAAE;EACtBC,sBAAsB,EAAE,CAAC;EACzBC,qBAAqB,EAAE,CAAC;EACxBC,WAAW,EAAE,CAAC;EACdC,aAAa,EAAE,CAAC;EAChBC,eAAe,EAAE,CAAC;EAClBC,UAAU,EAAE,EAAE;EACdC,eAAe,EAAE,EAAE;EACnBC,wBAAwB,EAAE,EAAE;EAC5BC,YAAY,EAAE,EAAE;EAChBC,6BAA6B,EAAE,EAAE;EACjCC,gCAAgC,EAAE,EAAE;EACpCC,2BAA2B,EAAE,EAAE;EAC/BC,eAAe,EAAE,EAAE;EACnBC,mBAAmB,EAAE,EAAE;EACvBC,eAAe,EAAE,EAAE;EACnBC,UAAU,EAAE,EAAE;EACdC,sBAAsB,EAAE;AAC1B,CAAC;AACD1D,QAAQ,CAAC2D,eAAe,GAAG,CAAC,CAAC;AAC7B,KAAK,MAAMC,IAAI,IAAI5D,QAAQ,CAAC+B,UAAU,EAAE;EACtC,MAAM8B,EAAE,GAAG7D,QAAQ,CAAC+B,UAAU,CAAC6B,IAAI,CAAC;EACpC5D,QAAQ,CAAC2D,eAAe,CAACE,EAAE,CAAC,GAAGD,IAAI;AACrC;AACA5D,QAAQ,CAAC8D,eAAe,GAAG;EACzB9B,qBAAqB,EAAE,OAAO;EAC9BC,iBAAiB,EAAE,OAAO;EAC1BC,cAAc,EAAE,OAAO;EACvBC,iBAAiB,EAAE,OAAO;EAC1BC,iBAAiB,EAAE,OAAO;EAC1BC,0BAA0B,EAAE,MAAM;EAClCC,yBAAyB,EAAE,MAAM;EACjCC,cAAc,EAAE,MAAM;EACtBC,oBAAoB,EAAE,QAAQ;EAC9BC,kBAAkB,EAAE,QAAQ;EAC5BC,sBAAsB,EAAE,MAAM;EAC9BC,qBAAqB,EAAE,OAAO;EAC9BC,WAAW,EAAE,QAAQ;EACrBC,aAAa,EAAE,QAAQ;EACvBC,eAAe,EAAE,QAAQ;EACzBC,UAAU,EAAE,MAAM;EAClBC,eAAe,EAAE,MAAM;EACvBC,wBAAwB,EAAE,QAAQ;EAClCC,YAAY,EAAE,QAAQ;EACtBC,6BAA6B,EAAE,MAAM;EACrCC,gCAAgC,EAAE,MAAM;EACxCC,2BAA2B,EAAE,MAAM;EACnCC,eAAe,EAAE,OAAO;EACxBC,mBAAmB,EAAE,QAAQ;EAC7BC,eAAe,EAAE,QAAQ;EACzBC,UAAU,EAAE,OAAO;EACnBC,sBAAsB,EAAE;AAC1B,CAAC;AAED,SAASK,SAAS,CAAEC,IAAI,EAAE;EACxB,OAAO,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAACC,GAAG,CAACC,GAAG,IAAI;IAC1B,OAAO,CAAC,CAAC,EAAE,CAAC,CAAC,CAACD,GAAG,CAACE,GAAG,IAAI;MACvB,OAAO,CAAC,CAAC,EAAE,CAAC,CAAC,CAACF,GAAG,CAACG,MAAM,IAAI;QAC1B,MAAMC,GAAG,GAAGnD,MAAM,CAACoD,KAAK,CAAC,CAAC,CAAC;QAC3BD,GAAG,CAACE,UAAU,CACZvE,QAAQ,CAACI,KAAK,CAAC4D,IAAI,CAAC,IAAIhE,QAAQ,CAACO,SAAS,IACzC4D,GAAG,GAAGnE,QAAQ,CAACS,QAAQ,GAAG,CAAC,CAAC,GAC7ByD,GAAG,IAAIlE,QAAQ,CAACW,SAAS,GAAGyD,MAAM,EAAE,CAAC,EAAE,IAAI,CAAC;QAC9C,OAAOC,GAAG;MACZ,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ;;AAEA;AACArE,QAAQ,CAACwE,cAAc,GAAGT,SAAS,CAAC,SAAS,CAAC;;AAE9C;AACA/D,QAAQ,CAACyE,gBAAgB,GAAGV,SAAS,CAAC,WAAW,CAAC;AAClD/D,QAAQ,CAAC0E,0BAA0B,GAAG,IAAI;AAC1C1E,QAAQ,CAAC2E,yBAAyB,GAAG,IAAI;AACzC3E,QAAQ,CAAC4E,0BAA0B,GAAG,CAAC;AACvC5E,QAAQ,CAAC6E,0BAA0B,GAAG,IAAI;AAC1C7E,QAAQ,CAAC8E,2BAA2B,GAAG,CAAC;AACxC9E,QAAQ,CAAC+E,yBAAyB,GAAG,IAAI;AACzC/E,QAAQ,CAACgF,0BAA0B,GAAG,CAAC;AACvChF,QAAQ,CAACiF,oBAAoB,GAAG,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC;AAClDjF,QAAQ,CAACkF,oBAAoB,GAAG,IAAI;AACpClF,QAAQ,CAACmF,qBAAqB,GAAG,IAAI;AACrCnF,QAAQ,CAACoF,qBAAqB,GAAG,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC;;AAEnD;AACApF,QAAQ,CAACqF,kBAAkB,GAAGtB,SAAS,CAAC,aAAa,CAAC;;AAEtD;AACA/D,QAAQ,CAACsF,IAAI,GAAG;EACdC,QAAQ,EAAExB,SAAS,CAAC,UAAU,CAAC;EAC/ByB,MAAM,EAAEzB,SAAS,CAAC,QAAQ,CAAC;EAC3B0B,OAAO,EAAE1B,SAAS,CAAC,SAAS,CAAC;EAC7B2B,MAAM,EAAE3B,SAAS,CAAC,QAAQ,CAAC;EAC3B4B,MAAM,EAAE5B,SAAS,CAAC,QAAQ;AAC5B,CAAC;AAED/D,QAAQ,CAAC4F,aAAa,GAAG1E,MAAM,CAACC,IAAI,CAAC,CAACnB,QAAQ,CAACI,KAAK,CAACyF,MAAM,IAAI7F,QAAQ,CAACO,SAAS,CAAC,CAAC;;AAEnF;AACAP,QAAQ,CAAC8F,QAAQ,GAAG5E,MAAM,CAACC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;AACpCnB,QAAQ,CAAC+F,QAAQ,GAAG7E,MAAM,CAACC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;AACpCnB,QAAQ,CAACgG,QAAQ,GAAG9E,MAAM,CAACC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;AACpCnB,QAAQ,CAACiG,UAAU,GAAG/E,MAAM,CAACC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;AACxCnB,QAAQ,CAACkG,UAAU,GAAGhF,MAAM,CAACC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;;AAExC;AACAnB,QAAQ,CAACmG,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAClC,GAAG,CAACC,GAAG,IAAI;EAClC,OAAOhD,MAAM,CAACC,IAAI,CAAC,CAAC+C,GAAG,CAAC,CAAC;AAC3B,CAAC,CAAC;;AAEF;AACAlE,QAAQ,CAACoG,KAAK,GAAG;EACfC,OAAO,EAAEnF,MAAM,CAACC,IAAI,CAAC,CAACnB,QAAQ,CAACI,KAAK,CAACiG,OAAO,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC;EACtDC,QAAQ,EAAEpF,MAAM,CAACC,IAAI,CAAC,CAACnB,QAAQ,CAACI,KAAK,CAACkG,QAAQ,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC;EACxDC,UAAU,EAAErF,MAAM,CAACC,IAAI,CAAC,CAACnB,QAAQ,CAACI,KAAK,CAACmG,UAAU,IAAI,CAAC,EAAE,CAAC,CAAC;AAC7D,CAAC"},"metadata":{},"sourceType":"script"}