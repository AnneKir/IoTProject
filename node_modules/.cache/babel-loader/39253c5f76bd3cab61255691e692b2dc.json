{"ast":null,"code":"import { operate } from '../util/lift';\nimport { mergeInternals } from './mergeInternals';\nexport function expand(project, concurrent, scheduler) {\n  if (concurrent === void 0) {\n    concurrent = Infinity;\n  }\n  concurrent = (concurrent || 0) < 1 ? Infinity : concurrent;\n  return operate(function (source, subscriber) {\n    return mergeInternals(source, subscriber, project, concurrent, undefined, true, scheduler);\n  });\n}","map":{"version":3,"mappings":"AACA,SAASA,OAAO,QAAQ,cAAc;AACtC,SAASC,cAAc,QAAQ,kBAAkB;AAuEjD,OAAM,SAAUC,MAAM,CACpBC,OAAuC,EACvCC,UAAqB,EACrBC,SAAyB;EADzB;IAAAD,qBAAqB;EAAA;EAGrBA,UAAU,GAAG,CAACA,UAAU,IAAI,CAAC,IAAI,CAAC,GAAGE,QAAQ,GAAGF,UAAU;EAC1D,OAAOJ,OAAO,CAAC,UAACO,MAAM,EAAEC,UAAU;IAChC,qBAAc,CAEZD,MAAM,EACNC,UAAU,EACVL,OAAO,EACPC,UAAU,EAGVK,SAAS,EAGT,IAAI,EACJJ,SAAS,CACV;EAbD,CAaC,CACF;AACH","names":["operate","mergeInternals","expand","project","concurrent","scheduler","Infinity","source","subscriber","undefined"],"sources":["C:\\Users\\Amali\\Desktop\\Building_the_IoT_w._P2P_and_Cloud_Computing\\IoTProject\\node_modules\\rxjs\\src\\internal\\operators\\expand.ts"],"sourcesContent":["import { OperatorFunction, ObservableInput, ObservedValueOf, SchedulerLike } from '../types';\r\nimport { operate } from '../util/lift';\r\nimport { mergeInternals } from './mergeInternals';\r\n\r\n/* tslint:disable:max-line-length */\r\nexport function expand<T, O extends ObservableInput<unknown>>(\r\n  project: (value: T, index: number) => O,\r\n  concurrent?: number,\r\n  scheduler?: SchedulerLike\r\n): OperatorFunction<T, ObservedValueOf<O>>;\r\n/**\r\n * @deprecated The `scheduler` parameter will be removed in v8. If you need to schedule the inner subscription,\r\n * use `subscribeOn` within the projection function: `expand((value) => fn(value).pipe(subscribeOn(scheduler)))`.\r\n * Details: Details: https://rxjs.dev/deprecations/scheduler-argument\r\n */\r\nexport function expand<T, O extends ObservableInput<unknown>>(\r\n  project: (value: T, index: number) => O,\r\n  concurrent: number | undefined,\r\n  scheduler: SchedulerLike\r\n): OperatorFunction<T, ObservedValueOf<O>>;\r\n/* tslint:enable:max-line-length */\r\n\r\n/**\r\n * Recursively projects each source value to an Observable which is merged in\r\n * the output Observable.\r\n *\r\n * <span class=\"informal\">It's similar to {@link mergeMap}, but applies the\r\n * projection function to every source value as well as every output value.\r\n * It's recursive.</span>\r\n *\r\n * ![](expand.png)\r\n *\r\n * Returns an Observable that emits items based on applying a function that you\r\n * supply to each item emitted by the source Observable, where that function\r\n * returns an Observable, and then merging those resulting Observables and\r\n * emitting the results of this merger. *Expand* will re-emit on the output\r\n * Observable every source value. Then, each output value is given to the\r\n * `project` function which returns an inner Observable to be merged on the\r\n * output Observable. Those output values resulting from the projection are also\r\n * given to the `project` function to produce new output values. This is how\r\n * *expand* behaves recursively.\r\n *\r\n * ## Example\r\n *\r\n * Start emitting the powers of two on every click, at most 10 of them\r\n *\r\n * ```ts\r\n * import { fromEvent, map, expand, of, delay, take } from 'rxjs';\r\n *\r\n * const clicks = fromEvent(document, 'click');\r\n * const powersOfTwo = clicks.pipe(\r\n *   map(() => 1),\r\n *   expand(x => of(2 * x).pipe(delay(1000))),\r\n *   take(10)\r\n * );\r\n * powersOfTwo.subscribe(x => console.log(x));\r\n * ```\r\n *\r\n * @see {@link mergeMap}\r\n * @see {@link mergeScan}\r\n *\r\n * @param {function(value: T, index: number) => Observable} project A function\r\n * that, when applied to an item emitted by the source or the output Observable,\r\n * returns an Observable.\r\n * @param {number} [concurrent=Infinity] Maximum number of input\r\n * Observables being subscribed to concurrently.\r\n * @param {SchedulerLike} [scheduler=null] The {@link SchedulerLike} to use for subscribing to\r\n * each projected inner Observable.\r\n * @return A function that returns an Observable that emits the source values\r\n * and also result of applying the projection function to each value emitted on\r\n * the output Observable and merging the results of the Observables obtained\r\n * from this transformation.\r\n */\r\nexport function expand<T, O extends ObservableInput<unknown>>(\r\n  project: (value: T, index: number) => O,\r\n  concurrent = Infinity,\r\n  scheduler?: SchedulerLike\r\n): OperatorFunction<T, ObservedValueOf<O>> {\r\n  concurrent = (concurrent || 0) < 1 ? Infinity : concurrent;\r\n  return operate((source, subscriber) =>\r\n    mergeInternals(\r\n      // General merge params\r\n      source,\r\n      subscriber,\r\n      project,\r\n      concurrent,\r\n\r\n      // onBeforeNext\r\n      undefined,\r\n\r\n      // Expand-specific\r\n      true, // Use expand path\r\n      scheduler // Inner subscription scheduler\r\n    )\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}