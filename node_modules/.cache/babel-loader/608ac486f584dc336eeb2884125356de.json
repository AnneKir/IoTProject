{"ast":null,"code":"export function identity(x) {\n  return x;\n}","map":{"version":3,"mappings":"AA0CA,OAAM,SAAUA,QAAQ,CAAIC,CAAI;EAC9B,OAAOA,CAAC;AACV","names":["identity","x"],"sources":["C:\\Users\\Amali\\Desktop\\Building_the_IoT_w._P2P_and_Cloud_Computing\\IoTProject\\node_modules\\rxjs\\src\\internal\\util\\identity.ts"],"sourcesContent":["/**\r\n * This function takes one parameter and just returns it. Simply put,\r\n * this is like `<T>(x: T): T => x`.\r\n *\r\n * ## Examples\r\n *\r\n * This is useful in some cases when using things like `mergeMap`\r\n *\r\n * ```ts\r\n * import { interval, take, map, range, mergeMap, identity } from 'rxjs';\r\n *\r\n * const source$ = interval(1000).pipe(take(5));\r\n *\r\n * const result$ = source$.pipe(\r\n *   map(i => range(i)),\r\n *   mergeMap(identity) // same as mergeMap(x => x)\r\n * );\r\n *\r\n * result$.subscribe({\r\n *   next: console.log\r\n * });\r\n * ```\r\n *\r\n * Or when you want to selectively apply an operator\r\n *\r\n * ```ts\r\n * import { interval, take, identity } from 'rxjs';\r\n *\r\n * const shouldLimit = () => Math.random() < 0.5;\r\n *\r\n * const source$ = interval(1000);\r\n *\r\n * const result$ = source$.pipe(shouldLimit() ? take(5) : identity);\r\n *\r\n * result$.subscribe({\r\n *   next: console.log\r\n * });\r\n * ```\r\n *\r\n * @param x Any value that is returned by this function\r\n * @returns The value passed as the first parameter to this function\r\n */\r\nexport function identity<T>(x: T): T {\r\n  return x;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}