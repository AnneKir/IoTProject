{"ast":null,"code":"import { map } from './map';\nexport function pluck() {\n  var properties = [];\n  for (var _i = 0; _i < arguments.length; _i++) {\n    properties[_i] = arguments[_i];\n  }\n  var length = properties.length;\n  if (length === 0) {\n    throw new Error('list of properties cannot be empty.');\n  }\n  return map(function (x) {\n    var currentProp = x;\n    for (var i = 0; i < length; i++) {\n      var p = currentProp === null || currentProp === void 0 ? void 0 : currentProp[properties[i]];\n      if (typeof p !== 'undefined') {\n        currentProp = p;\n      } else {\n        return undefined;\n      }\n    }\n    return currentProp;\n  });\n}","map":{"version":3,"mappings":"AAAA,SAASA,GAAG,QAAQ,OAAO;AAwF3B,OAAM,SAAUC,KAAK;EAAO;OAAA,UAA8C,EAA9CC,qBAA8C,EAA9CA,IAA8C;IAA9CC;;EAC1B,IAAMC,MAAM,GAAGD,UAAU,CAACC,MAAM;EAChC,IAAIA,MAAM,KAAK,CAAC,EAAE;IAChB,MAAM,IAAIC,KAAK,CAAC,qCAAqC,CAAC;;EAExD,OAAOL,GAAG,CAAC,UAACM,CAAC;IACX,IAAIC,WAAW,GAAQD,CAAC;IACxB,KAAK,IAAIE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,MAAM,EAAEI,CAAC,EAAE,EAAE;MAC/B,IAAMC,CAAC,GAAGF,WAAW,aAAXA,WAAW,uBAAXA,WAAW,CAAGJ,UAAU,CAACK,CAAC,CAAC,CAAC;MACtC,IAAI,OAAOC,CAAC,KAAK,WAAW,EAAE;QAC5BF,WAAW,GAAGE,CAAC;OAChB,MAAM;QACL,OAAOC,SAAS;;;IAGpB,OAAOH,WAAW;EACpB,CAAC,CAAC;AACJ","names":["map","pluck","_i","properties","length","Error","x","currentProp","i","p","undefined"],"sources":["C:\\Users\\Amali\\Desktop\\Building_the_IoT_w._P2P_and_Cloud_Computing\\IoTProject\\node_modules\\rxjs\\src\\internal\\operators\\pluck.ts"],"sourcesContent":["import { map } from './map';\r\nimport { OperatorFunction } from '../types';\r\n\r\n/* tslint:disable:max-line-length */\r\n/** @deprecated Use {@link map} and optional chaining: `pluck('foo', 'bar')` is `map(x => x?.foo?.bar)`. Will be removed in v8. */\r\nexport function pluck<T, K1 extends keyof T>(k1: K1): OperatorFunction<T, T[K1]>;\r\n/** @deprecated Use {@link map} and optional chaining: `pluck('foo', 'bar')` is `map(x => x?.foo?.bar)`. Will be removed in v8. */\r\nexport function pluck<T, K1 extends keyof T, K2 extends keyof T[K1]>(k1: K1, k2: K2): OperatorFunction<T, T[K1][K2]>;\r\n/** @deprecated Use {@link map} and optional chaining: `pluck('foo', 'bar')` is `map(x => x?.foo?.bar)`. Will be removed in v8. */\r\nexport function pluck<T, K1 extends keyof T, K2 extends keyof T[K1], K3 extends keyof T[K1][K2]>(\r\n  k1: K1,\r\n  k2: K2,\r\n  k3: K3\r\n): OperatorFunction<T, T[K1][K2][K3]>;\r\n/** @deprecated Use {@link map} and optional chaining: `pluck('foo', 'bar')` is `map(x => x?.foo?.bar)`. Will be removed in v8. */\r\nexport function pluck<T, K1 extends keyof T, K2 extends keyof T[K1], K3 extends keyof T[K1][K2], K4 extends keyof T[K1][K2][K3]>(\r\n  k1: K1,\r\n  k2: K2,\r\n  k3: K3,\r\n  k4: K4\r\n): OperatorFunction<T, T[K1][K2][K3][K4]>;\r\n/** @deprecated Use {@link map} and optional chaining: `pluck('foo', 'bar')` is `map(x => x?.foo?.bar)`. Will be removed in v8. */\r\nexport function pluck<\r\n  T,\r\n  K1 extends keyof T,\r\n  K2 extends keyof T[K1],\r\n  K3 extends keyof T[K1][K2],\r\n  K4 extends keyof T[K1][K2][K3],\r\n  K5 extends keyof T[K1][K2][K3][K4]\r\n>(k1: K1, k2: K2, k3: K3, k4: K4, k5: K5): OperatorFunction<T, T[K1][K2][K3][K4][K5]>;\r\n/** @deprecated Use {@link map} and optional chaining: `pluck('foo', 'bar')` is `map(x => x?.foo?.bar)`. Will be removed in v8. */\r\nexport function pluck<\r\n  T,\r\n  K1 extends keyof T,\r\n  K2 extends keyof T[K1],\r\n  K3 extends keyof T[K1][K2],\r\n  K4 extends keyof T[K1][K2][K3],\r\n  K5 extends keyof T[K1][K2][K3][K4],\r\n  K6 extends keyof T[K1][K2][K3][K4][K5]\r\n>(k1: K1, k2: K2, k3: K3, k4: K4, k5: K5, k6: K6): OperatorFunction<T, T[K1][K2][K3][K4][K5][K6]>;\r\n/** @deprecated Use {@link map} and optional chaining: `pluck('foo', 'bar')` is `map(x => x?.foo?.bar)`. Will be removed in v8. */\r\nexport function pluck<\r\n  T,\r\n  K1 extends keyof T,\r\n  K2 extends keyof T[K1],\r\n  K3 extends keyof T[K1][K2],\r\n  K4 extends keyof T[K1][K2][K3],\r\n  K5 extends keyof T[K1][K2][K3][K4],\r\n  K6 extends keyof T[K1][K2][K3][K4][K5]\r\n>(k1: K1, k2: K2, k3: K3, k4: K4, k5: K5, k6: K6, ...rest: string[]): OperatorFunction<T, unknown>;\r\n/** @deprecated Use {@link map} and optional chaining: `pluck('foo', 'bar')` is `map(x => x?.foo?.bar)`. Will be removed in v8. */\r\nexport function pluck<T>(...properties: string[]): OperatorFunction<T, unknown>;\r\n/* tslint:enable:max-line-length */\r\n\r\n/**\r\n * Maps each source value to its specified nested property.\r\n *\r\n * <span class=\"informal\">Like {@link map}, but meant only for picking one of\r\n * the nested properties of every emitted value.</span>\r\n *\r\n * ![](pluck.png)\r\n *\r\n * Given a list of strings or numbers describing a path to a property, retrieves\r\n * the value of a specified nested property from all values in the source\r\n * Observable. If a property can't be resolved, it will return `undefined` for\r\n * that value.\r\n *\r\n * ## Example\r\n *\r\n * Map every click to the tagName of the clicked target element\r\n *\r\n * ```ts\r\n * import { fromEvent, pluck } from 'rxjs';\r\n *\r\n * const clicks = fromEvent(document, 'click');\r\n * const tagNames = clicks.pipe(pluck('target', 'tagName'));\r\n *\r\n * tagNames.subscribe(x => console.log(x));\r\n * ```\r\n *\r\n * @see {@link map}\r\n *\r\n * @param properties The nested properties to pluck from each source\r\n * value.\r\n * @return A function that returns an Observable of property values from the\r\n * source values.\r\n * @deprecated Use {@link map} and optional chaining: `pluck('foo', 'bar')` is `map(x => x?.foo?.bar)`. Will be removed in v8.\r\n */\r\nexport function pluck<T, R>(...properties: Array<string | number | symbol>): OperatorFunction<T, R> {\r\n  const length = properties.length;\r\n  if (length === 0) {\r\n    throw new Error('list of properties cannot be empty.');\r\n  }\r\n  return map((x) => {\r\n    let currentProp: any = x;\r\n    for (let i = 0; i < length; i++) {\r\n      const p = currentProp?.[properties[i]];\r\n      if (typeof p !== 'undefined') {\r\n        currentProp = p;\r\n      } else {\r\n        return undefined;\r\n      }\r\n    }\r\n    return currentProp;\r\n  });\r\n}\r\n"]},"metadata":{},"sourceType":"module"}