{"ast":null,"code":"'use strict';\n\n/**\n * DefaultMessageAllocator constructor\n * @constructor\n */\nfunction DefaultMessageIdProvider() {\n  if (!(this instanceof DefaultMessageIdProvider)) {\n    return new DefaultMessageIdProvider();\n  }\n\n  /**\n   * MessageIDs starting with 1\n   * ensure that nextId is min. 1, see https://github.com/mqttjs/MQTT.js/issues/810\n   */\n  this.nextId = Math.max(1, Math.floor(Math.random() * 65535));\n}\n\n/**\n * allocate\n *\n * Get the next messageId.\n * @return unsigned int\n */\nDefaultMessageIdProvider.prototype.allocate = function () {\n  // id becomes current state of this.nextId and increments afterwards\n  const id = this.nextId++;\n  // Ensure 16 bit unsigned int (max 65535, nextId got one higher)\n  if (this.nextId === 65536) {\n    this.nextId = 1;\n  }\n  return id;\n};\n\n/**\n * getLastAllocated\n * Get the last allocated messageId.\n * @return unsigned int\n */\nDefaultMessageIdProvider.prototype.getLastAllocated = function () {\n  return this.nextId === 1 ? 65535 : this.nextId - 1;\n};\n\n/**\n * register\n * Register messageId. If success return true, otherwise return false.\n * @param { unsigned int } - messageId to register,\n * @return boolean\n */\nDefaultMessageIdProvider.prototype.register = function (messageId) {\n  return true;\n};\n\n/**\n * deallocate\n * Deallocate messageId.\n * @param { unsigned int } - messageId to deallocate,\n */\nDefaultMessageIdProvider.prototype.deallocate = function (messageId) {};\n\n/**\n * clear\n * Deallocate all messageIds.\n */\nDefaultMessageIdProvider.prototype.clear = function () {};\nmodule.exports = DefaultMessageIdProvider;","map":{"version":3,"names":["DefaultMessageIdProvider","nextId","Math","max","floor","random","prototype","allocate","id","getLastAllocated","register","messageId","deallocate","clear","module","exports"],"sources":["/Users/athallenberg/Dropbox/Kandidat/IoT/IoTProject/node_modules/mqtt/lib/default-message-id-provider.js"],"sourcesContent":["'use strict'\n\n/**\n * DefaultMessageAllocator constructor\n * @constructor\n */\nfunction DefaultMessageIdProvider () {\n  if (!(this instanceof DefaultMessageIdProvider)) {\n    return new DefaultMessageIdProvider()\n  }\n\n  /**\n   * MessageIDs starting with 1\n   * ensure that nextId is min. 1, see https://github.com/mqttjs/MQTT.js/issues/810\n   */\n  this.nextId = Math.max(1, Math.floor(Math.random() * 65535))\n}\n\n/**\n * allocate\n *\n * Get the next messageId.\n * @return unsigned int\n */\nDefaultMessageIdProvider.prototype.allocate = function () {\n  // id becomes current state of this.nextId and increments afterwards\n  const id = this.nextId++\n  // Ensure 16 bit unsigned int (max 65535, nextId got one higher)\n  if (this.nextId === 65536) {\n    this.nextId = 1\n  }\n  return id\n}\n\n/**\n * getLastAllocated\n * Get the last allocated messageId.\n * @return unsigned int\n */\nDefaultMessageIdProvider.prototype.getLastAllocated = function () {\n  return (this.nextId === 1) ? 65535 : (this.nextId - 1)\n}\n\n/**\n * register\n * Register messageId. If success return true, otherwise return false.\n * @param { unsigned int } - messageId to register,\n * @return boolean\n */\nDefaultMessageIdProvider.prototype.register = function (messageId) {\n  return true\n}\n\n/**\n * deallocate\n * Deallocate messageId.\n * @param { unsigned int } - messageId to deallocate,\n */\nDefaultMessageIdProvider.prototype.deallocate = function (messageId) {\n}\n\n/**\n * clear\n * Deallocate all messageIds.\n */\nDefaultMessageIdProvider.prototype.clear = function () {\n}\n\nmodule.exports = DefaultMessageIdProvider\n"],"mappings":"AAAA,YAAY;;AAEZ;AACA;AACA;AACA;AACA,SAASA,wBAAwB,GAAI;EACnC,IAAI,EAAE,IAAI,YAAYA,wBAAwB,CAAC,EAAE;IAC/C,OAAO,IAAIA,wBAAwB,EAAE;EACvC;;EAEA;AACF;AACA;AACA;EACE,IAAI,CAACC,MAAM,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,EAAED,IAAI,CAACE,KAAK,CAACF,IAAI,CAACG,MAAM,EAAE,GAAG,KAAK,CAAC,CAAC;AAC9D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACAL,wBAAwB,CAACM,SAAS,CAACC,QAAQ,GAAG,YAAY;EACxD;EACA,MAAMC,EAAE,GAAG,IAAI,CAACP,MAAM,EAAE;EACxB;EACA,IAAI,IAAI,CAACA,MAAM,KAAK,KAAK,EAAE;IACzB,IAAI,CAACA,MAAM,GAAG,CAAC;EACjB;EACA,OAAOO,EAAE;AACX,CAAC;;AAED;AACA;AACA;AACA;AACA;AACAR,wBAAwB,CAACM,SAAS,CAACG,gBAAgB,GAAG,YAAY;EAChE,OAAQ,IAAI,CAACR,MAAM,KAAK,CAAC,GAAI,KAAK,GAAI,IAAI,CAACA,MAAM,GAAG,CAAE;AACxD,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACAD,wBAAwB,CAACM,SAAS,CAACI,QAAQ,GAAG,UAAUC,SAAS,EAAE;EACjE,OAAO,IAAI;AACb,CAAC;;AAED;AACA;AACA;AACA;AACA;AACAX,wBAAwB,CAACM,SAAS,CAACM,UAAU,GAAG,UAAUD,SAAS,EAAE,CACrE,CAAC;;AAED;AACA;AACA;AACA;AACAX,wBAAwB,CAACM,SAAS,CAACO,KAAK,GAAG,YAAY,CACvD,CAAC;AAEDC,MAAM,CAACC,OAAO,GAAGf,wBAAwB"},"metadata":{},"sourceType":"script"}