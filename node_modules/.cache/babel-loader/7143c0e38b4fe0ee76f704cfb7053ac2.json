{"ast":null,"code":"import { __read, __spreadArray } from \"tslib\";\nimport { combineLatest } from './combineLatest';\nexport function combineLatestWith() {\n  var otherSources = [];\n  for (var _i = 0; _i < arguments.length; _i++) {\n    otherSources[_i] = arguments[_i];\n  }\n  return combineLatest.apply(void 0, __spreadArray([], __read(otherSources)));\n}","map":{"version":3,"mappings":";AACA,SAASA,aAAa,QAAQ,iBAAiB;AA0C/C,OAAM,SAAUC,iBAAiB;EAC/B;OAAA,UAA6C,EAA7CC,qBAA6C,EAA7CA,IAA6C;IAA7CC;;EAEA,OAAOH,aAAa,wCAAIG,YAAY;AACtC","names":["combineLatest","combineLatestWith","_i","otherSources"],"sources":["C:\\Users\\Amali\\Desktop\\Building_the_IoT_w._P2P_and_Cloud_Computing\\IoTProject\\node_modules\\rxjs\\src\\internal\\operators\\combineLatestWith.ts"],"sourcesContent":["import { ObservableInputTuple, OperatorFunction, Cons } from '../types';\r\nimport { combineLatest } from './combineLatest';\r\n\r\n/**\r\n * Create an observable that combines the latest values from all passed observables and the source\r\n * into arrays and emits them.\r\n *\r\n * Returns an observable, that when subscribed to, will subscribe to the source observable and all\r\n * sources provided as arguments. Once all sources emit at least one value, all of the latest values\r\n * will be emitted as an array. After that, every time any source emits a value, all of the latest values\r\n * will be emitted as an array.\r\n *\r\n * This is a useful operator for eagerly calculating values based off of changed inputs.\r\n *\r\n * ## Example\r\n *\r\n * Simple concatenation of values from two inputs\r\n *\r\n * ```ts\r\n * import { fromEvent, combineLatestWith, map } from 'rxjs';\r\n *\r\n * // Setup: Add two inputs to the page\r\n * const input1 = document.createElement('input');\r\n * document.body.appendChild(input1);\r\n * const input2 = document.createElement('input');\r\n * document.body.appendChild(input2);\r\n *\r\n * // Get streams of changes\r\n * const input1Changes$ = fromEvent(input1, 'change');\r\n * const input2Changes$ = fromEvent(input2, 'change');\r\n *\r\n * // Combine the changes by adding them together\r\n * input1Changes$.pipe(\r\n *   combineLatestWith(input2Changes$),\r\n *   map(([e1, e2]) => (<HTMLInputElement>e1.target).value + ' - ' + (<HTMLInputElement>e2.target).value)\r\n * )\r\n * .subscribe(x => console.log(x));\r\n * ```\r\n *\r\n * @param otherSources the other sources to subscribe to.\r\n * @return A function that returns an Observable that emits the latest\r\n * emissions from both source and provided Observables.\r\n */\r\nexport function combineLatestWith<T, A extends readonly unknown[]>(\r\n  ...otherSources: [...ObservableInputTuple<A>]\r\n): OperatorFunction<T, Cons<T, A>> {\r\n  return combineLatest(...otherSources);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}