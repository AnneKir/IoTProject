{"ast":null,"code":"// https://github.com/lisajamhoury/simple-peer-wrapper\n\nimport wrtc from 'wrtc';\nimport SimplePeerWrapper from 'simple-peer-wrapper';\n// in your client code - create a wrapper and connect to your server\nconst options = {\n  serverUrl: 'https://localhost:8081',\n  debugger: true,\n  simplePeerOptions: {\n    initiator: true,\n    trickle: false,\n    wrtc: wrtc\n  }\n};\nconst spw = new SimplePeerWrapper(options); // creates a socket connection to signaling server\nspw.connect(); // initiates peer connection via socket connection\n\nexport function startServer() {\n  const spw = new SimplePeerWrapper(options);\n  console.log(\"ehek\");\n  spw.connect();\n  spw.on('connect', gotConnect);\n  spw.on('data', gotData);\n}\nspw.on('connect', gotConnect);\n\n// document.getElementById(\"incoming\");\n\n// make sure you close the connection before you close the window\n// window.onbeforeunload = () => {\n//   spw.close();\n// };\n\n// a global variable to hold data\nlet partnerMouse;\n\n// when we receive data, call the gotData function\nspw.on('data', gotData);\n\n// this runs each time data is received\n// the incoming data is passed into the function\nfunction gotData(data) {\n  // put the incoming data somewhere to use later\n  partnerMouse = data.data;\n  console.log(\"got data: \" + partnerMouse.toString());\n}\n// document.querySelector()\n\nlet count = 0;\nfunction gotConnect() {\n  console.log('peer connection open');\n  count++;\n  spw.send(\"hej\" + count.toString());\n}\nspw.on('error', err => console.log('error', err));","map":{"version":3,"names":["wrtc","SimplePeerWrapper","options","serverUrl","debugger","simplePeerOptions","initiator","trickle","spw","connect","startServer","console","log","on","gotConnect","gotData","partnerMouse","data","toString","count","send","err"],"sources":["C:/Users/Amali/Desktop/Building_the_IoT_w._P2P_and_Cloud_Computing/IoTProject/src/first.js"],"sourcesContent":["// https://github.com/lisajamhoury/simple-peer-wrapper\r\n\r\nimport wrtc from 'wrtc';\r\n\r\nimport SimplePeerWrapper from 'simple-peer-wrapper';\r\n// in your client code - create a wrapper and connect to your server\r\nconst options = {\r\n  serverUrl: 'https://localhost:8081',\r\n  debugger: true,\r\n  simplePeerOptions: {\r\n    initiator: true,\r\n    trickle: false,\r\n    wrtc: wrtc\r\n  }\r\n};\r\n\r\nconst spw = new SimplePeerWrapper(options); // creates a socket connection to signaling server\r\nspw.connect();  // initiates peer connection via socket connection\r\n\r\nexport function startServer() {\r\n  const spw = new SimplePeerWrapper(options);\r\n  console.log(\"ehek\")\r\n  spw.connect();\r\n  spw.on('connect', gotConnect);\r\n  spw.on('data', gotData);\r\n}\r\n\r\nspw.on('connect', gotConnect);\r\n\r\n// document.getElementById(\"incoming\");\r\n\r\n// make sure you close the connection before you close the window\r\n// window.onbeforeunload = () => {\r\n//   spw.close();\r\n// };\r\n\r\n// a global variable to hold data\r\nlet partnerMouse;\r\n\r\n// when we receive data, call the gotData function\r\nspw.on('data', gotData);\r\n\r\n// this runs each time data is received\r\n// the incoming data is passed into the function\r\nfunction gotData(data) {\r\n  // put the incoming data somewhere to use later\r\n  partnerMouse = data.data;\r\n  console.log(\"got data: \" + partnerMouse.toString())\r\n}\r\n// document.querySelector()\r\n\r\nlet count = 0;\r\nfunction gotConnect() {\r\n  console.log('peer connection open');\r\n  count++;\r\n  spw.send(\"hej\" + count.toString());\r\n}\r\n\r\nspw.on('error', err => console.log('error', err))\r\n"],"mappings":"AAAA;;AAEA,OAAOA,IAAI,MAAM,MAAM;AAEvB,OAAOC,iBAAiB,MAAM,qBAAqB;AACnD;AACA,MAAMC,OAAO,GAAG;EACdC,SAAS,EAAE,wBAAwB;EACnCC,QAAQ,EAAE,IAAI;EACdC,iBAAiB,EAAE;IACjBC,SAAS,EAAE,IAAI;IACfC,OAAO,EAAE,KAAK;IACdP,IAAI,EAAEA;EACR;AACF,CAAC;AAED,MAAMQ,GAAG,GAAG,IAAIP,iBAAiB,CAACC,OAAO,CAAC,CAAC,CAAC;AAC5CM,GAAG,CAACC,OAAO,EAAE,CAAC,CAAE;;AAEhB,OAAO,SAASC,WAAW,GAAG;EAC5B,MAAMF,GAAG,GAAG,IAAIP,iBAAiB,CAACC,OAAO,CAAC;EAC1CS,OAAO,CAACC,GAAG,CAAC,MAAM,CAAC;EACnBJ,GAAG,CAACC,OAAO,EAAE;EACbD,GAAG,CAACK,EAAE,CAAC,SAAS,EAAEC,UAAU,CAAC;EAC7BN,GAAG,CAACK,EAAE,CAAC,MAAM,EAAEE,OAAO,CAAC;AACzB;AAEAP,GAAG,CAACK,EAAE,CAAC,SAAS,EAAEC,UAAU,CAAC;;AAE7B;;AAEA;AACA;AACA;AACA;;AAEA;AACA,IAAIE,YAAY;;AAEhB;AACAR,GAAG,CAACK,EAAE,CAAC,MAAM,EAAEE,OAAO,CAAC;;AAEvB;AACA;AACA,SAASA,OAAO,CAACE,IAAI,EAAE;EACrB;EACAD,YAAY,GAAGC,IAAI,CAACA,IAAI;EACxBN,OAAO,CAACC,GAAG,CAAC,YAAY,GAAGI,YAAY,CAACE,QAAQ,EAAE,CAAC;AACrD;AACA;;AAEA,IAAIC,KAAK,GAAG,CAAC;AACb,SAASL,UAAU,GAAG;EACpBH,OAAO,CAACC,GAAG,CAAC,sBAAsB,CAAC;EACnCO,KAAK,EAAE;EACPX,GAAG,CAACY,IAAI,CAAC,KAAK,GAAGD,KAAK,CAACD,QAAQ,EAAE,CAAC;AACpC;AAEAV,GAAG,CAACK,EAAE,CAAC,OAAO,EAAEQ,GAAG,IAAIV,OAAO,CAACC,GAAG,CAAC,OAAO,EAAES,GAAG,CAAC,CAAC"},"metadata":{},"sourceType":"module"}