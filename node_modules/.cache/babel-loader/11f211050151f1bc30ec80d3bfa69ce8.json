{"ast":null,"code":"import { operate } from '../util/lift';\nexport function subscribeOn(scheduler, delay) {\n  if (delay === void 0) {\n    delay = 0;\n  }\n  return operate(function (source, subscriber) {\n    subscriber.add(scheduler.schedule(function () {\n      return source.subscribe(subscriber);\n    }, delay));\n  });\n}","map":{"version":3,"mappings":"AACA,SAASA,OAAO,QAAQ,cAAc;AA6DtC,OAAM,SAAUC,WAAW,CAAIC,SAAwB,EAAEC,KAAiB;EAAjB;IAAAA,SAAiB;EAAA;EACxE,OAAOH,OAAO,CAAC,UAACI,MAAM,EAAEC,UAAU;IAChCA,UAAU,CAACC,GAAG,CAACJ,SAAS,CAACK,QAAQ,CAAC;MAAM,aAAM,CAACC,SAAS,CAACH,UAAU,CAAC;IAA5B,CAA4B,EAAEF,KAAK,CAAC,CAAC;EAC/E,CAAC,CAAC;AACJ","names":["operate","subscribeOn","scheduler","delay","source","subscriber","add","schedule","subscribe"],"sources":["C:\\Users\\Amali\\Desktop\\Building_the_IoT_w._P2P_and_Cloud_Computing\\IoTProject\\node_modules\\rxjs\\src\\internal\\operators\\subscribeOn.ts"],"sourcesContent":["import { MonoTypeOperatorFunction, SchedulerLike } from '../types';\r\nimport { operate } from '../util/lift';\r\n\r\n/**\r\n * Asynchronously subscribes Observers to this Observable on the specified {@link SchedulerLike}.\r\n *\r\n * With `subscribeOn` you can decide what type of scheduler a specific Observable will be using when it is subscribed to.\r\n *\r\n * Schedulers control the speed and order of emissions to observers from an Observable stream.\r\n *\r\n * ![](subscribeOn.png)\r\n *\r\n * ## Example\r\n *\r\n * Given the following code:\r\n *\r\n * ```ts\r\n * import { of, merge } from 'rxjs';\r\n *\r\n * const a = of(1, 2, 3);\r\n * const b = of(4, 5, 6);\r\n *\r\n * merge(a, b).subscribe(console.log);\r\n *\r\n * // Outputs\r\n * // 1\r\n * // 2\r\n * // 3\r\n * // 4\r\n * // 5\r\n * // 6\r\n * ```\r\n *\r\n * Both Observable `a` and `b` will emit their values directly and synchronously once they are subscribed to.\r\n *\r\n * If we instead use the `subscribeOn` operator declaring that we want to use the {@link asyncScheduler} for values emitted by Observable `a`:\r\n *\r\n * ```ts\r\n * import { of, subscribeOn, asyncScheduler, merge } from 'rxjs';\r\n *\r\n * const a = of(1, 2, 3).pipe(subscribeOn(asyncScheduler));\r\n * const b = of(4, 5, 6);\r\n *\r\n * merge(a, b).subscribe(console.log);\r\n *\r\n * // Outputs\r\n * // 4\r\n * // 5\r\n * // 6\r\n * // 1\r\n * // 2\r\n * // 3\r\n * ```\r\n *\r\n * The reason for this is that Observable `b` emits its values directly and synchronously like before\r\n * but the emissions from `a` are scheduled on the event loop because we are now using the {@link asyncScheduler} for that specific Observable.\r\n *\r\n * @param scheduler The {@link SchedulerLike} to perform subscription actions on.\r\n * @param delay A delay to pass to the scheduler to delay subscriptions\r\n * @return A function that returns an Observable modified so that its\r\n * subscriptions happen on the specified {@link SchedulerLike}.\r\n */\r\nexport function subscribeOn<T>(scheduler: SchedulerLike, delay: number = 0): MonoTypeOperatorFunction<T> {\r\n  return operate((source, subscriber) => {\r\n    subscriber.add(scheduler.schedule(() => source.subscribe(subscriber), delay));\r\n  });\r\n}\r\n"]},"metadata":{},"sourceType":"module"}