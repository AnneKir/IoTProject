{"ast":null,"code":"import { mergeMap } from './mergeMap';\nimport { identity } from '../util/identity';\nexport function mergeAll(concurrent) {\n  if (concurrent === void 0) {\n    concurrent = Infinity;\n  }\n  return mergeMap(identity, concurrent);\n}","map":{"version":3,"mappings":"AAAA,SAASA,QAAQ,QAAQ,YAAY;AACrC,SAASC,QAAQ,QAAQ,kBAAkB;AA8D3C,OAAM,SAAUC,QAAQ,CAAiCC,UAA6B;EAA7B;IAAAA,qBAA6B;EAAA;EACpF,OAAOH,QAAQ,CAACC,QAAQ,EAAEE,UAAU,CAAC;AACvC","names":["mergeMap","identity","mergeAll","concurrent"],"sources":["C:\\Users\\Amali\\Desktop\\Building_the_IoT_w._P2P_and_Cloud_Computing\\IoTProject\\node_modules\\rxjs\\src\\internal\\operators\\mergeAll.ts"],"sourcesContent":["import { mergeMap } from './mergeMap';\r\nimport { identity } from '../util/identity';\r\nimport { OperatorFunction, ObservableInput, ObservedValueOf } from '../types';\r\n\r\n/**\r\n * Converts a higher-order Observable into a first-order Observable which\r\n * concurrently delivers all values that are emitted on the inner Observables.\r\n *\r\n * <span class=\"informal\">Flattens an Observable-of-Observables.</span>\r\n *\r\n * ![](mergeAll.png)\r\n *\r\n * `mergeAll` subscribes to an Observable that emits Observables, also known as\r\n * a higher-order Observable. Each time it observes one of these emitted inner\r\n * Observables, it subscribes to that and delivers all the values from the\r\n * inner Observable on the output Observable. The output Observable only\r\n * completes once all inner Observables have completed. Any error delivered by\r\n * a inner Observable will be immediately emitted on the output Observable.\r\n *\r\n * ## Examples\r\n *\r\n * Spawn a new interval Observable for each click event, and blend their outputs as one Observable\r\n *\r\n * ```ts\r\n * import { fromEvent, map, interval, mergeAll } from 'rxjs';\r\n *\r\n * const clicks = fromEvent(document, 'click');\r\n * const higherOrder = clicks.pipe(map(() => interval(1000)));\r\n * const firstOrder = higherOrder.pipe(mergeAll());\r\n *\r\n * firstOrder.subscribe(x => console.log(x));\r\n * ```\r\n *\r\n * Count from 0 to 9 every second for each click, but only allow 2 concurrent timers\r\n *\r\n * ```ts\r\n * import { fromEvent, map, interval, take, mergeAll } from 'rxjs';\r\n *\r\n * const clicks = fromEvent(document, 'click');\r\n * const higherOrder = clicks.pipe(\r\n *   map(() => interval(1000).pipe(take(10)))\r\n * );\r\n * const firstOrder = higherOrder.pipe(mergeAll(2));\r\n *\r\n * firstOrder.subscribe(x => console.log(x));\r\n * ```\r\n *\r\n * @see {@link combineLatestAll}\r\n * @see {@link concatAll}\r\n * @see {@link exhaustAll}\r\n * @see {@link merge}\r\n * @see {@link mergeMap}\r\n * @see {@link mergeMapTo}\r\n * @see {@link mergeScan}\r\n * @see {@link switchAll}\r\n * @see {@link switchMap}\r\n * @see {@link zipAll}\r\n *\r\n * @param {number} [concurrent=Infinity] Maximum number of inner\r\n * Observables being subscribed to concurrently.\r\n * @return A function that returns an Observable that emits values coming from\r\n * all the inner Observables emitted by the source Observable.\r\n */\r\nexport function mergeAll<O extends ObservableInput<any>>(concurrent: number = Infinity): OperatorFunction<O, ObservedValueOf<O>> {\r\n  return mergeMap(identity, concurrent);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}