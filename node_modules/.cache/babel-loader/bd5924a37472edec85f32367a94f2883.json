{"ast":null,"code":"import { Observable } from '../Observable';\nimport { isFunction } from '../util/isFunction';\nexport function throwError(errorOrErrorFactory, scheduler) {\n  var errorFactory = isFunction(errorOrErrorFactory) ? errorOrErrorFactory : function () {\n    return errorOrErrorFactory;\n  };\n  var init = function (subscriber) {\n    return subscriber.error(errorFactory());\n  };\n  return new Observable(scheduler ? function (subscriber) {\n    return scheduler.schedule(init, 0, subscriber);\n  } : init);\n}","map":{"version":3,"mappings":"AAAA,SAASA,UAAU,QAAQ,eAAe;AAG1C,SAASC,UAAU,QAAQ,oBAAoB;AAqH/C,OAAM,SAAUC,UAAU,CAACC,mBAAwB,EAAEC,SAAyB;EAC5E,IAAMC,YAAY,GAAGJ,UAAU,CAACE,mBAAmB,CAAC,GAAGA,mBAAmB,GAAG;IAAM,0BAAmB;EAAnB,CAAmB;EACtG,IAAMG,IAAI,GAAG,UAACC,UAA6B;IAAK,iBAAU,CAACC,KAAK,CAACH,YAAY,EAAE,CAAC;EAAhC,CAAgC;EAChF,OAAO,IAAIL,UAAU,CAACI,SAAS,GAAG,UAACG,UAAU;IAAK,gBAAS,CAACE,QAAQ,CAACH,IAAW,EAAE,CAAC,EAAEC,UAAU,CAAC;EAA9C,CAA8C,GAAGD,IAAI,CAAC;AAC1G","names":["Observable","isFunction","throwError","errorOrErrorFactory","scheduler","errorFactory","init","subscriber","error","schedule"],"sources":["C:\\Users\\Amali\\Desktop\\Building_the_IoT_w._P2P_and_Cloud_Computing\\IoTProject\\node_modules\\rxjs\\src\\internal\\observable\\throwError.ts"],"sourcesContent":["import { Observable } from '../Observable';\r\nimport { Subscriber } from '../Subscriber';\r\nimport { SchedulerLike } from '../types';\r\nimport { isFunction } from '../util/isFunction';\r\n\r\n/**\r\n * Creates an observable that will create an error instance and push it to the consumer as an error\r\n * immediately upon subscription.\r\n *\r\n * <span class=\"informal\">Just errors and does nothing else</span>\r\n *\r\n * ![](throw.png)\r\n *\r\n * This creation function is useful for creating an observable that will create an error and error every\r\n * time it is subscribed to. Generally, inside of most operators when you might want to return an errored\r\n * observable, this is unnecessary. In most cases, such as in the inner return of {@link concatMap},\r\n * {@link mergeMap}, {@link defer}, and many others, you can simply throw the error, and RxJS will pick\r\n * that up and notify the consumer of the error.\r\n *\r\n * ## Example\r\n *\r\n * Create a simple observable that will create a new error with a timestamp and log it\r\n * and the message every time you subscribe to it\r\n *\r\n * ```ts\r\n * import { throwError } from 'rxjs';\r\n *\r\n * let errorCount = 0;\r\n *\r\n * const errorWithTimestamp$ = throwError(() => {\r\n *   const error: any = new Error(`This is error number ${ ++errorCount }`);\r\n *   error.timestamp = Date.now();\r\n *   return error;\r\n * });\r\n *\r\n * errorWithTimestamp$.subscribe({\r\n *   error: err => console.log(err.timestamp, err.message)\r\n * });\r\n *\r\n * errorWithTimestamp$.subscribe({\r\n *   error: err => console.log(err.timestamp, err.message)\r\n * });\r\n *\r\n * // Logs the timestamp and a new error message for each subscription\r\n * ```\r\n *\r\n * ### Unnecessary usage\r\n *\r\n * Using `throwError` inside of an operator or creation function\r\n * with a callback, is usually not necessary\r\n *\r\n * ```ts\r\n * import { of, concatMap, timer, throwError } from 'rxjs';\r\n *\r\n * const delays$ = of(1000, 2000, Infinity, 3000);\r\n *\r\n * delays$.pipe(\r\n *   concatMap(ms => {\r\n *     if (ms < 10000) {\r\n *       return timer(ms);\r\n *     } else {\r\n *       // This is probably overkill.\r\n *       return throwError(() => new Error(`Invalid time ${ ms }`));\r\n *     }\r\n *   })\r\n * )\r\n * .subscribe({\r\n *   next: console.log,\r\n *   error: console.error\r\n * });\r\n * ```\r\n *\r\n * You can just throw the error instead\r\n *\r\n * ```ts\r\n * import { of, concatMap, timer } from 'rxjs';\r\n *\r\n * const delays$ = of(1000, 2000, Infinity, 3000);\r\n *\r\n * delays$.pipe(\r\n *   concatMap(ms => {\r\n *     if (ms < 10000) {\r\n *       return timer(ms);\r\n *     } else {\r\n *       // Cleaner and easier to read for most folks.\r\n *       throw new Error(`Invalid time ${ ms }`);\r\n *     }\r\n *   })\r\n * )\r\n * .subscribe({\r\n *   next: console.log,\r\n *   error: console.error\r\n * });\r\n * ```\r\n *\r\n * @param errorFactory A factory function that will create the error instance that is pushed.\r\n */\r\nexport function throwError(errorFactory: () => any): Observable<never>;\r\n\r\n/**\r\n * Returns an observable that will error with the specified error immediately upon subscription.\r\n *\r\n * @param error The error instance to emit\r\n * @deprecated Support for passing an error value will be removed in v8. Instead, pass a factory function to `throwError(() => new Error('test'))`. This is\r\n * because it will create the error at the moment it should be created and capture a more appropriate stack trace. If\r\n * for some reason you need to create the error ahead of time, you can still do that: `const err = new Error('test'); throwError(() => err);`.\r\n */\r\nexport function throwError(error: any): Observable<never>;\r\n\r\n/**\r\n * Notifies the consumer of an error using a given scheduler by scheduling it at delay `0` upon subscription.\r\n *\r\n * @param errorOrErrorFactory An error instance or error factory\r\n * @param scheduler A scheduler to use to schedule the error notification\r\n * @deprecated The `scheduler` parameter will be removed in v8.\r\n * Use `throwError` in combination with {@link observeOn}: `throwError(() => new Error('test')).pipe(observeOn(scheduler));`.\r\n * Details: https://rxjs.dev/deprecations/scheduler-argument\r\n */\r\nexport function throwError(errorOrErrorFactory: any, scheduler: SchedulerLike): Observable<never>;\r\n\r\nexport function throwError(errorOrErrorFactory: any, scheduler?: SchedulerLike): Observable<never> {\r\n  const errorFactory = isFunction(errorOrErrorFactory) ? errorOrErrorFactory : () => errorOrErrorFactory;\r\n  const init = (subscriber: Subscriber<never>) => subscriber.error(errorFactory());\r\n  return new Observable(scheduler ? (subscriber) => scheduler.schedule(init as any, 0, subscriber) : init);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}