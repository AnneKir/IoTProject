{"ast":null,"code":"import { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function pairwise() {\n  return operate(function (source, subscriber) {\n    var prev;\n    var hasPrev = false;\n    source.subscribe(createOperatorSubscriber(subscriber, function (value) {\n      var p = prev;\n      prev = value;\n      hasPrev && subscriber.next([p, value]);\n      hasPrev = true;\n    }));\n  });\n}","map":{"version":3,"mappings":"AACA,SAASA,OAAO,QAAQ,cAAc;AACtC,SAASC,wBAAwB,QAAQ,sBAAsB;AA6C/D,OAAM,SAAUC,QAAQ;EACtB,OAAOF,OAAO,CAAC,UAACG,MAAM,EAAEC,UAAU;IAChC,IAAIC,IAAO;IACX,IAAIC,OAAO,GAAG,KAAK;IACnBH,MAAM,CAACI,SAAS,CACdN,wBAAwB,CAACG,UAAU,EAAE,UAACI,KAAK;MACzC,IAAMC,CAAC,GAAGJ,IAAI;MACdA,IAAI,GAAGG,KAAK;MACZF,OAAO,IAAIF,UAAU,CAACM,IAAI,CAAC,CAACD,CAAC,EAAED,KAAK,CAAC,CAAC;MACtCF,OAAO,GAAG,IAAI;IAChB,CAAC,CAAC,CACH;EACH,CAAC,CAAC;AACJ","names":["operate","createOperatorSubscriber","pairwise","source","subscriber","prev","hasPrev","subscribe","value","p","next"],"sources":["C:\\Users\\Amali\\Desktop\\Building_the_IoT_w._P2P_and_Cloud_Computing\\IoTProject\\node_modules\\rxjs\\src\\internal\\operators\\pairwise.ts"],"sourcesContent":["import { OperatorFunction } from '../types';\r\nimport { operate } from '../util/lift';\r\nimport { createOperatorSubscriber } from './OperatorSubscriber';\r\n\r\n/**\r\n * Groups pairs of consecutive emissions together and emits them as an array of\r\n * two values.\r\n *\r\n * <span class=\"informal\">Puts the current value and previous value together as\r\n * an array, and emits that.</span>\r\n *\r\n * ![](pairwise.png)\r\n *\r\n * The Nth emission from the source Observable will cause the output Observable\r\n * to emit an array [(N-1)th, Nth] of the previous and the current value, as a\r\n * pair. For this reason, `pairwise` emits on the second and subsequent\r\n * emissions from the source Observable, but not on the first emission, because\r\n * there is no previous value in that case.\r\n *\r\n * ## Example\r\n *\r\n * On every click (starting from the second), emit the relative distance to the previous click\r\n *\r\n * ```ts\r\n * import { fromEvent, pairwise, map } from 'rxjs';\r\n *\r\n * const clicks = fromEvent<PointerEvent>(document, 'click');\r\n * const pairs = clicks.pipe(pairwise());\r\n * const distance = pairs.pipe(\r\n *   map(([first, second]) => {\r\n *     const x0 = first.clientX;\r\n *     const y0 = first.clientY;\r\n *     const x1 = second.clientX;\r\n *     const y1 = second.clientY;\r\n *     return Math.sqrt(Math.pow(x0 - x1, 2) + Math.pow(y0 - y1, 2));\r\n *   })\r\n * );\r\n *\r\n * distance.subscribe(x => console.log(x));\r\n * ```\r\n *\r\n * @see {@link buffer}\r\n * @see {@link bufferCount}\r\n *\r\n * @return A function that returns an Observable of pairs (as arrays) of\r\n * consecutive values from the source Observable.\r\n */\r\nexport function pairwise<T>(): OperatorFunction<T, [T, T]> {\r\n  return operate((source, subscriber) => {\r\n    let prev: T;\r\n    let hasPrev = false;\r\n    source.subscribe(\r\n      createOperatorSubscriber(subscriber, (value) => {\r\n        const p = prev;\r\n        prev = value;\r\n        hasPrev && subscriber.next([p, value]);\r\n        hasPrev = true;\r\n      })\r\n    );\r\n  });\r\n}\r\n"]},"metadata":{},"sourceType":"module"}