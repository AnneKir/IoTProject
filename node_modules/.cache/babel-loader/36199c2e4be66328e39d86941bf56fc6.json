{"ast":null,"code":"import { Observable } from '../Observable';\nexport function scheduleArray(input, scheduler) {\n  return new Observable(function (subscriber) {\n    var i = 0;\n    return scheduler.schedule(function () {\n      if (i === input.length) {\n        subscriber.complete();\n      } else {\n        subscriber.next(input[i++]);\n        if (!subscriber.closed) {\n          this.schedule();\n        }\n      }\n    });\n  });\n}","map":{"version":3,"mappings":"AAAA,SAASA,UAAU,QAAQ,eAAe;AAG1C,OAAM,SAAUC,aAAa,CAAIC,KAAmB,EAAEC,SAAwB;EAC5E,OAAO,IAAIH,UAAU,CAAI,UAACI,UAAU;IAElC,IAAIC,CAAC,GAAG,CAAC;IAET,OAAOF,SAAS,CAACG,QAAQ,CAAC;MACxB,IAAID,CAAC,KAAKH,KAAK,CAACK,MAAM,EAAE;QAGtBH,UAAU,CAACI,QAAQ,EAAE;OACtB,MAAM;QAGLJ,UAAU,CAACK,IAAI,CAACP,KAAK,CAACG,CAAC,EAAE,CAAC,CAAC;QAI3B,IAAI,CAACD,UAAU,CAACM,MAAM,EAAE;UACtB,IAAI,CAACJ,QAAQ,EAAE;;;IAGrB,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ","names":["Observable","scheduleArray","input","scheduler","subscriber","i","schedule","length","complete","next","closed"],"sources":["C:\\Users\\Amali\\Desktop\\Building_the_IoT_w._P2P_and_Cloud_Computing\\IoTProject\\node_modules\\rxjs\\src\\internal\\scheduled\\scheduleArray.ts"],"sourcesContent":["import { Observable } from '../Observable';\r\nimport { SchedulerLike } from '../types';\r\n\r\nexport function scheduleArray<T>(input: ArrayLike<T>, scheduler: SchedulerLike) {\r\n  return new Observable<T>((subscriber) => {\r\n    // The current array index.\r\n    let i = 0;\r\n    // Start iterating over the array like on a schedule.\r\n    return scheduler.schedule(function () {\r\n      if (i === input.length) {\r\n        // If we have hit the end of the array like in the\r\n        // previous job, we can complete.\r\n        subscriber.complete();\r\n      } else {\r\n        // Otherwise let's next the value at the current index,\r\n        // then increment our index.\r\n        subscriber.next(input[i++]);\r\n        // If the last emission didn't cause us to close the subscriber\r\n        // (via take or some side effect), reschedule the job and we'll\r\n        // make another pass.\r\n        if (!subscriber.closed) {\r\n          this.schedule();\r\n        }\r\n      }\r\n    });\r\n  });\r\n}\r\n"]},"metadata":{},"sourceType":"module"}