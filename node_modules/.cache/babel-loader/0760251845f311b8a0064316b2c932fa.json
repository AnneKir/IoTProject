{"ast":null,"code":"import { scheduleObservable } from './scheduleObservable';\nimport { schedulePromise } from './schedulePromise';\nimport { scheduleArray } from './scheduleArray';\nimport { scheduleIterable } from './scheduleIterable';\nimport { scheduleAsyncIterable } from './scheduleAsyncIterable';\nimport { isInteropObservable } from '../util/isInteropObservable';\nimport { isPromise } from '../util/isPromise';\nimport { isArrayLike } from '../util/isArrayLike';\nimport { isIterable } from '../util/isIterable';\nimport { isAsyncIterable } from '../util/isAsyncIterable';\nimport { createInvalidObservableTypeError } from '../util/throwUnobservableError';\nimport { isReadableStreamLike } from '../util/isReadableStreamLike';\nimport { scheduleReadableStreamLike } from './scheduleReadableStreamLike';\nexport function scheduled(input, scheduler) {\n  if (input != null) {\n    if (isInteropObservable(input)) {\n      return scheduleObservable(input, scheduler);\n    }\n    if (isArrayLike(input)) {\n      return scheduleArray(input, scheduler);\n    }\n    if (isPromise(input)) {\n      return schedulePromise(input, scheduler);\n    }\n    if (isAsyncIterable(input)) {\n      return scheduleAsyncIterable(input, scheduler);\n    }\n    if (isIterable(input)) {\n      return scheduleIterable(input, scheduler);\n    }\n    if (isReadableStreamLike(input)) {\n      return scheduleReadableStreamLike(input, scheduler);\n    }\n  }\n  throw createInvalidObservableTypeError(input);\n}","map":{"version":3,"mappings":"AAAA,SAASA,kBAAkB,QAAQ,sBAAsB;AACzD,SAASC,eAAe,QAAQ,mBAAmB;AACnD,SAASC,aAAa,QAAQ,iBAAiB;AAC/C,SAASC,gBAAgB,QAAQ,oBAAoB;AACrD,SAASC,qBAAqB,QAAQ,yBAAyB;AAC/D,SAASC,mBAAmB,QAAQ,6BAA6B;AACjE,SAASC,SAAS,QAAQ,mBAAmB;AAC7C,SAASC,WAAW,QAAQ,qBAAqB;AACjD,SAASC,UAAU,QAAQ,oBAAoB;AAG/C,SAASC,eAAe,QAAQ,yBAAyB;AACzD,SAASC,gCAAgC,QAAQ,gCAAgC;AACjF,SAASC,oBAAoB,QAAQ,8BAA8B;AACnE,SAASC,0BAA0B,QAAQ,8BAA8B;AAazE,OAAM,SAAUC,SAAS,CAAIC,KAAyB,EAAEC,SAAwB;EAC9E,IAAID,KAAK,IAAI,IAAI,EAAE;IACjB,IAAIT,mBAAmB,CAACS,KAAK,CAAC,EAAE;MAC9B,OAAOd,kBAAkB,CAACc,KAAK,EAAEC,SAAS,CAAC;;IAE7C,IAAIR,WAAW,CAACO,KAAK,CAAC,EAAE;MACtB,OAAOZ,aAAa,CAACY,KAAK,EAAEC,SAAS,CAAC;;IAExC,IAAIT,SAAS,CAACQ,KAAK,CAAC,EAAE;MACpB,OAAOb,eAAe,CAACa,KAAK,EAAEC,SAAS,CAAC;;IAE1C,IAAIN,eAAe,CAACK,KAAK,CAAC,EAAE;MAC1B,OAAOV,qBAAqB,CAACU,KAAK,EAAEC,SAAS,CAAC;;IAEhD,IAAIP,UAAU,CAACM,KAAK,CAAC,EAAE;MACrB,OAAOX,gBAAgB,CAACW,KAAK,EAAEC,SAAS,CAAC;;IAE3C,IAAIJ,oBAAoB,CAACG,KAAK,CAAC,EAAE;MAC/B,OAAOF,0BAA0B,CAACE,KAAK,EAAEC,SAAS,CAAC;;;EAGvD,MAAML,gCAAgC,CAACI,KAAK,CAAC;AAC/C","names":["scheduleObservable","schedulePromise","scheduleArray","scheduleIterable","scheduleAsyncIterable","isInteropObservable","isPromise","isArrayLike","isIterable","isAsyncIterable","createInvalidObservableTypeError","isReadableStreamLike","scheduleReadableStreamLike","scheduled","input","scheduler"],"sources":["C:\\Users\\Amali\\Desktop\\Building_the_IoT_w._P2P_and_Cloud_Computing\\IoTProject\\node_modules\\rxjs\\src\\internal\\scheduled\\scheduled.ts"],"sourcesContent":["import { scheduleObservable } from './scheduleObservable';\r\nimport { schedulePromise } from './schedulePromise';\r\nimport { scheduleArray } from './scheduleArray';\r\nimport { scheduleIterable } from './scheduleIterable';\r\nimport { scheduleAsyncIterable } from './scheduleAsyncIterable';\r\nimport { isInteropObservable } from '../util/isInteropObservable';\r\nimport { isPromise } from '../util/isPromise';\r\nimport { isArrayLike } from '../util/isArrayLike';\r\nimport { isIterable } from '../util/isIterable';\r\nimport { ObservableInput, SchedulerLike } from '../types';\r\nimport { Observable } from '../Observable';\r\nimport { isAsyncIterable } from '../util/isAsyncIterable';\r\nimport { createInvalidObservableTypeError } from '../util/throwUnobservableError';\r\nimport { isReadableStreamLike } from '../util/isReadableStreamLike';\r\nimport { scheduleReadableStreamLike } from './scheduleReadableStreamLike';\r\n\r\n/**\r\n * Converts from a common {@link ObservableInput} type to an observable where subscription and emissions\r\n * are scheduled on the provided scheduler.\r\n *\r\n * @see {@link from}\r\n * @see {@link of}\r\n *\r\n * @param input The observable, array, promise, iterable, etc you would like to schedule\r\n * @param scheduler The scheduler to use to schedule the subscription and emissions from\r\n * the returned observable.\r\n */\r\nexport function scheduled<T>(input: ObservableInput<T>, scheduler: SchedulerLike): Observable<T> {\r\n  if (input != null) {\r\n    if (isInteropObservable(input)) {\r\n      return scheduleObservable(input, scheduler);\r\n    }\r\n    if (isArrayLike(input)) {\r\n      return scheduleArray(input, scheduler);\r\n    }\r\n    if (isPromise(input)) {\r\n      return schedulePromise(input, scheduler);\r\n    }\r\n    if (isAsyncIterable(input)) {\r\n      return scheduleAsyncIterable(input, scheduler);\r\n    }\r\n    if (isIterable(input)) {\r\n      return scheduleIterable(input, scheduler);\r\n    }\r\n    if (isReadableStreamLike(input)) {\r\n      return scheduleReadableStreamLike(input, scheduler);\r\n    }\r\n  }\r\n  throw createInvalidObservableTypeError(input);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}