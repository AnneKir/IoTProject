{"ast":null,"code":"import { identity } from '../util/identity';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function distinctUntilChanged(comparator, keySelector) {\n  if (keySelector === void 0) {\n    keySelector = identity;\n  }\n  comparator = comparator !== null && comparator !== void 0 ? comparator : defaultCompare;\n  return operate(function (source, subscriber) {\n    var previousKey;\n    var first = true;\n    source.subscribe(createOperatorSubscriber(subscriber, function (value) {\n      var currentKey = keySelector(value);\n      if (first || !comparator(previousKey, currentKey)) {\n        first = false;\n        previousKey = currentKey;\n        subscriber.next(value);\n      }\n    }));\n  });\n}\nfunction defaultCompare(a, b) {\n  return a === b;\n}","map":{"version":3,"mappings":"AACA,SAASA,QAAQ,QAAQ,kBAAkB;AAC3C,SAASC,OAAO,QAAQ,cAAc;AACtC,SAASC,wBAAwB,QAAQ,sBAAsB;AAuI/D,OAAM,SAAUC,oBAAoB,CAClCC,UAAiD,EACjDC,WAA0D;EAA1D;IAAAA,cAA+BL,QAA2B;EAAA;EAK1DI,UAAU,GAAGA,UAAU,aAAVA,UAAU,cAAVA,UAAU,GAAIE,cAAc;EAEzC,OAAOL,OAAO,CAAC,UAACM,MAAM,EAAEC,UAAU;IAGhC,IAAIC,WAAc;IAElB,IAAIC,KAAK,GAAG,IAAI;IAEhBH,MAAM,CAACI,SAAS,CACdT,wBAAwB,CAACM,UAAU,EAAE,UAACI,KAAK;MAEzC,IAAMC,UAAU,GAAGR,WAAW,CAACO,KAAK,CAAC;MAKrC,IAAIF,KAAK,IAAI,CAACN,UAAW,CAACK,WAAW,EAAEI,UAAU,CAAC,EAAE;QAMlDH,KAAK,GAAG,KAAK;QACbD,WAAW,GAAGI,UAAU;QAGxBL,UAAU,CAACM,IAAI,CAACF,KAAK,CAAC;;IAE1B,CAAC,CAAC,CACH;EACH,CAAC,CAAC;AACJ;AAEA,SAASN,cAAc,CAACS,CAAM,EAAEC,CAAM;EACpC,OAAOD,CAAC,KAAKC,CAAC;AAChB","names":["identity","operate","createOperatorSubscriber","distinctUntilChanged","comparator","keySelector","defaultCompare","source","subscriber","previousKey","first","subscribe","value","currentKey","next","a","b"],"sources":["C:\\Users\\Amali\\Desktop\\Building_the_IoT_w._P2P_and_Cloud_Computing\\IoTProject\\node_modules\\rxjs\\src\\internal\\operators\\distinctUntilChanged.ts"],"sourcesContent":["import { MonoTypeOperatorFunction } from '../types';\r\nimport { identity } from '../util/identity';\r\nimport { operate } from '../util/lift';\r\nimport { createOperatorSubscriber } from './OperatorSubscriber';\r\n\r\nexport function distinctUntilChanged<T>(comparator?: (previous: T, current: T) => boolean): MonoTypeOperatorFunction<T>;\r\nexport function distinctUntilChanged<T, K>(\r\n  comparator: (previous: K, current: K) => boolean,\r\n  keySelector: (value: T) => K\r\n): MonoTypeOperatorFunction<T>;\r\n\r\n/**\r\n * Returns a result {@link Observable} that emits all values pushed by the source observable if they\r\n * are distinct in comparison to the last value the result observable emitted.\r\n *\r\n * When provided without parameters or with the first parameter (`{@link distinctUntilChanged#comparator comparator}`),\r\n * it behaves like this:\r\n *\r\n * 1. It will always emit the first value from the source.\r\n * 2. For all subsequent values pushed by the source, they will be compared to the previously emitted values\r\n *    using the provided `comparator` or an `===` equality check.\r\n * 3. If the value pushed by the source is determined to be unequal by this check, that value is emitted and\r\n *    becomes the new \"previously emitted value\" internally.\r\n *\r\n * When the second parameter (`{@link distinctUntilChanged#keySelector keySelector}`) is provided, the behavior\r\n * changes:\r\n *\r\n * 1. It will always emit the first value from the source.\r\n * 2. The `keySelector` will be run against all values, including the first value.\r\n * 3. For all values after the first, the selected key will be compared against the key selected from\r\n *    the previously emitted value using the `comparator`.\r\n * 4. If the keys are determined to be unequal by this check, the value (not the key), is emitted\r\n *    and the selected key from that value is saved for future comparisons against other keys.\r\n *\r\n * ## Examples\r\n *\r\n * A very basic example with no `{@link distinctUntilChanged#comparator comparator}`. Note that `1` is emitted more than once,\r\n * because it's distinct in comparison to the _previously emitted_ value,\r\n * not in comparison to _all other emitted values_.\r\n *\r\n * ```ts\r\n * import { of, distinctUntilChanged } from 'rxjs';\r\n *\r\n * of(1, 1, 1, 2, 2, 2, 1, 1, 3, 3)\r\n *   .pipe(distinctUntilChanged())\r\n *   .subscribe(console.log);\r\n * // Logs: 1, 2, 1, 3\r\n * ```\r\n *\r\n * With a `{@link distinctUntilChanged#comparator comparator}`, you can do custom comparisons. Let's say\r\n * you only want to emit a value when all of its components have\r\n * changed:\r\n *\r\n * ```ts\r\n * import { of, distinctUntilChanged } from 'rxjs';\r\n *\r\n * const totallyDifferentBuilds$ = of(\r\n *   { engineVersion: '1.1.0', transmissionVersion: '1.2.0' },\r\n *   { engineVersion: '1.1.0', transmissionVersion: '1.4.0' },\r\n *   { engineVersion: '1.3.0', transmissionVersion: '1.4.0' },\r\n *   { engineVersion: '1.3.0', transmissionVersion: '1.5.0' },\r\n *   { engineVersion: '2.0.0', transmissionVersion: '1.5.0' }\r\n * ).pipe(\r\n *   distinctUntilChanged((prev, curr) => {\r\n *     return (\r\n *       prev.engineVersion === curr.engineVersion ||\r\n *       prev.transmissionVersion === curr.transmissionVersion\r\n *     );\r\n *   })\r\n * );\r\n *\r\n * totallyDifferentBuilds$.subscribe(console.log);\r\n *\r\n * // Logs:\r\n * // { engineVersion: '1.1.0', transmissionVersion: '1.2.0' }\r\n * // { engineVersion: '1.3.0', transmissionVersion: '1.4.0' }\r\n * // { engineVersion: '2.0.0', transmissionVersion: '1.5.0' }\r\n * ```\r\n *\r\n * You can also provide a custom `{@link distinctUntilChanged#comparator comparator}` to check that emitted\r\n * changes are only in one direction. Let's say you only want to get\r\n * the next record temperature:\r\n *\r\n * ```ts\r\n * import { of, distinctUntilChanged } from 'rxjs';\r\n *\r\n * const temps$ = of(30, 31, 20, 34, 33, 29, 35, 20);\r\n *\r\n * const recordHighs$ = temps$.pipe(\r\n *   distinctUntilChanged((prevHigh, temp) => {\r\n *     // If the current temp is less than\r\n *     // or the same as the previous record,\r\n *     // the record hasn't changed.\r\n *     return temp <= prevHigh;\r\n *   })\r\n * );\r\n *\r\n * recordHighs$.subscribe(console.log);\r\n * // Logs: 30, 31, 34, 35\r\n * ```\r\n *\r\n * Selecting update events only when the `updatedBy` field shows\r\n * the account changed hands.\r\n *\r\n * ```ts\r\n * import { of, distinctUntilChanged } from 'rxjs';\r\n *\r\n * // A stream of updates to a given account\r\n * const accountUpdates$ = of(\r\n *   { updatedBy: 'blesh', data: [] },\r\n *   { updatedBy: 'blesh', data: [] },\r\n *   { updatedBy: 'ncjamieson', data: [] },\r\n *   { updatedBy: 'ncjamieson', data: [] },\r\n *   { updatedBy: 'blesh', data: [] }\r\n * );\r\n *\r\n * // We only want the events where it changed hands\r\n * const changedHands$ = accountUpdates$.pipe(\r\n *   distinctUntilChanged(undefined, update => update.updatedBy)\r\n * );\r\n *\r\n * changedHands$.subscribe(console.log);\r\n * // Logs:\r\n * // { updatedBy: 'blesh', data: Array[0] }\r\n * // { updatedBy: 'ncjamieson', data: Array[0] }\r\n * // { updatedBy: 'blesh', data: Array[0] }\r\n * ```\r\n *\r\n * @see {@link distinct}\r\n * @see {@link distinctUntilKeyChanged}\r\n *\r\n * @param comparator A function used to compare the previous and current keys for\r\n * equality. Defaults to a `===` check.\r\n * @param keySelector Used to select a key value to be passed to the `comparator`.\r\n *\r\n * @return A function that returns an Observable that emits items from the\r\n * source Observable with distinct values.\r\n */\r\nexport function distinctUntilChanged<T, K>(\r\n  comparator?: (previous: K, current: K) => boolean,\r\n  keySelector: (value: T) => K = identity as (value: T) => K\r\n): MonoTypeOperatorFunction<T> {\r\n  // We've been allowing `null` do be passed as the `compare`, so we can't do\r\n  // a default value for the parameter, because that will only work\r\n  // for `undefined`.\r\n  comparator = comparator ?? defaultCompare;\r\n\r\n  return operate((source, subscriber) => {\r\n    // The previous key, used to compare against keys selected\r\n    // from new arrivals to determine \"distinctiveness\".\r\n    let previousKey: K;\r\n    // Whether or not this is the first value we've gotten.\r\n    let first = true;\r\n\r\n    source.subscribe(\r\n      createOperatorSubscriber(subscriber, (value) => {\r\n        // We always call the key selector.\r\n        const currentKey = keySelector(value);\r\n\r\n        // If it's the first value, we always emit it.\r\n        // Otherwise, we compare this key to the previous key, and\r\n        // if the comparer returns false, we emit.\r\n        if (first || !comparator!(previousKey, currentKey)) {\r\n          // Update our state *before* we emit the value\r\n          // as emission can be the source of re-entrant code\r\n          // in functional libraries like this. We only really\r\n          // need to do this if it's the first value, or if the\r\n          // key we're tracking in previous needs to change.\r\n          first = false;\r\n          previousKey = currentKey;\r\n\r\n          // Emit the value!\r\n          subscriber.next(value);\r\n        }\r\n      })\r\n    );\r\n  });\r\n}\r\n\r\nfunction defaultCompare(a: any, b: any) {\r\n  return a === b;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}