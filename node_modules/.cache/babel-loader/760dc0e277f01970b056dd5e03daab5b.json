{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.decodePayload = exports.decodePacket = exports.encodePayload = exports.encodePacket = exports.protocol = void 0;\nvar encodePacket_js_1 = require(\"./encodePacket.js\");\nexports.encodePacket = encodePacket_js_1.default;\nvar decodePacket_js_1 = require(\"./decodePacket.js\");\nexports.decodePacket = decodePacket_js_1.default;\nvar SEPARATOR = String.fromCharCode(30); // see https://en.wikipedia.org/wiki/Delimiter#ASCII_delimited_text\nvar encodePayload = function encodePayload(packets, callback) {\n  // some packets may be added to the array while encoding, so the initial length must be saved\n  var length = packets.length;\n  var encodedPackets = new Array(length);\n  var count = 0;\n  packets.forEach(function (packet, i) {\n    // force base64 encoding for binary packets\n    (0, encodePacket_js_1.default)(packet, false, function (encodedPacket) {\n      encodedPackets[i] = encodedPacket;\n      if (++count === length) {\n        callback(encodedPackets.join(SEPARATOR));\n      }\n    });\n  });\n};\nexports.encodePayload = encodePayload;\nvar decodePayload = function decodePayload(encodedPayload, binaryType) {\n  var encodedPackets = encodedPayload.split(SEPARATOR);\n  var packets = [];\n  for (var i = 0; i < encodedPackets.length; i++) {\n    var decodedPacket = (0, decodePacket_js_1.default)(encodedPackets[i], binaryType);\n    packets.push(decodedPacket);\n    if (decodedPacket.type === \"error\") {\n      break;\n    }\n  }\n  return packets;\n};\nexports.decodePayload = decodePayload;\nexports.protocol = 4;","map":{"version":3,"names":["Object","defineProperty","exports","value","decodePayload","decodePacket","encodePayload","encodePacket","protocol","encodePacket_js_1","require","default","decodePacket_js_1","SEPARATOR","String","fromCharCode","packets","callback","length","encodedPackets","Array","count","forEach","packet","i","encodedPacket","join","encodedPayload","binaryType","split","decodedPacket","push","type"],"sources":["C:/Users/Amali/Desktop/Building_the_IoT_w._P2P_and_Cloud_Computing/IoTProject/node_modules/engine.io-parser/build/cjs/index.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.decodePayload = exports.decodePacket = exports.encodePayload = exports.encodePacket = exports.protocol = void 0;\nconst encodePacket_js_1 = require(\"./encodePacket.js\");\nexports.encodePacket = encodePacket_js_1.default;\nconst decodePacket_js_1 = require(\"./decodePacket.js\");\nexports.decodePacket = decodePacket_js_1.default;\nconst SEPARATOR = String.fromCharCode(30); // see https://en.wikipedia.org/wiki/Delimiter#ASCII_delimited_text\nconst encodePayload = (packets, callback) => {\n    // some packets may be added to the array while encoding, so the initial length must be saved\n    const length = packets.length;\n    const encodedPackets = new Array(length);\n    let count = 0;\n    packets.forEach((packet, i) => {\n        // force base64 encoding for binary packets\n        (0, encodePacket_js_1.default)(packet, false, encodedPacket => {\n            encodedPackets[i] = encodedPacket;\n            if (++count === length) {\n                callback(encodedPackets.join(SEPARATOR));\n            }\n        });\n    });\n};\nexports.encodePayload = encodePayload;\nconst decodePayload = (encodedPayload, binaryType) => {\n    const encodedPackets = encodedPayload.split(SEPARATOR);\n    const packets = [];\n    for (let i = 0; i < encodedPackets.length; i++) {\n        const decodedPacket = (0, decodePacket_js_1.default)(encodedPackets[i], binaryType);\n        packets.push(decodedPacket);\n        if (decodedPacket.type === \"error\") {\n            break;\n        }\n    }\n    return packets;\n};\nexports.decodePayload = decodePayload;\nexports.protocol = 4;\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,aAAa,GAAGF,OAAO,CAACG,YAAY,GAAGH,OAAO,CAACI,aAAa,GAAGJ,OAAO,CAACK,YAAY,GAAGL,OAAO,CAACM,QAAQ,GAAG,KAAK,CAAC;AACvH,IAAMC,iBAAiB,GAAGC,OAAO,CAAC,mBAAmB,CAAC;AACtDR,OAAO,CAACK,YAAY,GAAGE,iBAAiB,CAACE,OAAO;AAChD,IAAMC,iBAAiB,GAAGF,OAAO,CAAC,mBAAmB,CAAC;AACtDR,OAAO,CAACG,YAAY,GAAGO,iBAAiB,CAACD,OAAO;AAChD,IAAME,SAAS,GAAGC,MAAM,CAACC,YAAY,CAAC,EAAE,CAAC,CAAC,CAAC;AAC3C,IAAMT,aAAa,GAAG,SAAhBA,aAAa,CAAIU,OAAO,EAAEC,QAAQ,EAAK;EACzC;EACA,IAAMC,MAAM,GAAGF,OAAO,CAACE,MAAM;EAC7B,IAAMC,cAAc,GAAG,IAAIC,KAAK,CAACF,MAAM,CAAC;EACxC,IAAIG,KAAK,GAAG,CAAC;EACbL,OAAO,CAACM,OAAO,CAAC,UAACC,MAAM,EAAEC,CAAC,EAAK;IAC3B;IACA,CAAC,CAAC,EAAEf,iBAAiB,CAACE,OAAO,EAAEY,MAAM,EAAE,KAAK,EAAE,UAAAE,aAAa,EAAI;MAC3DN,cAAc,CAACK,CAAC,CAAC,GAAGC,aAAa;MACjC,IAAI,EAAEJ,KAAK,KAAKH,MAAM,EAAE;QACpBD,QAAQ,CAACE,cAAc,CAACO,IAAI,CAACb,SAAS,CAAC,CAAC;MAC5C;IACJ,CAAC,CAAC;EACN,CAAC,CAAC;AACN,CAAC;AACDX,OAAO,CAACI,aAAa,GAAGA,aAAa;AACrC,IAAMF,aAAa,GAAG,SAAhBA,aAAa,CAAIuB,cAAc,EAAEC,UAAU,EAAK;EAClD,IAAMT,cAAc,GAAGQ,cAAc,CAACE,KAAK,CAAChB,SAAS,CAAC;EACtD,IAAMG,OAAO,GAAG,EAAE;EAClB,KAAK,IAAIQ,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,cAAc,CAACD,MAAM,EAAEM,CAAC,EAAE,EAAE;IAC5C,IAAMM,aAAa,GAAG,CAAC,CAAC,EAAElB,iBAAiB,CAACD,OAAO,EAAEQ,cAAc,CAACK,CAAC,CAAC,EAAEI,UAAU,CAAC;IACnFZ,OAAO,CAACe,IAAI,CAACD,aAAa,CAAC;IAC3B,IAAIA,aAAa,CAACE,IAAI,KAAK,OAAO,EAAE;MAChC;IACJ;EACJ;EACA,OAAOhB,OAAO;AAClB,CAAC;AACDd,OAAO,CAACE,aAAa,GAAGA,aAAa;AACrCF,OAAO,CAACM,QAAQ,GAAG,CAAC"},"metadata":{},"sourceType":"script"}