{"ast":null,"code":"var TreeNode = /** @class */function () {\n  function TreeNode(key, value) {\n    this.color = true;\n    this.key = undefined;\n    this.value = undefined;\n    this.left = undefined;\n    this.right = undefined;\n    this.parent = undefined;\n    this.key = key;\n    this.value = value;\n  }\n  /**\n   * @description Get the pre node.\n   * @return TreeNode about the pre node.\n   */\n  TreeNode.prototype.pre = function () {\n    var preNode = this;\n    if (preNode.color === TreeNode.RED && preNode.parent.parent === preNode) {\n      preNode = preNode.right;\n    } else if (preNode.left) {\n      preNode = preNode.left;\n      while (preNode.right) {\n        preNode = preNode.right;\n      }\n    } else {\n      var pre = preNode.parent;\n      while (pre.left === preNode) {\n        preNode = pre;\n        pre = preNode.parent;\n      }\n      preNode = pre;\n    }\n    return preNode;\n  };\n  /**\n   * @description Get the next node.\n   * @return TreeNode about the next node.\n   */\n  TreeNode.prototype.next = function () {\n    var nextNode = this;\n    if (nextNode.right) {\n      nextNode = nextNode.right;\n      while (nextNode.left) {\n        nextNode = nextNode.left;\n      }\n    } else {\n      var pre = nextNode.parent;\n      while (pre.right === nextNode) {\n        nextNode = pre;\n        pre = nextNode.parent;\n      }\n      if (nextNode.right !== pre) {\n        nextNode = pre;\n      }\n    }\n    return nextNode;\n  };\n  /**\n   * @description Rotate left.\n   * @return TreeNode about moved to original position after rotation.\n   */\n  TreeNode.prototype.rotateLeft = function () {\n    var PP = this.parent;\n    var V = this.right;\n    var R = V.left;\n    if (PP.parent === this) PP.parent = V;else if (PP.left === this) PP.left = V;else PP.right = V;\n    V.parent = PP;\n    V.left = this;\n    this.parent = V;\n    this.right = R;\n    if (R) R.parent = this;\n    return V;\n  };\n  /**\n   * @description Rotate left.\n   * @return TreeNode about moved to original position after rotation.\n   */\n  TreeNode.prototype.rotateRight = function () {\n    var PP = this.parent;\n    var F = this.left;\n    var K = F.right;\n    if (PP.parent === this) PP.parent = F;else if (PP.left === this) PP.left = F;else PP.right = F;\n    F.parent = PP;\n    F.right = this;\n    this.parent = F;\n    this.left = K;\n    if (K) K.parent = this;\n    return F;\n  };\n  /**\n   * @description Remove this.\n   */\n  TreeNode.prototype.remove = function () {\n    var parent = this.parent;\n    if (this === parent.left) {\n      parent.left = undefined;\n    } else parent.right = undefined;\n  };\n  TreeNode.RED = true;\n  TreeNode.BLACK = false;\n  return TreeNode;\n}();\nexport default TreeNode;","map":{"version":3,"names":["TreeNode","key","value","color","undefined","left","right","parent","prototype","pre","preNode","RED","next","nextNode","rotateLeft","PP","V","R","rotateRight","F","K","remove","BLACK"],"sources":["C:/Users/Amali/Desktop/Building_the_IoT_w._P2P_and_Cloud_Computing/IoTProject/node_modules/js-sdsl/dist/esm/container/TreeContainer/Base/TreeNode.js"],"sourcesContent":["var TreeNode = /** @class */ (function () {\n    function TreeNode(key, value) {\n        this.color = true;\n        this.key = undefined;\n        this.value = undefined;\n        this.left = undefined;\n        this.right = undefined;\n        this.parent = undefined;\n        this.key = key;\n        this.value = value;\n    }\n    /**\n     * @description Get the pre node.\n     * @return TreeNode about the pre node.\n     */\n    TreeNode.prototype.pre = function () {\n        var preNode = this;\n        if (preNode.color === TreeNode.RED &&\n            preNode.parent.parent === preNode) {\n            preNode = preNode.right;\n        }\n        else if (preNode.left) {\n            preNode = preNode.left;\n            while (preNode.right) {\n                preNode = preNode.right;\n            }\n        }\n        else {\n            var pre = preNode.parent;\n            while (pre.left === preNode) {\n                preNode = pre;\n                pre = preNode.parent;\n            }\n            preNode = pre;\n        }\n        return preNode;\n    };\n    /**\n     * @description Get the next node.\n     * @return TreeNode about the next node.\n     */\n    TreeNode.prototype.next = function () {\n        var nextNode = this;\n        if (nextNode.right) {\n            nextNode = nextNode.right;\n            while (nextNode.left) {\n                nextNode = nextNode.left;\n            }\n        }\n        else {\n            var pre = nextNode.parent;\n            while (pre.right === nextNode) {\n                nextNode = pre;\n                pre = nextNode.parent;\n            }\n            if (nextNode.right !== pre) {\n                nextNode = pre;\n            }\n        }\n        return nextNode;\n    };\n    /**\n     * @description Rotate left.\n     * @return TreeNode about moved to original position after rotation.\n     */\n    TreeNode.prototype.rotateLeft = function () {\n        var PP = this.parent;\n        var V = this.right;\n        var R = V.left;\n        if (PP.parent === this)\n            PP.parent = V;\n        else if (PP.left === this)\n            PP.left = V;\n        else\n            PP.right = V;\n        V.parent = PP;\n        V.left = this;\n        this.parent = V;\n        this.right = R;\n        if (R)\n            R.parent = this;\n        return V;\n    };\n    /**\n     * @description Rotate left.\n     * @return TreeNode about moved to original position after rotation.\n     */\n    TreeNode.prototype.rotateRight = function () {\n        var PP = this.parent;\n        var F = this.left;\n        var K = F.right;\n        if (PP.parent === this)\n            PP.parent = F;\n        else if (PP.left === this)\n            PP.left = F;\n        else\n            PP.right = F;\n        F.parent = PP;\n        F.right = this;\n        this.parent = F;\n        this.left = K;\n        if (K)\n            K.parent = this;\n        return F;\n    };\n    /**\n     * @description Remove this.\n     */\n    TreeNode.prototype.remove = function () {\n        var parent = this.parent;\n        if (this === parent.left) {\n            parent.left = undefined;\n        }\n        else\n            parent.right = undefined;\n    };\n    TreeNode.RED = true;\n    TreeNode.BLACK = false;\n    return TreeNode;\n}());\nexport default TreeNode;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}