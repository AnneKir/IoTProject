{"ast":null,"code":"import { __read, __spreadArray } from \"tslib\";\nimport { concat } from './concat';\nexport function concatWith() {\n  var otherSources = [];\n  for (var _i = 0; _i < arguments.length; _i++) {\n    otherSources[_i] = arguments[_i];\n  }\n  return concat.apply(void 0, __spreadArray([], __read(otherSources)));\n}","map":{"version":3,"mappings":";AACA,SAASA,MAAM,QAAQ,UAAU;AA0CjC,OAAM,SAAUC,UAAU;EACxB;OAAA,UAA6C,EAA7CC,qBAA6C,EAA7CA,IAA6C;IAA7CC;;EAEA,OAAOH,MAAM,wCAAIG,YAAY;AAC/B","names":["concat","concatWith","_i","otherSources"],"sources":["C:\\Users\\Amali\\Desktop\\Building_the_IoT_w._P2P_and_Cloud_Computing\\IoTProject\\node_modules\\rxjs\\src\\internal\\operators\\concatWith.ts"],"sourcesContent":["import { ObservableInputTuple, OperatorFunction } from '../types';\r\nimport { concat } from './concat';\r\n\r\n/**\r\n * Emits all of the values from the source observable, then, once it completes, subscribes\r\n * to each observable source provided, one at a time, emitting all of their values, and not subscribing\r\n * to the next one until it completes.\r\n *\r\n * `concat(a$, b$, c$)` is the same as `a$.pipe(concatWith(b$, c$))`.\r\n *\r\n * ## Example\r\n *\r\n * Listen for one mouse click, then listen for all mouse moves.\r\n *\r\n * ```ts\r\n * import { fromEvent, map, take, concatWith } from 'rxjs';\r\n *\r\n * const clicks$ = fromEvent(document, 'click');\r\n * const moves$ = fromEvent(document, 'mousemove');\r\n *\r\n * clicks$.pipe(\r\n *   map(() => 'click'),\r\n *   take(1),\r\n *   concatWith(\r\n *     moves$.pipe(\r\n *       map(() => 'move')\r\n *     )\r\n *   )\r\n * )\r\n * .subscribe(x => console.log(x));\r\n *\r\n * // 'click'\r\n * // 'move'\r\n * // 'move'\r\n * // 'move'\r\n * // ...\r\n * ```\r\n *\r\n * @param otherSources Other observable sources to subscribe to, in sequence, after the original source is complete.\r\n * @return A function that returns an Observable that concatenates\r\n * subscriptions to the source and provided Observables subscribing to the next\r\n * only once the current subscription completes.\r\n */\r\nexport function concatWith<T, A extends readonly unknown[]>(\r\n  ...otherSources: [...ObservableInputTuple<A>]\r\n): OperatorFunction<T, T | A[number]> {\r\n  return concat(...otherSources);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}