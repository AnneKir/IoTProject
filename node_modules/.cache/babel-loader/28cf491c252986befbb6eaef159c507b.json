{"ast":null,"code":"import { SafeSubscriber, Subscriber } from './Subscriber';\nimport { isSubscription } from './Subscription';\nimport { observable as Symbol_observable } from './symbol/observable';\nimport { pipeFromArray } from './util/pipe';\nimport { config } from './config';\nimport { isFunction } from './util/isFunction';\nimport { errorContext } from './util/errorContext';\nvar Observable = function () {\n  function Observable(subscribe) {\n    if (subscribe) {\n      this._subscribe = subscribe;\n    }\n  }\n  Observable.prototype.lift = function (operator) {\n    var observable = new Observable();\n    observable.source = this;\n    observable.operator = operator;\n    return observable;\n  };\n  Observable.prototype.subscribe = function (observerOrNext, error, complete) {\n    var _this = this;\n    var subscriber = isSubscriber(observerOrNext) ? observerOrNext : new SafeSubscriber(observerOrNext, error, complete);\n    errorContext(function () {\n      var _a = _this,\n        operator = _a.operator,\n        source = _a.source;\n      subscriber.add(operator ? operator.call(subscriber, source) : source ? _this._subscribe(subscriber) : _this._trySubscribe(subscriber));\n    });\n    return subscriber;\n  };\n  Observable.prototype._trySubscribe = function (sink) {\n    try {\n      return this._subscribe(sink);\n    } catch (err) {\n      sink.error(err);\n    }\n  };\n  Observable.prototype.forEach = function (_next, promiseCtor) {\n    var _this = this;\n    promiseCtor = getPromiseCtor(promiseCtor);\n    return new promiseCtor(function (resolve, reject) {\n      var subscriber = new SafeSubscriber({\n        next: function next(value) {\n          try {\n            _next(value);\n          } catch (err) {\n            reject(err);\n            subscriber.unsubscribe();\n          }\n        },\n        error: reject,\n        complete: resolve\n      });\n      _this.subscribe(subscriber);\n    });\n  };\n  Observable.prototype._subscribe = function (subscriber) {\n    var _a;\n    return (_a = this.source) === null || _a === void 0 ? void 0 : _a.subscribe(subscriber);\n  };\n  Observable.prototype[Symbol_observable] = function () {\n    return this;\n  };\n  Observable.prototype.pipe = function () {\n    var operations = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      operations[_i] = arguments[_i];\n    }\n    return pipeFromArray(operations)(this);\n  };\n  Observable.prototype.toPromise = function (promiseCtor) {\n    var _this = this;\n    promiseCtor = getPromiseCtor(promiseCtor);\n    return new promiseCtor(function (resolve, reject) {\n      var value;\n      _this.subscribe(function (x) {\n        return value = x;\n      }, function (err) {\n        return reject(err);\n      }, function () {\n        return resolve(value);\n      });\n    });\n  };\n  Observable.create = function (subscribe) {\n    return new Observable(subscribe);\n  };\n  return Observable;\n}();\nexport { Observable };\nfunction getPromiseCtor(promiseCtor) {\n  var _a;\n  return (_a = promiseCtor !== null && promiseCtor !== void 0 ? promiseCtor : config.Promise) !== null && _a !== void 0 ? _a : Promise;\n}\nfunction isObserver(value) {\n  return value && isFunction(value.next) && isFunction(value.error) && isFunction(value.complete);\n}\nfunction isSubscriber(value) {\n  return value && value instanceof Subscriber || isObserver(value) && isSubscription(value);\n}","map":{"version":3,"mappings":"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","names":["SafeSubscriber","Subscriber","isSubscription","observable","Symbol_observable","pipeFromArray","config","isFunction","errorContext","subscribe","_subscribe","Observable","operator","source","observerOrNext","error","complete","subscriber","isSubscriber","_this","add","call","_trySubscribe","sink","err","next","promiseCtor","getPromiseCtor","resolve","reject","value","unsubscribe","_i","operations","x","Promise","isObserver"],"sources":["C:\\Users\\Amali\\Desktop\\Building_the_IoT_w._P2P_and_Cloud_Computing\\IoTProject\\node_modules\\rxjs\\src\\internal\\Observable.ts"],"sourcesContent":["import { Operator } from './Operator';\r\nimport { SafeSubscriber, Subscriber } from './Subscriber';\r\nimport { isSubscription, Subscription } from './Subscription';\r\nimport { TeardownLogic, OperatorFunction, Subscribable, Observer } from './types';\r\nimport { observable as Symbol_observable } from './symbol/observable';\r\nimport { pipeFromArray } from './util/pipe';\r\nimport { config } from './config';\r\nimport { isFunction } from './util/isFunction';\r\nimport { errorContext } from './util/errorContext';\r\n\r\n/**\r\n * A representation of any set of values over any amount of time. This is the most basic building block\r\n * of RxJS.\r\n *\r\n * @class Observable<T>\r\n */\r\nexport class Observable<T> implements Subscribable<T> {\r\n  /**\r\n   * @deprecated Internal implementation detail, do not use directly. Will be made internal in v8.\r\n   */\r\n  source: Observable<any> | undefined;\r\n\r\n  /**\r\n   * @deprecated Internal implementation detail, do not use directly. Will be made internal in v8.\r\n   */\r\n  operator: Operator<any, T> | undefined;\r\n\r\n  /**\r\n   * @constructor\r\n   * @param {Function} subscribe the function that is called when the Observable is\r\n   * initially subscribed to. This function is given a Subscriber, to which new values\r\n   * can be `next`ed, or an `error` method can be called to raise an error, or\r\n   * `complete` can be called to notify of a successful completion.\r\n   */\r\n  constructor(subscribe?: (this: Observable<T>, subscriber: Subscriber<T>) => TeardownLogic) {\r\n    if (subscribe) {\r\n      this._subscribe = subscribe;\r\n    }\r\n  }\r\n\r\n  // HACK: Since TypeScript inherits static properties too, we have to\r\n  // fight against TypeScript here so Subject can have a different static create signature\r\n  /**\r\n   * Creates a new Observable by calling the Observable constructor\r\n   * @owner Observable\r\n   * @method create\r\n   * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor\r\n   * @return {Observable} a new observable\r\n   * @nocollapse\r\n   * @deprecated Use `new Observable()` instead. Will be removed in v8.\r\n   */\r\n  static create: (...args: any[]) => any = <T>(subscribe?: (subscriber: Subscriber<T>) => TeardownLogic) => {\r\n    return new Observable<T>(subscribe);\r\n  };\r\n\r\n  /**\r\n   * Creates a new Observable, with this Observable instance as the source, and the passed\r\n   * operator defined as the new observable's operator.\r\n   * @method lift\r\n   * @param operator the operator defining the operation to take on the observable\r\n   * @return a new observable with the Operator applied\r\n   * @deprecated Internal implementation detail, do not use directly. Will be made internal in v8.\r\n   * If you have implemented an operator using `lift`, it is recommended that you create an\r\n   * operator by simply returning `new Observable()` directly. See \"Creating new operators from\r\n   * scratch\" section here: https://rxjs.dev/guide/operators\r\n   */\r\n  lift<R>(operator?: Operator<T, R>): Observable<R> {\r\n    const observable = new Observable<R>();\r\n    observable.source = this;\r\n    observable.operator = operator;\r\n    return observable;\r\n  }\r\n\r\n  subscribe(observer?: Partial<Observer<T>>): Subscription;\r\n  subscribe(next: (value: T) => void): Subscription;\r\n  /** @deprecated Instead of passing separate callback arguments, use an observer argument. Signatures taking separate callback arguments will be removed in v8. Details: https://rxjs.dev/deprecations/subscribe-arguments */\r\n  subscribe(next?: ((value: T) => void) | null, error?: ((error: any) => void) | null, complete?: (() => void) | null): Subscription;\r\n  /**\r\n   * Invokes an execution of an Observable and registers Observer handlers for notifications it will emit.\r\n   *\r\n   * <span class=\"informal\">Use it when you have all these Observables, but still nothing is happening.</span>\r\n   *\r\n   * `subscribe` is not a regular operator, but a method that calls Observable's internal `subscribe` function. It\r\n   * might be for example a function that you passed to Observable's constructor, but most of the time it is\r\n   * a library implementation, which defines what will be emitted by an Observable, and when it be will emitted. This means\r\n   * that calling `subscribe` is actually the moment when Observable starts its work, not when it is created, as it is often\r\n   * the thought.\r\n   *\r\n   * Apart from starting the execution of an Observable, this method allows you to listen for values\r\n   * that an Observable emits, as well as for when it completes or errors. You can achieve this in two\r\n   * of the following ways.\r\n   *\r\n   * The first way is creating an object that implements {@link Observer} interface. It should have methods\r\n   * defined by that interface, but note that it should be just a regular JavaScript object, which you can create\r\n   * yourself in any way you want (ES6 class, classic function constructor, object literal etc.). In particular, do\r\n   * not attempt to use any RxJS implementation details to create Observers - you don't need them. Remember also\r\n   * that your object does not have to implement all methods. If you find yourself creating a method that doesn't\r\n   * do anything, you can simply omit it. Note however, if the `error` method is not provided and an error happens,\r\n   * it will be thrown asynchronously. Errors thrown asynchronously cannot be caught using `try`/`catch`. Instead,\r\n   * use the {@link onUnhandledError} configuration option or use a runtime handler (like `window.onerror` or\r\n   * `process.on('error)`) to be notified of unhandled errors. Because of this, it's recommended that you provide\r\n   * an `error` method to avoid missing thrown errors.\r\n   *\r\n   * The second way is to give up on Observer object altogether and simply provide callback functions in place of its methods.\r\n   * This means you can provide three functions as arguments to `subscribe`, where the first function is equivalent\r\n   * of a `next` method, the second of an `error` method and the third of a `complete` method. Just as in case of an Observer,\r\n   * if you do not need to listen for something, you can omit a function by passing `undefined` or `null`,\r\n   * since `subscribe` recognizes these functions by where they were placed in function call. When it comes\r\n   * to the `error` function, as with an Observer, if not provided, errors emitted by an Observable will be thrown asynchronously.\r\n   *\r\n   * You can, however, subscribe with no parameters at all. This may be the case where you're not interested in terminal events\r\n   * and you also handled emissions internally by using operators (e.g. using `tap`).\r\n   *\r\n   * Whichever style of calling `subscribe` you use, in both cases it returns a Subscription object.\r\n   * This object allows you to call `unsubscribe` on it, which in turn will stop the work that an Observable does and will clean\r\n   * up all resources that an Observable used. Note that cancelling a subscription will not call `complete` callback\r\n   * provided to `subscribe` function, which is reserved for a regular completion signal that comes from an Observable.\r\n   *\r\n   * Remember that callbacks provided to `subscribe` are not guaranteed to be called asynchronously.\r\n   * It is an Observable itself that decides when these functions will be called. For example {@link of}\r\n   * by default emits all its values synchronously. Always check documentation for how given Observable\r\n   * will behave when subscribed and if its default behavior can be modified with a `scheduler`.\r\n   *\r\n   * #### Examples\r\n   *\r\n   * Subscribe with an {@link guide/observer Observer}\r\n   *\r\n   * ```ts\r\n   * import { of } from 'rxjs';\r\n   *\r\n   * const sumObserver = {\r\n   *   sum: 0,\r\n   *   next(value) {\r\n   *     console.log('Adding: ' + value);\r\n   *     this.sum = this.sum + value;\r\n   *   },\r\n   *   error() {\r\n   *     // We actually could just remove this method,\r\n   *     // since we do not really care about errors right now.\r\n   *   },\r\n   *   complete() {\r\n   *     console.log('Sum equals: ' + this.sum);\r\n   *   }\r\n   * };\r\n   *\r\n   * of(1, 2, 3) // Synchronously emits 1, 2, 3 and then completes.\r\n   *   .subscribe(sumObserver);\r\n   *\r\n   * // Logs:\r\n   * // 'Adding: 1'\r\n   * // 'Adding: 2'\r\n   * // 'Adding: 3'\r\n   * // 'Sum equals: 6'\r\n   * ```\r\n   *\r\n   * Subscribe with functions ({@link deprecations/subscribe-arguments deprecated})\r\n   *\r\n   * ```ts\r\n   * import { of } from 'rxjs'\r\n   *\r\n   * let sum = 0;\r\n   *\r\n   * of(1, 2, 3).subscribe(\r\n   *   value => {\r\n   *     console.log('Adding: ' + value);\r\n   *     sum = sum + value;\r\n   *   },\r\n   *   undefined,\r\n   *   () => console.log('Sum equals: ' + sum)\r\n   * );\r\n   *\r\n   * // Logs:\r\n   * // 'Adding: 1'\r\n   * // 'Adding: 2'\r\n   * // 'Adding: 3'\r\n   * // 'Sum equals: 6'\r\n   * ```\r\n   *\r\n   * Cancel a subscription\r\n   *\r\n   * ```ts\r\n   * import { interval } from 'rxjs';\r\n   *\r\n   * const subscription = interval(1000).subscribe({\r\n   *   next(num) {\r\n   *     console.log(num)\r\n   *   },\r\n   *   complete() {\r\n   *     // Will not be called, even when cancelling subscription.\r\n   *     console.log('completed!');\r\n   *   }\r\n   * });\r\n   *\r\n   * setTimeout(() => {\r\n   *   subscription.unsubscribe();\r\n   *   console.log('unsubscribed!');\r\n   * }, 2500);\r\n   *\r\n   * // Logs:\r\n   * // 0 after 1s\r\n   * // 1 after 2s\r\n   * // 'unsubscribed!' after 2.5s\r\n   * ```\r\n   *\r\n   * @param {Observer|Function} observerOrNext (optional) Either an observer with methods to be called,\r\n   * or the first of three possible handlers, which is the handler for each value emitted from the subscribed\r\n   * Observable.\r\n   * @param {Function} error (optional) A handler for a terminal event resulting from an error. If no error handler is provided,\r\n   * the error will be thrown asynchronously as unhandled.\r\n   * @param {Function} complete (optional) A handler for a terminal event resulting from successful completion.\r\n   * @return {Subscription} a subscription reference to the registered handlers\r\n   * @method subscribe\r\n   */\r\n  subscribe(\r\n    observerOrNext?: Partial<Observer<T>> | ((value: T) => void) | null,\r\n    error?: ((error: any) => void) | null,\r\n    complete?: (() => void) | null\r\n  ): Subscription {\r\n    const subscriber = isSubscriber(observerOrNext) ? observerOrNext : new SafeSubscriber(observerOrNext, error, complete);\r\n\r\n    errorContext(() => {\r\n      const { operator, source } = this;\r\n      subscriber.add(\r\n        operator\r\n          ? // We're dealing with a subscription in the\r\n            // operator chain to one of our lifted operators.\r\n            operator.call(subscriber, source)\r\n          : source\r\n          ? // If `source` has a value, but `operator` does not, something that\r\n            // had intimate knowledge of our API, like our `Subject`, must have\r\n            // set it. We're going to just call `_subscribe` directly.\r\n            this._subscribe(subscriber)\r\n          : // In all other cases, we're likely wrapping a user-provided initializer\r\n            // function, so we need to catch errors and handle them appropriately.\r\n            this._trySubscribe(subscriber)\r\n      );\r\n    });\r\n\r\n    return subscriber;\r\n  }\r\n\r\n  /** @internal */\r\n  protected _trySubscribe(sink: Subscriber<T>): TeardownLogic {\r\n    try {\r\n      return this._subscribe(sink);\r\n    } catch (err) {\r\n      // We don't need to return anything in this case,\r\n      // because it's just going to try to `add()` to a subscription\r\n      // above.\r\n      sink.error(err);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Used as a NON-CANCELLABLE means of subscribing to an observable, for use with\r\n   * APIs that expect promises, like `async/await`. You cannot unsubscribe from this.\r\n   *\r\n   * **WARNING**: Only use this with observables you *know* will complete. If the source\r\n   * observable does not complete, you will end up with a promise that is hung up, and\r\n   * potentially all of the state of an async function hanging out in memory. To avoid\r\n   * this situation, look into adding something like {@link timeout}, {@link take},\r\n   * {@link takeWhile}, or {@link takeUntil} amongst others.\r\n   *\r\n   * #### Example\r\n   *\r\n   * ```ts\r\n   * import { interval, take } from 'rxjs';\r\n   *\r\n   * const source$ = interval(1000).pipe(take(4));\r\n   *\r\n   * async function getTotal() {\r\n   *   let total = 0;\r\n   *\r\n   *   await source$.forEach(value => {\r\n   *     total += value;\r\n   *     console.log('observable -> ' + value);\r\n   *   });\r\n   *\r\n   *   return total;\r\n   * }\r\n   *\r\n   * getTotal().then(\r\n   *   total => console.log('Total: ' + total)\r\n   * );\r\n   *\r\n   * // Expected:\r\n   * // 'observable -> 0'\r\n   * // 'observable -> 1'\r\n   * // 'observable -> 2'\r\n   * // 'observable -> 3'\r\n   * // 'Total: 6'\r\n   * ```\r\n   *\r\n   * @param next a handler for each value emitted by the observable\r\n   * @return a promise that either resolves on observable completion or\r\n   *  rejects with the handled error\r\n   */\r\n  forEach(next: (value: T) => void): Promise<void>;\r\n\r\n  /**\r\n   * @param next a handler for each value emitted by the observable\r\n   * @param promiseCtor a constructor function used to instantiate the Promise\r\n   * @return a promise that either resolves on observable completion or\r\n   *  rejects with the handled error\r\n   * @deprecated Passing a Promise constructor will no longer be available\r\n   * in upcoming versions of RxJS. This is because it adds weight to the library, for very\r\n   * little benefit. If you need this functionality, it is recommended that you either\r\n   * polyfill Promise, or you create an adapter to convert the returned native promise\r\n   * to whatever promise implementation you wanted. Will be removed in v8.\r\n   */\r\n  forEach(next: (value: T) => void, promiseCtor: PromiseConstructorLike): Promise<void>;\r\n\r\n  forEach(next: (value: T) => void, promiseCtor?: PromiseConstructorLike): Promise<void> {\r\n    promiseCtor = getPromiseCtor(promiseCtor);\r\n\r\n    return new promiseCtor<void>((resolve, reject) => {\r\n      const subscriber = new SafeSubscriber<T>({\r\n        next: (value) => {\r\n          try {\r\n            next(value);\r\n          } catch (err) {\r\n            reject(err);\r\n            subscriber.unsubscribe();\r\n          }\r\n        },\r\n        error: reject,\r\n        complete: resolve,\r\n      });\r\n      this.subscribe(subscriber);\r\n    }) as Promise<void>;\r\n  }\r\n\r\n  /** @internal */\r\n  protected _subscribe(subscriber: Subscriber<any>): TeardownLogic {\r\n    return this.source?.subscribe(subscriber);\r\n  }\r\n\r\n  /**\r\n   * An interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable\r\n   * @method Symbol.observable\r\n   * @return {Observable} this instance of the observable\r\n   */\r\n  [Symbol_observable]() {\r\n    return this;\r\n  }\r\n\r\n  /* tslint:disable:max-line-length */\r\n  pipe(): Observable<T>;\r\n  pipe<A>(op1: OperatorFunction<T, A>): Observable<A>;\r\n  pipe<A, B>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>): Observable<B>;\r\n  pipe<A, B, C>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>): Observable<C>;\r\n  pipe<A, B, C, D>(\r\n    op1: OperatorFunction<T, A>,\r\n    op2: OperatorFunction<A, B>,\r\n    op3: OperatorFunction<B, C>,\r\n    op4: OperatorFunction<C, D>\r\n  ): Observable<D>;\r\n  pipe<A, B, C, D, E>(\r\n    op1: OperatorFunction<T, A>,\r\n    op2: OperatorFunction<A, B>,\r\n    op3: OperatorFunction<B, C>,\r\n    op4: OperatorFunction<C, D>,\r\n    op5: OperatorFunction<D, E>\r\n  ): Observable<E>;\r\n  pipe<A, B, C, D, E, F>(\r\n    op1: OperatorFunction<T, A>,\r\n    op2: OperatorFunction<A, B>,\r\n    op3: OperatorFunction<B, C>,\r\n    op4: OperatorFunction<C, D>,\r\n    op5: OperatorFunction<D, E>,\r\n    op6: OperatorFunction<E, F>\r\n  ): Observable<F>;\r\n  pipe<A, B, C, D, E, F, G>(\r\n    op1: OperatorFunction<T, A>,\r\n    op2: OperatorFunction<A, B>,\r\n    op3: OperatorFunction<B, C>,\r\n    op4: OperatorFunction<C, D>,\r\n    op5: OperatorFunction<D, E>,\r\n    op6: OperatorFunction<E, F>,\r\n    op7: OperatorFunction<F, G>\r\n  ): Observable<G>;\r\n  pipe<A, B, C, D, E, F, G, H>(\r\n    op1: OperatorFunction<T, A>,\r\n    op2: OperatorFunction<A, B>,\r\n    op3: OperatorFunction<B, C>,\r\n    op4: OperatorFunction<C, D>,\r\n    op5: OperatorFunction<D, E>,\r\n    op6: OperatorFunction<E, F>,\r\n    op7: OperatorFunction<F, G>,\r\n    op8: OperatorFunction<G, H>\r\n  ): Observable<H>;\r\n  pipe<A, B, C, D, E, F, G, H, I>(\r\n    op1: OperatorFunction<T, A>,\r\n    op2: OperatorFunction<A, B>,\r\n    op3: OperatorFunction<B, C>,\r\n    op4: OperatorFunction<C, D>,\r\n    op5: OperatorFunction<D, E>,\r\n    op6: OperatorFunction<E, F>,\r\n    op7: OperatorFunction<F, G>,\r\n    op8: OperatorFunction<G, H>,\r\n    op9: OperatorFunction<H, I>\r\n  ): Observable<I>;\r\n  pipe<A, B, C, D, E, F, G, H, I>(\r\n    op1: OperatorFunction<T, A>,\r\n    op2: OperatorFunction<A, B>,\r\n    op3: OperatorFunction<B, C>,\r\n    op4: OperatorFunction<C, D>,\r\n    op5: OperatorFunction<D, E>,\r\n    op6: OperatorFunction<E, F>,\r\n    op7: OperatorFunction<F, G>,\r\n    op8: OperatorFunction<G, H>,\r\n    op9: OperatorFunction<H, I>,\r\n    ...operations: OperatorFunction<any, any>[]\r\n  ): Observable<unknown>;\r\n  /* tslint:enable:max-line-length */\r\n\r\n  /**\r\n   * Used to stitch together functional operators into a chain.\r\n   * @method pipe\r\n   * @return {Observable} the Observable result of all of the operators having\r\n   * been called in the order they were passed in.\r\n   *\r\n   * ## Example\r\n   *\r\n   * ```ts\r\n   * import { interval, filter, map, scan } from 'rxjs';\r\n   *\r\n   * interval(1000)\r\n   *   .pipe(\r\n   *     filter(x => x % 2 === 0),\r\n   *     map(x => x + x),\r\n   *     scan((acc, x) => acc + x)\r\n   *   )\r\n   *   .subscribe(x => console.log(x));\r\n   * ```\r\n   */\r\n  pipe(...operations: OperatorFunction<any, any>[]): Observable<any> {\r\n    return pipeFromArray(operations)(this);\r\n  }\r\n\r\n  /* tslint:disable:max-line-length */\r\n  /** @deprecated Replaced with {@link firstValueFrom} and {@link lastValueFrom}. Will be removed in v8. Details: https://rxjs.dev/deprecations/to-promise */\r\n  toPromise(): Promise<T | undefined>;\r\n  /** @deprecated Replaced with {@link firstValueFrom} and {@link lastValueFrom}. Will be removed in v8. Details: https://rxjs.dev/deprecations/to-promise */\r\n  toPromise(PromiseCtor: typeof Promise): Promise<T | undefined>;\r\n  /** @deprecated Replaced with {@link firstValueFrom} and {@link lastValueFrom}. Will be removed in v8. Details: https://rxjs.dev/deprecations/to-promise */\r\n  toPromise(PromiseCtor: PromiseConstructorLike): Promise<T | undefined>;\r\n  /* tslint:enable:max-line-length */\r\n\r\n  /**\r\n   * Subscribe to this Observable and get a Promise resolving on\r\n   * `complete` with the last emission (if any).\r\n   *\r\n   * **WARNING**: Only use this with observables you *know* will complete. If the source\r\n   * observable does not complete, you will end up with a promise that is hung up, and\r\n   * potentially all of the state of an async function hanging out in memory. To avoid\r\n   * this situation, look into adding something like {@link timeout}, {@link take},\r\n   * {@link takeWhile}, or {@link takeUntil} amongst others.\r\n   *\r\n   * @method toPromise\r\n   * @param [promiseCtor] a constructor function used to instantiate\r\n   * the Promise\r\n   * @return A Promise that resolves with the last value emit, or\r\n   * rejects on an error. If there were no emissions, Promise\r\n   * resolves with undefined.\r\n   * @deprecated Replaced with {@link firstValueFrom} and {@link lastValueFrom}. Will be removed in v8. Details: https://rxjs.dev/deprecations/to-promise\r\n   */\r\n  toPromise(promiseCtor?: PromiseConstructorLike): Promise<T | undefined> {\r\n    promiseCtor = getPromiseCtor(promiseCtor);\r\n\r\n    return new promiseCtor((resolve, reject) => {\r\n      let value: T | undefined;\r\n      this.subscribe(\r\n        (x: T) => (value = x),\r\n        (err: any) => reject(err),\r\n        () => resolve(value)\r\n      );\r\n    }) as Promise<T | undefined>;\r\n  }\r\n}\r\n\r\n/**\r\n * Decides between a passed promise constructor from consuming code,\r\n * A default configured promise constructor, and the native promise\r\n * constructor and returns it. If nothing can be found, it will throw\r\n * an error.\r\n * @param promiseCtor The optional promise constructor to passed by consuming code\r\n */\r\nfunction getPromiseCtor(promiseCtor: PromiseConstructorLike | undefined) {\r\n  return promiseCtor ?? config.Promise ?? Promise;\r\n}\r\n\r\nfunction isObserver<T>(value: any): value is Observer<T> {\r\n  return value && isFunction(value.next) && isFunction(value.error) && isFunction(value.complete);\r\n}\r\n\r\nfunction isSubscriber<T>(value: any): value is Subscriber<T> {\r\n  return (value && value instanceof Subscriber) || (isObserver(value) && isSubscription(value));\r\n}\r\n"]},"metadata":{},"sourceType":"module"}