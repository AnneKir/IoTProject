{"ast":null,"code":"'use strict';\n\nconst MqttClient = require('../client');\nconst Store = require('../store');\nconst url = require('url');\nconst xtend = require('xtend');\nconst debug = require('debug')('mqttjs');\nconst protocols = {};\n\n// eslint-disable-next-line camelcase\nif (typeof process !== 'undefined' && process.title !== 'browser' || typeof __webpack_require__ !== 'function') {\n  protocols.mqtt = require('./tcp');\n  protocols.tcp = require('./tcp');\n  protocols.ssl = require('./tls');\n  protocols.tls = require('./tls');\n  protocols.mqtts = require('./tls');\n} else {\n  protocols.wx = require('./wx');\n  protocols.wxs = require('./wx');\n  protocols.ali = require('./ali');\n  protocols.alis = require('./ali');\n}\nprotocols.ws = require('./ws');\nprotocols.wss = require('./ws');\n\n/**\n * Parse the auth attribute and merge username and password in the options object.\n *\n * @param {Object} [opts] option object\n */\nfunction parseAuthOptions(opts) {\n  let matches;\n  if (opts.auth) {\n    matches = opts.auth.match(/^(.+):(.+)$/);\n    if (matches) {\n      opts.username = matches[1];\n      opts.password = matches[2];\n    } else {\n      opts.username = opts.auth;\n    }\n  }\n}\n\n/**\n * connect - connect to an MQTT broker.\n *\n * @param {String} [brokerUrl] - url of the broker, optional\n * @param {Object} opts - see MqttClient#constructor\n */\nfunction connect(brokerUrl, opts) {\n  debug('connecting to an MQTT broker...');\n  if (typeof brokerUrl === 'object' && !opts) {\n    opts = brokerUrl;\n    brokerUrl = null;\n  }\n  opts = opts || {};\n  if (brokerUrl) {\n    // eslint-disable-next-line\n    const parsed = url.parse(brokerUrl, true);\n    if (parsed.port != null) {\n      parsed.port = Number(parsed.port);\n    }\n    opts = xtend(parsed, opts);\n    if (opts.protocol === null) {\n      throw new Error('Missing protocol');\n    }\n    opts.protocol = opts.protocol.replace(/:$/, '');\n  }\n\n  // merge in the auth options if supplied\n  parseAuthOptions(opts);\n\n  // support clientId passed in the query string of the url\n  if (opts.query && typeof opts.query.clientId === 'string') {\n    opts.clientId = opts.query.clientId;\n  }\n  if (opts.cert && opts.key) {\n    if (opts.protocol) {\n      if (['mqtts', 'wss', 'wxs', 'alis'].indexOf(opts.protocol) === -1) {\n        switch (opts.protocol) {\n          case 'mqtt':\n            opts.protocol = 'mqtts';\n            break;\n          case 'ws':\n            opts.protocol = 'wss';\n            break;\n          case 'wx':\n            opts.protocol = 'wxs';\n            break;\n          case 'ali':\n            opts.protocol = 'alis';\n            break;\n          default:\n            throw new Error('Unknown protocol for secure connection: \"' + opts.protocol + '\"!');\n        }\n      }\n    } else {\n      // A cert and key was provided, however no protocol was specified, so we will throw an error.\n      throw new Error('Missing secure protocol key');\n    }\n  }\n  if (!protocols[opts.protocol]) {\n    const isSecure = ['mqtts', 'wss'].indexOf(opts.protocol) !== -1;\n    opts.protocol = ['mqtt', 'mqtts', 'ws', 'wss', 'wx', 'wxs', 'ali', 'alis'].filter(function (key, index) {\n      if (isSecure && index % 2 === 0) {\n        // Skip insecure protocols when requesting a secure one.\n        return false;\n      }\n      return typeof protocols[key] === 'function';\n    })[0];\n  }\n  if (opts.clean === false && !opts.clientId) {\n    throw new Error('Missing clientId for unclean clients');\n  }\n  if (opts.protocol) {\n    opts.defaultProtocol = opts.protocol;\n  }\n  function wrapper(client) {\n    if (opts.servers) {\n      if (!client._reconnectCount || client._reconnectCount === opts.servers.length) {\n        client._reconnectCount = 0;\n      }\n      opts.host = opts.servers[client._reconnectCount].host;\n      opts.port = opts.servers[client._reconnectCount].port;\n      opts.protocol = !opts.servers[client._reconnectCount].protocol ? opts.defaultProtocol : opts.servers[client._reconnectCount].protocol;\n      opts.hostname = opts.host;\n      client._reconnectCount++;\n    }\n    debug('calling streambuilder for', opts.protocol);\n    return protocols[opts.protocol](client, opts);\n  }\n  const client = new MqttClient(wrapper, opts);\n  client.on('error', function () {/* Automatically set up client error handling */});\n  return client;\n}\nmodule.exports = connect;\nmodule.exports.connect = connect;\nmodule.exports.MqttClient = MqttClient;\nmodule.exports.Store = Store;","map":{"version":3,"names":["MqttClient","require","Store","url","xtend","debug","protocols","process","title","__webpack_require__","mqtt","tcp","ssl","tls","mqtts","wx","wxs","ali","alis","ws","wss","parseAuthOptions","opts","matches","auth","match","username","password","connect","brokerUrl","parsed","parse","port","Number","protocol","Error","replace","query","clientId","cert","key","indexOf","isSecure","filter","index","clean","defaultProtocol","wrapper","client","servers","_reconnectCount","length","host","hostname","on","module","exports"],"sources":["C:/Users/Amali/Desktop/Building_the_IoT_w._P2P_and_Cloud_Computing/IoTProject/node_modules/mqtt/lib/connect/index.js"],"sourcesContent":["'use strict'\n\nconst MqttClient = require('../client')\nconst Store = require('../store')\nconst url = require('url')\nconst xtend = require('xtend')\nconst debug = require('debug')('mqttjs')\n\nconst protocols = {}\n\n// eslint-disable-next-line camelcase\nif ((typeof process !== 'undefined' && process.title !== 'browser') || typeof __webpack_require__ !== 'function') {\n  protocols.mqtt = require('./tcp')\n  protocols.tcp = require('./tcp')\n  protocols.ssl = require('./tls')\n  protocols.tls = require('./tls')\n  protocols.mqtts = require('./tls')\n} else {\n  protocols.wx = require('./wx')\n  protocols.wxs = require('./wx')\n\n  protocols.ali = require('./ali')\n  protocols.alis = require('./ali')\n}\n\nprotocols.ws = require('./ws')\nprotocols.wss = require('./ws')\n\n/**\n * Parse the auth attribute and merge username and password in the options object.\n *\n * @param {Object} [opts] option object\n */\nfunction parseAuthOptions (opts) {\n  let matches\n  if (opts.auth) {\n    matches = opts.auth.match(/^(.+):(.+)$/)\n    if (matches) {\n      opts.username = matches[1]\n      opts.password = matches[2]\n    } else {\n      opts.username = opts.auth\n    }\n  }\n}\n\n/**\n * connect - connect to an MQTT broker.\n *\n * @param {String} [brokerUrl] - url of the broker, optional\n * @param {Object} opts - see MqttClient#constructor\n */\nfunction connect (brokerUrl, opts) {\n  debug('connecting to an MQTT broker...')\n  if ((typeof brokerUrl === 'object') && !opts) {\n    opts = brokerUrl\n    brokerUrl = null\n  }\n\n  opts = opts || {}\n\n  if (brokerUrl) {\n    // eslint-disable-next-line\n    const parsed = url.parse(brokerUrl, true)\n    if (parsed.port != null) {\n      parsed.port = Number(parsed.port)\n    }\n\n    opts = xtend(parsed, opts)\n\n    if (opts.protocol === null) {\n      throw new Error('Missing protocol')\n    }\n\n    opts.protocol = opts.protocol.replace(/:$/, '')\n  }\n\n  // merge in the auth options if supplied\n  parseAuthOptions(opts)\n\n  // support clientId passed in the query string of the url\n  if (opts.query && typeof opts.query.clientId === 'string') {\n    opts.clientId = opts.query.clientId\n  }\n\n  if (opts.cert && opts.key) {\n    if (opts.protocol) {\n      if (['mqtts', 'wss', 'wxs', 'alis'].indexOf(opts.protocol) === -1) {\n        switch (opts.protocol) {\n          case 'mqtt':\n            opts.protocol = 'mqtts'\n            break\n          case 'ws':\n            opts.protocol = 'wss'\n            break\n          case 'wx':\n            opts.protocol = 'wxs'\n            break\n          case 'ali':\n            opts.protocol = 'alis'\n            break\n          default:\n            throw new Error('Unknown protocol for secure connection: \"' + opts.protocol + '\"!')\n        }\n      }\n    } else {\n      // A cert and key was provided, however no protocol was specified, so we will throw an error.\n      throw new Error('Missing secure protocol key')\n    }\n  }\n\n  if (!protocols[opts.protocol]) {\n    const isSecure = ['mqtts', 'wss'].indexOf(opts.protocol) !== -1\n    opts.protocol = [\n      'mqtt',\n      'mqtts',\n      'ws',\n      'wss',\n      'wx',\n      'wxs',\n      'ali',\n      'alis'\n    ].filter(function (key, index) {\n      if (isSecure && index % 2 === 0) {\n        // Skip insecure protocols when requesting a secure one.\n        return false\n      }\n      return (typeof protocols[key] === 'function')\n    })[0]\n  }\n\n  if (opts.clean === false && !opts.clientId) {\n    throw new Error('Missing clientId for unclean clients')\n  }\n\n  if (opts.protocol) {\n    opts.defaultProtocol = opts.protocol\n  }\n\n  function wrapper (client) {\n    if (opts.servers) {\n      if (!client._reconnectCount || client._reconnectCount === opts.servers.length) {\n        client._reconnectCount = 0\n      }\n\n      opts.host = opts.servers[client._reconnectCount].host\n      opts.port = opts.servers[client._reconnectCount].port\n      opts.protocol = (!opts.servers[client._reconnectCount].protocol ? opts.defaultProtocol : opts.servers[client._reconnectCount].protocol)\n      opts.hostname = opts.host\n\n      client._reconnectCount++\n    }\n\n    debug('calling streambuilder for', opts.protocol)\n    return protocols[opts.protocol](client, opts)\n  }\n  const client = new MqttClient(wrapper, opts)\n  client.on('error', function () { /* Automatically set up client error handling */ })\n  return client\n}\n\nmodule.exports = connect\nmodule.exports.connect = connect\nmodule.exports.MqttClient = MqttClient\nmodule.exports.Store = Store\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}