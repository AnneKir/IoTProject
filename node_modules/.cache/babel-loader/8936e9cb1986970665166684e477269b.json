{"ast":null,"code":"var Buffer = require('safe-buffer').Buffer;\nvar xor = require('buffer-xor');\nfunction encryptStart(self, data, decrypt) {\n  var len = data.length;\n  var out = xor(data, self._cache);\n  self._cache = self._cache.slice(len);\n  self._prev = Buffer.concat([self._prev, decrypt ? data : out]);\n  return out;\n}\nexports.encrypt = function (self, data, decrypt) {\n  var out = Buffer.allocUnsafe(0);\n  var len;\n  while (data.length) {\n    if (self._cache.length === 0) {\n      self._cache = self._cipher.encryptBlock(self._prev);\n      self._prev = Buffer.allocUnsafe(0);\n    }\n    if (self._cache.length <= data.length) {\n      len = self._cache.length;\n      out = Buffer.concat([out, encryptStart(self, data.slice(0, len), decrypt)]);\n      data = data.slice(len);\n    } else {\n      out = Buffer.concat([out, encryptStart(self, data, decrypt)]);\n      break;\n    }\n  }\n  return out;\n};","map":{"version":3,"names":["Buffer","require","xor","encryptStart","self","data","decrypt","len","length","out","_cache","slice","_prev","concat","exports","encrypt","allocUnsafe","_cipher","encryptBlock"],"sources":["C:/Users/Amali/Desktop/Building_the_IoT_w._P2P_and_Cloud_Computing/IoTProject/node_modules/browserify-aes/modes/cfb.js"],"sourcesContent":["var Buffer = require('safe-buffer').Buffer\r\nvar xor = require('buffer-xor')\r\n\r\nfunction encryptStart (self, data, decrypt) {\r\n  var len = data.length\r\n  var out = xor(data, self._cache)\r\n  self._cache = self._cache.slice(len)\r\n  self._prev = Buffer.concat([self._prev, decrypt ? data : out])\r\n  return out\r\n}\r\n\r\nexports.encrypt = function (self, data, decrypt) {\r\n  var out = Buffer.allocUnsafe(0)\r\n  var len\r\n\r\n  while (data.length) {\r\n    if (self._cache.length === 0) {\r\n      self._cache = self._cipher.encryptBlock(self._prev)\r\n      self._prev = Buffer.allocUnsafe(0)\r\n    }\r\n\r\n    if (self._cache.length <= data.length) {\r\n      len = self._cache.length\r\n      out = Buffer.concat([out, encryptStart(self, data.slice(0, len), decrypt)])\r\n      data = data.slice(len)\r\n    } else {\r\n      out = Buffer.concat([out, encryptStart(self, data, decrypt)])\r\n      break\r\n    }\r\n  }\r\n\r\n  return out\r\n}\r\n"],"mappings":"AAAA,IAAIA,MAAM,GAAGC,OAAO,CAAC,aAAa,CAAC,CAACD,MAAM;AAC1C,IAAIE,GAAG,GAAGD,OAAO,CAAC,YAAY,CAAC;AAE/B,SAASE,YAAY,CAAEC,IAAI,EAAEC,IAAI,EAAEC,OAAO,EAAE;EAC1C,IAAIC,GAAG,GAAGF,IAAI,CAACG,MAAM;EACrB,IAAIC,GAAG,GAAGP,GAAG,CAACG,IAAI,EAAED,IAAI,CAACM,MAAM,CAAC;EAChCN,IAAI,CAACM,MAAM,GAAGN,IAAI,CAACM,MAAM,CAACC,KAAK,CAACJ,GAAG,CAAC;EACpCH,IAAI,CAACQ,KAAK,GAAGZ,MAAM,CAACa,MAAM,CAAC,CAACT,IAAI,CAACQ,KAAK,EAAEN,OAAO,GAAGD,IAAI,GAAGI,GAAG,CAAC,CAAC;EAC9D,OAAOA,GAAG;AACZ;AAEAK,OAAO,CAACC,OAAO,GAAG,UAAUX,IAAI,EAAEC,IAAI,EAAEC,OAAO,EAAE;EAC/C,IAAIG,GAAG,GAAGT,MAAM,CAACgB,WAAW,CAAC,CAAC,CAAC;EAC/B,IAAIT,GAAG;EAEP,OAAOF,IAAI,CAACG,MAAM,EAAE;IAClB,IAAIJ,IAAI,CAACM,MAAM,CAACF,MAAM,KAAK,CAAC,EAAE;MAC5BJ,IAAI,CAACM,MAAM,GAAGN,IAAI,CAACa,OAAO,CAACC,YAAY,CAACd,IAAI,CAACQ,KAAK,CAAC;MACnDR,IAAI,CAACQ,KAAK,GAAGZ,MAAM,CAACgB,WAAW,CAAC,CAAC,CAAC;IACpC;IAEA,IAAIZ,IAAI,CAACM,MAAM,CAACF,MAAM,IAAIH,IAAI,CAACG,MAAM,EAAE;MACrCD,GAAG,GAAGH,IAAI,CAACM,MAAM,CAACF,MAAM;MACxBC,GAAG,GAAGT,MAAM,CAACa,MAAM,CAAC,CAACJ,GAAG,EAAEN,YAAY,CAACC,IAAI,EAAEC,IAAI,CAACM,KAAK,CAAC,CAAC,EAAEJ,GAAG,CAAC,EAAED,OAAO,CAAC,CAAC,CAAC;MAC3ED,IAAI,GAAGA,IAAI,CAACM,KAAK,CAACJ,GAAG,CAAC;IACxB,CAAC,MAAM;MACLE,GAAG,GAAGT,MAAM,CAACa,MAAM,CAAC,CAACJ,GAAG,EAAEN,YAAY,CAACC,IAAI,EAAEC,IAAI,EAAEC,OAAO,CAAC,CAAC,CAAC;MAC7D;IACF;EACF;EAEA,OAAOG,GAAG;AACZ,CAAC"},"metadata":{},"sourceType":"script"}