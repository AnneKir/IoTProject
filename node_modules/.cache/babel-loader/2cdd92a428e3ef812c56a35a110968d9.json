{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nimport TreeNode from './TreeNode';\nimport { Container } from \"../../ContainerBase/index\";\nimport { checkWithinAccessParams } from \"../../../utils/checkParams\";\nvar TreeContainer = /** @class */function (_super) {\n  __extends(TreeContainer, _super);\n  function TreeContainer(cmp) {\n    if (cmp === void 0) {\n      cmp = function (x, y) {\n        if (x < y) return -1;\n        if (x > y) return 1;\n        return 0;\n      };\n    }\n    var _this = _super.call(this) || this;\n    _this.root = undefined;\n    _this.header = new TreeNode();\n    /**\n     * @description InOrder traversal the tree.\n     * @protected\n     */\n    _this.inOrderTraversal = function (curNode, callback) {\n      if (curNode === undefined) return false;\n      var ifReturn = _this.inOrderTraversal(curNode.left, callback);\n      if (ifReturn) return true;\n      if (callback(curNode)) return true;\n      return _this.inOrderTraversal(curNode.right, callback);\n    };\n    _this.cmp = cmp;\n    return _this;\n  }\n  /**\n   * @param curNode The starting node of the search.\n   * @param key The key you want to search.\n   * @return TreeNode which key is greater than or equals to the given key.\n   * @protected\n   */\n  TreeContainer.prototype._lowerBound = function (curNode, key) {\n    var resNode;\n    while (curNode) {\n      var cmpResult = this.cmp(curNode.key, key);\n      if (cmpResult < 0) {\n        curNode = curNode.right;\n      } else if (cmpResult > 0) {\n        resNode = curNode;\n        curNode = curNode.left;\n      } else return curNode;\n    }\n    return resNode === undefined ? this.header : resNode;\n  };\n  /**\n   * @param curNode The starting node of the search.\n   * @param key The key you want to search.\n   * @return TreeNode which key is greater than the given key.\n   * @protected\n   */\n  TreeContainer.prototype._upperBound = function (curNode, key) {\n    var resNode;\n    while (curNode) {\n      var cmpResult = this.cmp(curNode.key, key);\n      if (cmpResult <= 0) {\n        curNode = curNode.right;\n      } else if (cmpResult > 0) {\n        resNode = curNode;\n        curNode = curNode.left;\n      }\n    }\n    return resNode === undefined ? this.header : resNode;\n  };\n  /**\n   * @param curNode The starting node of the search.\n   * @param key The key you want to search.\n   * @return TreeNode which key is less than or equals to the given key.\n   * @protected\n   */\n  TreeContainer.prototype._reverseLowerBound = function (curNode, key) {\n    var resNode;\n    while (curNode) {\n      var cmpResult = this.cmp(curNode.key, key);\n      if (cmpResult < 0) {\n        resNode = curNode;\n        curNode = curNode.right;\n      } else if (cmpResult > 0) {\n        curNode = curNode.left;\n      } else return curNode;\n    }\n    return resNode === undefined ? this.header : resNode;\n  };\n  /**\n   * @param curNode The starting node of the search.\n   * @param key The key you want to search.\n   * @return TreeNode which key is less than the given key.\n   * @protected\n   */\n  TreeContainer.prototype._reverseUpperBound = function (curNode, key) {\n    var resNode;\n    while (curNode) {\n      var cmpResult = this.cmp(curNode.key, key);\n      if (cmpResult < 0) {\n        resNode = curNode;\n        curNode = curNode.right;\n      } else if (cmpResult >= 0) {\n        curNode = curNode.left;\n      }\n    }\n    return resNode === undefined ? this.header : resNode;\n  };\n  /**\n   * @description Make self balance after erase a node.\n   * @param curNode The node want to remove.\n   * @protected\n   */\n  TreeContainer.prototype.eraseNodeSelfBalance = function (curNode) {\n    while (true) {\n      var parentNode = curNode.parent;\n      if (parentNode === this.header) return;\n      if (curNode.color === TreeNode.RED) {\n        curNode.color = TreeNode.BLACK;\n        return;\n      }\n      if (curNode === parentNode.left) {\n        var brother = parentNode.right;\n        if (brother.color === TreeNode.RED) {\n          brother.color = TreeNode.BLACK;\n          parentNode.color = TreeNode.RED;\n          if (parentNode === this.root) {\n            this.root = parentNode.rotateLeft();\n          } else parentNode.rotateLeft();\n        } else if (brother.color === TreeNode.BLACK) {\n          if (brother.right && brother.right.color === TreeNode.RED) {\n            brother.color = parentNode.color;\n            parentNode.color = TreeNode.BLACK;\n            brother.right.color = TreeNode.BLACK;\n            if (parentNode === this.root) {\n              this.root = parentNode.rotateLeft();\n            } else parentNode.rotateLeft();\n            return;\n          } else if (brother.left && brother.left.color === TreeNode.RED) {\n            brother.color = TreeNode.RED;\n            brother.left.color = TreeNode.BLACK;\n            brother.rotateRight();\n          } else {\n            brother.color = TreeNode.RED;\n            curNode = parentNode;\n          }\n        }\n      } else {\n        var brother = parentNode.left;\n        if (brother.color === TreeNode.RED) {\n          brother.color = TreeNode.BLACK;\n          parentNode.color = TreeNode.RED;\n          if (parentNode === this.root) {\n            this.root = parentNode.rotateRight();\n          } else parentNode.rotateRight();\n        } else {\n          if (brother.left && brother.left.color === TreeNode.RED) {\n            brother.color = parentNode.color;\n            parentNode.color = TreeNode.BLACK;\n            brother.left.color = TreeNode.BLACK;\n            if (parentNode === this.root) {\n              this.root = parentNode.rotateRight();\n            } else parentNode.rotateRight();\n            return;\n          } else if (brother.right && brother.right.color === TreeNode.RED) {\n            brother.color = TreeNode.RED;\n            brother.right.color = TreeNode.BLACK;\n            brother.rotateLeft();\n          } else {\n            brother.color = TreeNode.RED;\n            curNode = parentNode;\n          }\n        }\n      }\n    }\n  };\n  /**\n   * @description Remove a node.\n   * @param curNode The node you want to remove.\n   * @protected\n   */\n  TreeContainer.prototype.eraseNode = function (curNode) {\n    var _a, _b;\n    if (this.length === 1) {\n      this.clear();\n      return;\n    }\n    var swapNode = curNode;\n    while (swapNode.left || swapNode.right) {\n      if (swapNode.right) {\n        swapNode = swapNode.right;\n        while (swapNode.left) swapNode = swapNode.left;\n      } else if (swapNode.left) {\n        swapNode = swapNode.left;\n      }\n      _a = __read([swapNode.key, curNode.key], 2), curNode.key = _a[0], swapNode.key = _a[1];\n      _b = __read([swapNode.value, curNode.value], 2), curNode.value = _b[0], swapNode.value = _b[1];\n      curNode = swapNode;\n    }\n    if (this.header.left === swapNode) {\n      this.header.left = swapNode.parent;\n    } else if (this.header.right === swapNode) {\n      this.header.right = swapNode.parent;\n    }\n    this.eraseNodeSelfBalance(swapNode);\n    swapNode.remove();\n    this.length -= 1;\n    this.root.color = TreeNode.BLACK;\n  };\n  /**\n   * @description Make self balance after insert a node.\n   * @param curNode The node want to insert.\n   * @protected\n   */\n  TreeContainer.prototype.insertNodeSelfBalance = function (curNode) {\n    while (true) {\n      var parentNode = curNode.parent;\n      if (parentNode.color === TreeNode.BLACK) return;\n      var grandParent = parentNode.parent;\n      if (parentNode === grandParent.left) {\n        var uncle = grandParent.right;\n        if (uncle && uncle.color === TreeNode.RED) {\n          uncle.color = parentNode.color = TreeNode.BLACK;\n          if (grandParent === this.root) return;\n          grandParent.color = TreeNode.RED;\n          curNode = grandParent;\n          continue;\n        } else if (curNode === parentNode.right) {\n          curNode.color = TreeNode.BLACK;\n          if (curNode.left) curNode.left.parent = parentNode;\n          if (curNode.right) curNode.right.parent = grandParent;\n          parentNode.right = curNode.left;\n          grandParent.left = curNode.right;\n          curNode.left = parentNode;\n          curNode.right = grandParent;\n          if (grandParent === this.root) {\n            this.root = curNode;\n            this.header.parent = curNode;\n          } else {\n            var GP = grandParent.parent;\n            if (GP.left === grandParent) {\n              GP.left = curNode;\n            } else GP.right = curNode;\n          }\n          curNode.parent = grandParent.parent;\n          parentNode.parent = curNode;\n          grandParent.parent = curNode;\n        } else {\n          parentNode.color = TreeNode.BLACK;\n          if (grandParent === this.root) {\n            this.root = grandParent.rotateRight();\n          } else grandParent.rotateRight();\n        }\n        grandParent.color = TreeNode.RED;\n      } else {\n        var uncle = grandParent.left;\n        if (uncle && uncle.color === TreeNode.RED) {\n          uncle.color = parentNode.color = TreeNode.BLACK;\n          if (grandParent === this.root) return;\n          grandParent.color = TreeNode.RED;\n          curNode = grandParent;\n          continue;\n        } else if (curNode === parentNode.left) {\n          curNode.color = TreeNode.BLACK;\n          if (curNode.left) curNode.left.parent = grandParent;\n          if (curNode.right) curNode.right.parent = parentNode;\n          grandParent.right = curNode.left;\n          parentNode.left = curNode.right;\n          curNode.left = grandParent;\n          curNode.right = parentNode;\n          if (grandParent === this.root) {\n            this.root = curNode;\n            this.header.parent = curNode;\n          } else {\n            var GP = grandParent.parent;\n            if (GP.left === grandParent) {\n              GP.left = curNode;\n            } else GP.right = curNode;\n          }\n          curNode.parent = grandParent.parent;\n          parentNode.parent = curNode;\n          grandParent.parent = curNode;\n        } else {\n          parentNode.color = TreeNode.BLACK;\n          if (grandParent === this.root) {\n            this.root = grandParent.rotateLeft();\n          } else grandParent.rotateLeft();\n        }\n        grandParent.color = TreeNode.RED;\n      }\n      return;\n    }\n  };\n  /**\n   * @description Find node which key is equals to the given key.\n   * @param curNode The starting node of the search.\n   * @param key The key you want to search.\n   * @protected\n   */\n  TreeContainer.prototype.findElementNode = function (curNode, key) {\n    while (curNode) {\n      var cmpResult = this.cmp(curNode.key, key);\n      if (cmpResult < 0) {\n        curNode = curNode.right;\n      } else if (cmpResult > 0) {\n        curNode = curNode.left;\n      } else return curNode;\n    }\n    return curNode;\n  };\n  /**\n   * @description Insert a key-value pair or set value by the given key.\n   * @param key The key want to insert.\n   * @param value The value want to set.\n   * @param hint You can give an iterator hint to improve insertion efficiency.\n   * @protected\n   */\n  TreeContainer.prototype.set = function (key, value, hint) {\n    if (this.root === undefined) {\n      this.length += 1;\n      this.root = new TreeNode(key, value);\n      this.root.color = TreeNode.BLACK;\n      this.root.parent = this.header;\n      this.header.parent = this.root;\n      this.header.left = this.root;\n      this.header.right = this.root;\n      return;\n    }\n    var curNode;\n    var minNode = this.header.left;\n    var compareToMin = this.cmp(minNode.key, key);\n    if (compareToMin === 0) {\n      minNode.value = value;\n      return;\n    } else if (compareToMin > 0) {\n      minNode.left = new TreeNode(key, value);\n      minNode.left.parent = minNode;\n      curNode = minNode.left;\n      this.header.left = curNode;\n    } else {\n      var maxNode = this.header.right;\n      var compareToMax = this.cmp(maxNode.key, key);\n      if (compareToMax === 0) {\n        maxNode.value = value;\n        return;\n      } else if (compareToMax < 0) {\n        maxNode.right = new TreeNode(key, value);\n        maxNode.right.parent = maxNode;\n        curNode = maxNode.right;\n        this.header.right = curNode;\n      } else {\n        if (hint !== undefined) {\n          // @ts-ignore\n          var iterNode = hint.node;\n          if (iterNode !== this.header) {\n            var iterCmpRes = this.cmp(iterNode.key, key);\n            if (iterCmpRes === 0) {\n              iterNode.value = value;\n              return;\n            } else if (iterCmpRes > 0) {\n              var preNode = iterNode.pre();\n              var preCmpRes = this.cmp(preNode.key, key);\n              if (preCmpRes === 0) {\n                preNode.value = value;\n                return;\n              } else if (preCmpRes < 0) {\n                curNode = new TreeNode(key, value);\n                if (preNode.right === undefined) {\n                  preNode.right = curNode;\n                  curNode.parent = preNode;\n                } else {\n                  iterNode.left = curNode;\n                  curNode.parent = iterNode;\n                }\n              }\n            }\n          }\n        }\n        if (curNode === undefined) {\n          curNode = this.root;\n          while (true) {\n            var cmpResult = this.cmp(curNode.key, key);\n            if (cmpResult > 0) {\n              if (curNode.left === undefined) {\n                curNode.left = new TreeNode(key, value);\n                curNode.left.parent = curNode;\n                curNode = curNode.left;\n                break;\n              }\n              curNode = curNode.left;\n            } else if (cmpResult < 0) {\n              if (curNode.right === undefined) {\n                curNode.right = new TreeNode(key, value);\n                curNode.right.parent = curNode;\n                curNode = curNode.right;\n                break;\n              }\n              curNode = curNode.right;\n            } else {\n              curNode.value = value;\n              return;\n            }\n          }\n        }\n      }\n    }\n    this.length += 1;\n    this.insertNodeSelfBalance(curNode);\n  };\n  TreeContainer.prototype.clear = function () {\n    this.length = 0;\n    this.root = undefined;\n    this.header.parent = undefined;\n    this.header.left = this.header.right = undefined;\n  };\n  /**\n   * @description Update node's key by iterator.\n   * @param iter The iterator you want to change.\n   * @param key The key you want to update.\n   * @return Boolean about if the modification is successful.\n   */\n  TreeContainer.prototype.updateKeyByIterator = function (iter, key) {\n    // @ts-ignore\n    var node = iter.node;\n    if (node === this.header) {\n      throw new TypeError('Invalid iterator!');\n    }\n    if (this.length === 1) {\n      node.key = key;\n      return true;\n    }\n    if (node === this.header.left) {\n      if (this.cmp(node.next().key, key) > 0) {\n        node.key = key;\n        return true;\n      }\n      return false;\n    }\n    if (node === this.header.right) {\n      if (this.cmp(node.pre().key, key) < 0) {\n        node.key = key;\n        return true;\n      }\n      return false;\n    }\n    var preKey = node.pre().key;\n    if (this.cmp(preKey, key) >= 0) return false;\n    var nextKey = node.next().key;\n    if (this.cmp(nextKey, key) <= 0) return false;\n    node.key = key;\n    return true;\n  };\n  TreeContainer.prototype.eraseElementByPos = function (pos) {\n    var _this = this;\n    checkWithinAccessParams(pos, 0, this.length - 1);\n    var index = 0;\n    this.inOrderTraversal(this.root, function (curNode) {\n      if (pos === index) {\n        _this.eraseNode(curNode);\n        return true;\n      }\n      index += 1;\n      return false;\n    });\n  };\n  /**\n   * @description Remove the element of the specified key.\n   * @param key The key you want to remove.\n   */\n  TreeContainer.prototype.eraseElementByKey = function (key) {\n    if (!this.length) return;\n    var curNode = this.findElementNode(this.root, key);\n    if (curNode === undefined) return;\n    this.eraseNode(curNode);\n  };\n  TreeContainer.prototype.eraseElementByIterator = function (iter) {\n    // @ts-ignore\n    var node = iter.node;\n    if (node === this.header) {\n      throw new RangeError('Invalid iterator');\n    }\n    if (node.right === undefined) {\n      iter = iter.next();\n    }\n    this.eraseNode(node);\n    return iter;\n  };\n  /**\n   * @description Get the height of the tree.\n   * @return Number about the height of the RB-tree.\n   */\n  TreeContainer.prototype.getHeight = function () {\n    if (!this.length) return 0;\n    var traversal = function (curNode) {\n      if (!curNode) return 0;\n      return Math.max(traversal(curNode.left), traversal(curNode.right)) + 1;\n    };\n    return traversal(this.root);\n  };\n  return TreeContainer;\n}(Container);\nexport default TreeContainer;","map":{"version":3,"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","prototype","hasOwnProperty","call","TypeError","String","__","constructor","create","__read","o","n","m","Symbol","iterator","i","r","ar","e","next","done","push","value","error","TreeNode","Container","checkWithinAccessParams","TreeContainer","_super","cmp","x","y","_this","root","undefined","header","inOrderTraversal","curNode","callback","ifReturn","left","right","_lowerBound","key","resNode","cmpResult","_upperBound","_reverseLowerBound","_reverseUpperBound","eraseNodeSelfBalance","parentNode","parent","color","RED","BLACK","brother","rotateLeft","rotateRight","eraseNode","_a","_b","length","clear","swapNode","remove","insertNodeSelfBalance","grandParent","uncle","GP","findElementNode","set","hint","minNode","compareToMin","maxNode","compareToMax","iterNode","node","iterCmpRes","preNode","pre","preCmpRes","updateKeyByIterator","iter","preKey","nextKey","eraseElementByPos","pos","index","eraseElementByKey","eraseElementByIterator","RangeError","getHeight","traversal","Math","max"],"sources":["C:/Users/Amali/Desktop/Building_the_IoT_w._P2P_and_Cloud_Computing/IoTProject/node_modules/js-sdsl/dist/esm/container/TreeContainer/Base/index.js"],"sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nimport TreeNode from './TreeNode';\nimport { Container } from \"../../ContainerBase/index\";\nimport { checkWithinAccessParams } from \"../../../utils/checkParams\";\nvar TreeContainer = /** @class */ (function (_super) {\n    __extends(TreeContainer, _super);\n    function TreeContainer(cmp) {\n        if (cmp === void 0) { cmp = function (x, y) {\n            if (x < y)\n                return -1;\n            if (x > y)\n                return 1;\n            return 0;\n        }; }\n        var _this = _super.call(this) || this;\n        _this.root = undefined;\n        _this.header = new TreeNode();\n        /**\n         * @description InOrder traversal the tree.\n         * @protected\n         */\n        _this.inOrderTraversal = function (curNode, callback) {\n            if (curNode === undefined)\n                return false;\n            var ifReturn = _this.inOrderTraversal(curNode.left, callback);\n            if (ifReturn)\n                return true;\n            if (callback(curNode))\n                return true;\n            return _this.inOrderTraversal(curNode.right, callback);\n        };\n        _this.cmp = cmp;\n        return _this;\n    }\n    /**\n     * @param curNode The starting node of the search.\n     * @param key The key you want to search.\n     * @return TreeNode which key is greater than or equals to the given key.\n     * @protected\n     */\n    TreeContainer.prototype._lowerBound = function (curNode, key) {\n        var resNode;\n        while (curNode) {\n            var cmpResult = this.cmp(curNode.key, key);\n            if (cmpResult < 0) {\n                curNode = curNode.right;\n            }\n            else if (cmpResult > 0) {\n                resNode = curNode;\n                curNode = curNode.left;\n            }\n            else\n                return curNode;\n        }\n        return resNode === undefined ? this.header : resNode;\n    };\n    /**\n     * @param curNode The starting node of the search.\n     * @param key The key you want to search.\n     * @return TreeNode which key is greater than the given key.\n     * @protected\n     */\n    TreeContainer.prototype._upperBound = function (curNode, key) {\n        var resNode;\n        while (curNode) {\n            var cmpResult = this.cmp(curNode.key, key);\n            if (cmpResult <= 0) {\n                curNode = curNode.right;\n            }\n            else if (cmpResult > 0) {\n                resNode = curNode;\n                curNode = curNode.left;\n            }\n        }\n        return resNode === undefined ? this.header : resNode;\n    };\n    /**\n     * @param curNode The starting node of the search.\n     * @param key The key you want to search.\n     * @return TreeNode which key is less than or equals to the given key.\n     * @protected\n     */\n    TreeContainer.prototype._reverseLowerBound = function (curNode, key) {\n        var resNode;\n        while (curNode) {\n            var cmpResult = this.cmp(curNode.key, key);\n            if (cmpResult < 0) {\n                resNode = curNode;\n                curNode = curNode.right;\n            }\n            else if (cmpResult > 0) {\n                curNode = curNode.left;\n            }\n            else\n                return curNode;\n        }\n        return resNode === undefined ? this.header : resNode;\n    };\n    /**\n     * @param curNode The starting node of the search.\n     * @param key The key you want to search.\n     * @return TreeNode which key is less than the given key.\n     * @protected\n     */\n    TreeContainer.prototype._reverseUpperBound = function (curNode, key) {\n        var resNode;\n        while (curNode) {\n            var cmpResult = this.cmp(curNode.key, key);\n            if (cmpResult < 0) {\n                resNode = curNode;\n                curNode = curNode.right;\n            }\n            else if (cmpResult >= 0) {\n                curNode = curNode.left;\n            }\n        }\n        return resNode === undefined ? this.header : resNode;\n    };\n    /**\n     * @description Make self balance after erase a node.\n     * @param curNode The node want to remove.\n     * @protected\n     */\n    TreeContainer.prototype.eraseNodeSelfBalance = function (curNode) {\n        while (true) {\n            var parentNode = curNode.parent;\n            if (parentNode === this.header)\n                return;\n            if (curNode.color === TreeNode.RED) {\n                curNode.color = TreeNode.BLACK;\n                return;\n            }\n            if (curNode === parentNode.left) {\n                var brother = parentNode.right;\n                if (brother.color === TreeNode.RED) {\n                    brother.color = TreeNode.BLACK;\n                    parentNode.color = TreeNode.RED;\n                    if (parentNode === this.root) {\n                        this.root = parentNode.rotateLeft();\n                    }\n                    else\n                        parentNode.rotateLeft();\n                }\n                else if (brother.color === TreeNode.BLACK) {\n                    if (brother.right && brother.right.color === TreeNode.RED) {\n                        brother.color = parentNode.color;\n                        parentNode.color = TreeNode.BLACK;\n                        brother.right.color = TreeNode.BLACK;\n                        if (parentNode === this.root) {\n                            this.root = parentNode.rotateLeft();\n                        }\n                        else\n                            parentNode.rotateLeft();\n                        return;\n                    }\n                    else if (brother.left && brother.left.color === TreeNode.RED) {\n                        brother.color = TreeNode.RED;\n                        brother.left.color = TreeNode.BLACK;\n                        brother.rotateRight();\n                    }\n                    else {\n                        brother.color = TreeNode.RED;\n                        curNode = parentNode;\n                    }\n                }\n            }\n            else {\n                var brother = parentNode.left;\n                if (brother.color === TreeNode.RED) {\n                    brother.color = TreeNode.BLACK;\n                    parentNode.color = TreeNode.RED;\n                    if (parentNode === this.root) {\n                        this.root = parentNode.rotateRight();\n                    }\n                    else\n                        parentNode.rotateRight();\n                }\n                else {\n                    if (brother.left && brother.left.color === TreeNode.RED) {\n                        brother.color = parentNode.color;\n                        parentNode.color = TreeNode.BLACK;\n                        brother.left.color = TreeNode.BLACK;\n                        if (parentNode === this.root) {\n                            this.root = parentNode.rotateRight();\n                        }\n                        else\n                            parentNode.rotateRight();\n                        return;\n                    }\n                    else if (brother.right && brother.right.color === TreeNode.RED) {\n                        brother.color = TreeNode.RED;\n                        brother.right.color = TreeNode.BLACK;\n                        brother.rotateLeft();\n                    }\n                    else {\n                        brother.color = TreeNode.RED;\n                        curNode = parentNode;\n                    }\n                }\n            }\n        }\n    };\n    /**\n     * @description Remove a node.\n     * @param curNode The node you want to remove.\n     * @protected\n     */\n    TreeContainer.prototype.eraseNode = function (curNode) {\n        var _a, _b;\n        if (this.length === 1) {\n            this.clear();\n            return;\n        }\n        var swapNode = curNode;\n        while (swapNode.left || swapNode.right) {\n            if (swapNode.right) {\n                swapNode = swapNode.right;\n                while (swapNode.left)\n                    swapNode = swapNode.left;\n            }\n            else if (swapNode.left) {\n                swapNode = swapNode.left;\n            }\n            _a = __read([swapNode.key, curNode.key], 2), curNode.key = _a[0], swapNode.key = _a[1];\n            _b = __read([swapNode.value, curNode.value], 2), curNode.value = _b[0], swapNode.value = _b[1];\n            curNode = swapNode;\n        }\n        if (this.header.left === swapNode) {\n            this.header.left = swapNode.parent;\n        }\n        else if (this.header.right === swapNode) {\n            this.header.right = swapNode.parent;\n        }\n        this.eraseNodeSelfBalance(swapNode);\n        swapNode.remove();\n        this.length -= 1;\n        this.root.color = TreeNode.BLACK;\n    };\n    /**\n     * @description Make self balance after insert a node.\n     * @param curNode The node want to insert.\n     * @protected\n     */\n    TreeContainer.prototype.insertNodeSelfBalance = function (curNode) {\n        while (true) {\n            var parentNode = curNode.parent;\n            if (parentNode.color === TreeNode.BLACK)\n                return;\n            var grandParent = parentNode.parent;\n            if (parentNode === grandParent.left) {\n                var uncle = grandParent.right;\n                if (uncle && uncle.color === TreeNode.RED) {\n                    uncle.color = parentNode.color = TreeNode.BLACK;\n                    if (grandParent === this.root)\n                        return;\n                    grandParent.color = TreeNode.RED;\n                    curNode = grandParent;\n                    continue;\n                }\n                else if (curNode === parentNode.right) {\n                    curNode.color = TreeNode.BLACK;\n                    if (curNode.left)\n                        curNode.left.parent = parentNode;\n                    if (curNode.right)\n                        curNode.right.parent = grandParent;\n                    parentNode.right = curNode.left;\n                    grandParent.left = curNode.right;\n                    curNode.left = parentNode;\n                    curNode.right = grandParent;\n                    if (grandParent === this.root) {\n                        this.root = curNode;\n                        this.header.parent = curNode;\n                    }\n                    else {\n                        var GP = grandParent.parent;\n                        if (GP.left === grandParent) {\n                            GP.left = curNode;\n                        }\n                        else\n                            GP.right = curNode;\n                    }\n                    curNode.parent = grandParent.parent;\n                    parentNode.parent = curNode;\n                    grandParent.parent = curNode;\n                }\n                else {\n                    parentNode.color = TreeNode.BLACK;\n                    if (grandParent === this.root) {\n                        this.root = grandParent.rotateRight();\n                    }\n                    else\n                        grandParent.rotateRight();\n                }\n                grandParent.color = TreeNode.RED;\n            }\n            else {\n                var uncle = grandParent.left;\n                if (uncle && uncle.color === TreeNode.RED) {\n                    uncle.color = parentNode.color = TreeNode.BLACK;\n                    if (grandParent === this.root)\n                        return;\n                    grandParent.color = TreeNode.RED;\n                    curNode = grandParent;\n                    continue;\n                }\n                else if (curNode === parentNode.left) {\n                    curNode.color = TreeNode.BLACK;\n                    if (curNode.left)\n                        curNode.left.parent = grandParent;\n                    if (curNode.right)\n                        curNode.right.parent = parentNode;\n                    grandParent.right = curNode.left;\n                    parentNode.left = curNode.right;\n                    curNode.left = grandParent;\n                    curNode.right = parentNode;\n                    if (grandParent === this.root) {\n                        this.root = curNode;\n                        this.header.parent = curNode;\n                    }\n                    else {\n                        var GP = grandParent.parent;\n                        if (GP.left === grandParent) {\n                            GP.left = curNode;\n                        }\n                        else\n                            GP.right = curNode;\n                    }\n                    curNode.parent = grandParent.parent;\n                    parentNode.parent = curNode;\n                    grandParent.parent = curNode;\n                }\n                else {\n                    parentNode.color = TreeNode.BLACK;\n                    if (grandParent === this.root) {\n                        this.root = grandParent.rotateLeft();\n                    }\n                    else\n                        grandParent.rotateLeft();\n                }\n                grandParent.color = TreeNode.RED;\n            }\n            return;\n        }\n    };\n    /**\n     * @description Find node which key is equals to the given key.\n     * @param curNode The starting node of the search.\n     * @param key The key you want to search.\n     * @protected\n     */\n    TreeContainer.prototype.findElementNode = function (curNode, key) {\n        while (curNode) {\n            var cmpResult = this.cmp(curNode.key, key);\n            if (cmpResult < 0) {\n                curNode = curNode.right;\n            }\n            else if (cmpResult > 0) {\n                curNode = curNode.left;\n            }\n            else\n                return curNode;\n        }\n        return curNode;\n    };\n    /**\n     * @description Insert a key-value pair or set value by the given key.\n     * @param key The key want to insert.\n     * @param value The value want to set.\n     * @param hint You can give an iterator hint to improve insertion efficiency.\n     * @protected\n     */\n    TreeContainer.prototype.set = function (key, value, hint) {\n        if (this.root === undefined) {\n            this.length += 1;\n            this.root = new TreeNode(key, value);\n            this.root.color = TreeNode.BLACK;\n            this.root.parent = this.header;\n            this.header.parent = this.root;\n            this.header.left = this.root;\n            this.header.right = this.root;\n            return;\n        }\n        var curNode;\n        var minNode = this.header.left;\n        var compareToMin = this.cmp(minNode.key, key);\n        if (compareToMin === 0) {\n            minNode.value = value;\n            return;\n        }\n        else if (compareToMin > 0) {\n            minNode.left = new TreeNode(key, value);\n            minNode.left.parent = minNode;\n            curNode = minNode.left;\n            this.header.left = curNode;\n        }\n        else {\n            var maxNode = this.header.right;\n            var compareToMax = this.cmp(maxNode.key, key);\n            if (compareToMax === 0) {\n                maxNode.value = value;\n                return;\n            }\n            else if (compareToMax < 0) {\n                maxNode.right = new TreeNode(key, value);\n                maxNode.right.parent = maxNode;\n                curNode = maxNode.right;\n                this.header.right = curNode;\n            }\n            else {\n                if (hint !== undefined) {\n                    // @ts-ignore\n                    var iterNode = hint.node;\n                    if (iterNode !== this.header) {\n                        var iterCmpRes = this.cmp(iterNode.key, key);\n                        if (iterCmpRes === 0) {\n                            iterNode.value = value;\n                            return;\n                        }\n                        else if (iterCmpRes > 0) {\n                            var preNode = iterNode.pre();\n                            var preCmpRes = this.cmp(preNode.key, key);\n                            if (preCmpRes === 0) {\n                                preNode.value = value;\n                                return;\n                            }\n                            else if (preCmpRes < 0) {\n                                curNode = new TreeNode(key, value);\n                                if (preNode.right === undefined) {\n                                    preNode.right = curNode;\n                                    curNode.parent = preNode;\n                                }\n                                else {\n                                    iterNode.left = curNode;\n                                    curNode.parent = iterNode;\n                                }\n                            }\n                        }\n                    }\n                }\n                if (curNode === undefined) {\n                    curNode = this.root;\n                    while (true) {\n                        var cmpResult = this.cmp(curNode.key, key);\n                        if (cmpResult > 0) {\n                            if (curNode.left === undefined) {\n                                curNode.left = new TreeNode(key, value);\n                                curNode.left.parent = curNode;\n                                curNode = curNode.left;\n                                break;\n                            }\n                            curNode = curNode.left;\n                        }\n                        else if (cmpResult < 0) {\n                            if (curNode.right === undefined) {\n                                curNode.right = new TreeNode(key, value);\n                                curNode.right.parent = curNode;\n                                curNode = curNode.right;\n                                break;\n                            }\n                            curNode = curNode.right;\n                        }\n                        else {\n                            curNode.value = value;\n                            return;\n                        }\n                    }\n                }\n            }\n        }\n        this.length += 1;\n        this.insertNodeSelfBalance(curNode);\n    };\n    TreeContainer.prototype.clear = function () {\n        this.length = 0;\n        this.root = undefined;\n        this.header.parent = undefined;\n        this.header.left = this.header.right = undefined;\n    };\n    /**\n     * @description Update node's key by iterator.\n     * @param iter The iterator you want to change.\n     * @param key The key you want to update.\n     * @return Boolean about if the modification is successful.\n     */\n    TreeContainer.prototype.updateKeyByIterator = function (iter, key) {\n        // @ts-ignore\n        var node = iter.node;\n        if (node === this.header) {\n            throw new TypeError('Invalid iterator!');\n        }\n        if (this.length === 1) {\n            node.key = key;\n            return true;\n        }\n        if (node === this.header.left) {\n            if (this.cmp(node.next().key, key) > 0) {\n                node.key = key;\n                return true;\n            }\n            return false;\n        }\n        if (node === this.header.right) {\n            if (this.cmp(node.pre().key, key) < 0) {\n                node.key = key;\n                return true;\n            }\n            return false;\n        }\n        var preKey = node.pre().key;\n        if (this.cmp(preKey, key) >= 0)\n            return false;\n        var nextKey = node.next().key;\n        if (this.cmp(nextKey, key) <= 0)\n            return false;\n        node.key = key;\n        return true;\n    };\n    TreeContainer.prototype.eraseElementByPos = function (pos) {\n        var _this = this;\n        checkWithinAccessParams(pos, 0, this.length - 1);\n        var index = 0;\n        this.inOrderTraversal(this.root, function (curNode) {\n            if (pos === index) {\n                _this.eraseNode(curNode);\n                return true;\n            }\n            index += 1;\n            return false;\n        });\n    };\n    /**\n     * @description Remove the element of the specified key.\n     * @param key The key you want to remove.\n     */\n    TreeContainer.prototype.eraseElementByKey = function (key) {\n        if (!this.length)\n            return;\n        var curNode = this.findElementNode(this.root, key);\n        if (curNode === undefined)\n            return;\n        this.eraseNode(curNode);\n    };\n    TreeContainer.prototype.eraseElementByIterator = function (iter) {\n        // @ts-ignore\n        var node = iter.node;\n        if (node === this.header) {\n            throw new RangeError('Invalid iterator');\n        }\n        if (node.right === undefined) {\n            iter = iter.next();\n        }\n        this.eraseNode(node);\n        return iter;\n    };\n    /**\n     * @description Get the height of the tree.\n     * @return Number about the height of the RB-tree.\n     */\n    TreeContainer.prototype.getHeight = function () {\n        if (!this.length)\n            return 0;\n        var traversal = function (curNode) {\n            if (!curNode)\n                return 0;\n            return Math.max(traversal(curNode.left), traversal(curNode.right)) + 1;\n        };\n        return traversal(this.root);\n    };\n    return TreeContainer;\n}(Container));\nexport default TreeContainer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}