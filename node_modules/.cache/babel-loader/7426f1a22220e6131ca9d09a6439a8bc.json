{"ast":null,"code":"import { map } from './map';\nimport { innerFrom } from '../observable/innerFrom';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function exhaustMap(project, resultSelector) {\n  if (resultSelector) {\n    return function (source) {\n      return source.pipe(exhaustMap(function (a, i) {\n        return innerFrom(project(a, i)).pipe(map(function (b, ii) {\n          return resultSelector(a, b, i, ii);\n        }));\n      }));\n    };\n  }\n  return operate(function (source, subscriber) {\n    var index = 0;\n    var innerSub = null;\n    var isComplete = false;\n    source.subscribe(createOperatorSubscriber(subscriber, function (outerValue) {\n      if (!innerSub) {\n        innerSub = createOperatorSubscriber(subscriber, undefined, function () {\n          innerSub = null;\n          isComplete && subscriber.complete();\n        });\n        innerFrom(project(outerValue, index++)).subscribe(innerSub);\n      }\n    }, function () {\n      isComplete = true;\n      !innerSub && subscriber.complete();\n    }));\n  });\n}","map":{"version":3,"mappings":"AAGA,SAASA,GAAG,QAAQ,OAAO;AAC3B,SAASC,SAAS,QAAQ,yBAAyB;AACnD,SAASC,OAAO,QAAQ,cAAc;AACtC,SAASC,wBAAwB,QAAQ,sBAAsB;AA8D/D,OAAM,SAAUC,UAAU,CACxBC,OAAuC,EACvCC,cAA6G;EAE7G,IAAIA,cAAc,EAAE;IAElB,OAAO,UAACC,MAAqB;MAC3B,aAAM,CAACC,IAAI,CAACJ,UAAU,CAAC,UAACK,CAAC,EAAEC,CAAC;QAAK,gBAAS,CAACL,OAAO,CAACI,CAAC,EAAEC,CAAC,CAAC,CAAC,CAACF,IAAI,CAACR,GAAG,CAAC,UAACW,CAAM,EAAEC,EAAO;UAAK,qBAAc,CAACH,CAAC,EAAEE,CAAC,EAAED,CAAC,EAAEE,EAAE,CAAC;QAA3B,CAA2B,CAAC,CAAC;MAApF,CAAoF,CAAC,CAAC;IAAvH,CAAuH;;EAE3H,OAAOV,OAAO,CAAC,UAACK,MAAM,EAAEM,UAAU;IAChC,IAAIC,KAAK,GAAG,CAAC;IACb,IAAIC,QAAQ,GAAyB,IAAI;IACzC,IAAIC,UAAU,GAAG,KAAK;IACtBT,MAAM,CAACU,SAAS,CACdd,wBAAwB,CACtBU,UAAU,EACV,UAACK,UAAU;MACT,IAAI,CAACH,QAAQ,EAAE;QACbA,QAAQ,GAAGZ,wBAAwB,CAACU,UAAU,EAAEM,SAAS,EAAE;UACzDJ,QAAQ,GAAG,IAAI;UACfC,UAAU,IAAIH,UAAU,CAACO,QAAQ,EAAE;QACrC,CAAC,CAAC;QACFnB,SAAS,CAACI,OAAO,CAACa,UAAU,EAAEJ,KAAK,EAAE,CAAC,CAAC,CAACG,SAAS,CAACF,QAAQ,CAAC;;IAE/D,CAAC,EACD;MACEC,UAAU,GAAG,IAAI;MACjB,CAACD,QAAQ,IAAIF,UAAU,CAACO,QAAQ,EAAE;IACpC,CAAC,CACF,CACF;EACH,CAAC,CAAC;AACJ","names":["map","innerFrom","operate","createOperatorSubscriber","exhaustMap","project","resultSelector","source","pipe","a","i","b","ii","subscriber","index","innerSub","isComplete","subscribe","outerValue","undefined","complete"],"sources":["C:\\Users\\Amali\\Desktop\\Building_the_IoT_w._P2P_and_Cloud_Computing\\IoTProject\\node_modules\\rxjs\\src\\internal\\operators\\exhaustMap.ts"],"sourcesContent":["import { Observable } from '../Observable';\r\nimport { Subscriber } from '../Subscriber';\r\nimport { ObservableInput, OperatorFunction, ObservedValueOf } from '../types';\r\nimport { map } from './map';\r\nimport { innerFrom } from '../observable/innerFrom';\r\nimport { operate } from '../util/lift';\r\nimport { createOperatorSubscriber } from './OperatorSubscriber';\r\n\r\n/* tslint:disable:max-line-length */\r\nexport function exhaustMap<T, O extends ObservableInput<any>>(\r\n  project: (value: T, index: number) => O\r\n): OperatorFunction<T, ObservedValueOf<O>>;\r\n/** @deprecated The `resultSelector` parameter will be removed in v8. Use an inner `map` instead. Details: https://rxjs.dev/deprecations/resultSelector */\r\nexport function exhaustMap<T, O extends ObservableInput<any>>(\r\n  project: (value: T, index: number) => O,\r\n  resultSelector: undefined\r\n): OperatorFunction<T, ObservedValueOf<O>>;\r\n/** @deprecated The `resultSelector` parameter will be removed in v8. Use an inner `map` instead. Details: https://rxjs.dev/deprecations/resultSelector */\r\nexport function exhaustMap<T, I, R>(\r\n  project: (value: T, index: number) => ObservableInput<I>,\r\n  resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R\r\n): OperatorFunction<T, R>;\r\n/* tslint:enable:max-line-length */\r\n\r\n/**\r\n * Projects each source value to an Observable which is merged in the output\r\n * Observable only if the previous projected Observable has completed.\r\n *\r\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\r\n * these inner Observables using {@link exhaust}.</span>\r\n *\r\n * ![](exhaustMap.png)\r\n *\r\n * Returns an Observable that emits items based on applying a function that you\r\n * supply to each item emitted by the source Observable, where that function\r\n * returns an (so-called \"inner\") Observable. When it projects a source value to\r\n * an Observable, the output Observable begins emitting the items emitted by\r\n * that projected Observable. However, `exhaustMap` ignores every new projected\r\n * Observable if the previous projected Observable has not yet completed. Once\r\n * that one completes, it will accept and flatten the next projected Observable\r\n * and repeat this process.\r\n *\r\n * ## Example\r\n *\r\n * Run a finite timer for each click, only if there is no currently active timer\r\n *\r\n * ```ts\r\n * import { fromEvent, exhaustMap, interval, take } from 'rxjs';\r\n *\r\n * const clicks = fromEvent(document, 'click');\r\n * const result = clicks.pipe(\r\n *   exhaustMap(() => interval(1000).pipe(take(5)))\r\n * );\r\n * result.subscribe(x => console.log(x));\r\n * ```\r\n *\r\n * @see {@link concatMap}\r\n * @see {@link exhaust}\r\n * @see {@link mergeMap}\r\n * @see {@link switchMap}\r\n *\r\n * @param {function(value: T, ?index: number): ObservableInput} project A function\r\n * that, when applied to an item emitted by the source Observable, returns an\r\n * Observable.\r\n * @return A function that returns an Observable containing projected\r\n * Observables of each item of the source, ignoring projected Observables that\r\n * start before their preceding Observable has completed.\r\n */\r\nexport function exhaustMap<T, R, O extends ObservableInput<any>>(\r\n  project: (value: T, index: number) => O,\r\n  resultSelector?: (outerValue: T, innerValue: ObservedValueOf<O>, outerIndex: number, innerIndex: number) => R\r\n): OperatorFunction<T, ObservedValueOf<O> | R> {\r\n  if (resultSelector) {\r\n    // DEPRECATED PATH\r\n    return (source: Observable<T>) =>\r\n      source.pipe(exhaustMap((a, i) => innerFrom(project(a, i)).pipe(map((b: any, ii: any) => resultSelector(a, b, i, ii)))));\r\n  }\r\n  return operate((source, subscriber) => {\r\n    let index = 0;\r\n    let innerSub: Subscriber<T> | null = null;\r\n    let isComplete = false;\r\n    source.subscribe(\r\n      createOperatorSubscriber(\r\n        subscriber,\r\n        (outerValue) => {\r\n          if (!innerSub) {\r\n            innerSub = createOperatorSubscriber(subscriber, undefined, () => {\r\n              innerSub = null;\r\n              isComplete && subscriber.complete();\r\n            });\r\n            innerFrom(project(outerValue, index++)).subscribe(innerSub);\r\n          }\r\n        },\r\n        () => {\r\n          isComplete = true;\r\n          !innerSub && subscriber.complete();\r\n        }\r\n      )\r\n    );\r\n  });\r\n}\r\n"]},"metadata":{},"sourceType":"module"}