{"ast":null,"code":"import { Observable } from '../Observable';\nexport var EMPTY = new Observable(function (subscriber) {\n  return subscriber.complete();\n});\nexport function empty(scheduler) {\n  return scheduler ? emptyScheduled(scheduler) : EMPTY;\n}\nfunction emptyScheduled(scheduler) {\n  return new Observable(function (subscriber) {\n    return scheduler.schedule(function () {\n      return subscriber.complete();\n    });\n  });\n}","map":{"version":3,"mappings":"AAAA,SAASA,UAAU,QAAQ,eAAe;AAiE1C,OAAO,IAAMC,KAAK,GAAG,IAAID,UAAU,CAAQ,UAACE,UAAU;EAAK,iBAAU,CAACC,QAAQ,EAAE;AAArB,CAAqB,CAAC;AAOjF,OAAM,SAAUC,KAAK,CAACC,SAAyB;EAC7C,OAAOA,SAAS,GAAGC,cAAc,CAACD,SAAS,CAAC,GAAGJ,KAAK;AACtD;AAEA,SAASK,cAAc,CAACD,SAAwB;EAC9C,OAAO,IAAIL,UAAU,CAAQ,UAACE,UAAU;IAAK,gBAAS,CAACK,QAAQ,CAAC;MAAM,iBAAU,CAACJ,QAAQ,EAAE;IAArB,CAAqB,CAAC;EAA/C,CAA+C,CAAC;AAC/F","names":["Observable","EMPTY","subscriber","complete","empty","scheduler","emptyScheduled","schedule"],"sources":["C:\\Users\\Amali\\Desktop\\Building_the_IoT_w._P2P_and_Cloud_Computing\\IoTProject\\node_modules\\rxjs\\src\\internal\\observable\\empty.ts"],"sourcesContent":["import { Observable } from '../Observable';\r\nimport { SchedulerLike } from '../types';\r\n\r\n/**\r\n * A simple Observable that emits no items to the Observer and immediately\r\n * emits a complete notification.\r\n *\r\n * <span class=\"informal\">Just emits 'complete', and nothing else.</span>\r\n *\r\n * ![](empty.png)\r\n *\r\n * A simple Observable that only emits the complete notification. It can be used\r\n * for composing with other Observables, such as in a {@link mergeMap}.\r\n *\r\n * ## Examples\r\n *\r\n * Log complete notification\r\n *\r\n * ```ts\r\n * import { EMPTY } from 'rxjs';\r\n *\r\n * EMPTY.subscribe({\r\n *   next: () => console.log('Next'),\r\n *   complete: () => console.log('Complete!')\r\n * });\r\n *\r\n * // Outputs\r\n * // Complete!\r\n * ```\r\n *\r\n * Emit the number 7, then complete\r\n *\r\n * ```ts\r\n * import { EMPTY, startWith } from 'rxjs';\r\n *\r\n * const result = EMPTY.pipe(startWith(7));\r\n * result.subscribe(x => console.log(x));\r\n *\r\n * // Outputs\r\n * // 7\r\n * ```\r\n *\r\n * Map and flatten only odd numbers to the sequence `'a'`, `'b'`, `'c'`\r\n *\r\n * ```ts\r\n * import { interval, mergeMap, of, EMPTY } from 'rxjs';\r\n *\r\n * const interval$ = interval(1000);\r\n * const result = interval$.pipe(\r\n *   mergeMap(x => x % 2 === 1 ? of('a', 'b', 'c') : EMPTY),\r\n * );\r\n * result.subscribe(x => console.log(x));\r\n *\r\n * // Results in the following to the console:\r\n * // x is equal to the count on the interval, e.g. (0, 1, 2, 3, ...)\r\n * // x will occur every 1000ms\r\n * // if x % 2 is equal to 1, print a, b, c (each on its own)\r\n * // if x % 2 is not equal to 1, nothing will be output\r\n * ```\r\n *\r\n * @see {@link Observable}\r\n * @see {@link NEVER}\r\n * @see {@link of}\r\n * @see {@link throwError}\r\n */\r\nexport const EMPTY = new Observable<never>((subscriber) => subscriber.complete());\r\n\r\n/**\r\n * @param scheduler A {@link SchedulerLike} to use for scheduling\r\n * the emission of the complete notification.\r\n * @deprecated Replaced with the {@link EMPTY} constant or {@link scheduled} (e.g. `scheduled([], scheduler)`). Will be removed in v8.\r\n */\r\nexport function empty(scheduler?: SchedulerLike) {\r\n  return scheduler ? emptyScheduled(scheduler) : EMPTY;\r\n}\r\n\r\nfunction emptyScheduled(scheduler: SchedulerLike) {\r\n  return new Observable<never>((subscriber) => scheduler.schedule(() => subscriber.complete()));\r\n}\r\n"]},"metadata":{},"sourceType":"module"}