{"ast":null,"code":"export function executeSchedule(parentSubscription, scheduler, work, delay, repeat) {\n  if (delay === void 0) {\n    delay = 0;\n  }\n  if (repeat === void 0) {\n    repeat = false;\n  }\n  var scheduleSubscription = scheduler.schedule(function () {\n    work();\n    if (repeat) {\n      parentSubscription.add(this.schedule(null, delay));\n    } else {\n      this.unsubscribe();\n    }\n  }, delay);\n  parentSubscription.add(scheduleSubscription);\n  if (!repeat) {\n    return scheduleSubscription;\n  }\n}","map":{"version":3,"mappings":"AAkBA,OAAM,SAAUA,eAAe,CAC7BC,kBAAgC,EAChCC,SAAwB,EACxBC,IAAgB,EAChBC,KAAS,EACTC,MAAc;EADd;IAAAD,SAAS;EAAA;EACT;IAAAC,cAAc;EAAA;EAEd,IAAMC,oBAAoB,GAAGJ,SAAS,CAACK,QAAQ,CAAC;IAC9CJ,IAAI,EAAE;IACN,IAAIE,MAAM,EAAE;MACVJ,kBAAkB,CAACO,GAAG,CAAC,IAAI,CAACD,QAAQ,CAAC,IAAI,EAAEH,KAAK,CAAC,CAAC;KACnD,MAAM;MACL,IAAI,CAACK,WAAW,EAAE;;EAEtB,CAAC,EAAEL,KAAK,CAAC;EAETH,kBAAkB,CAACO,GAAG,CAACF,oBAAoB,CAAC;EAE5C,IAAI,CAACD,MAAM,EAAE;IAKX,OAAOC,oBAAoB;;AAE/B","names":["executeSchedule","parentSubscription","scheduler","work","delay","repeat","scheduleSubscription","schedule","add","unsubscribe"],"sources":["C:\\Users\\Amali\\Desktop\\Building_the_IoT_w._P2P_and_Cloud_Computing\\IoTProject\\node_modules\\rxjs\\src\\internal\\util\\executeSchedule.ts"],"sourcesContent":["import { Subscription } from '../Subscription';\r\nimport { SchedulerAction, SchedulerLike } from '../types';\r\n\r\nexport function executeSchedule(\r\n  parentSubscription: Subscription,\r\n  scheduler: SchedulerLike,\r\n  work: () => void,\r\n  delay: number,\r\n  repeat: true\r\n): void;\r\nexport function executeSchedule(\r\n  parentSubscription: Subscription,\r\n  scheduler: SchedulerLike,\r\n  work: () => void,\r\n  delay?: number,\r\n  repeat?: false\r\n): Subscription;\r\n\r\nexport function executeSchedule(\r\n  parentSubscription: Subscription,\r\n  scheduler: SchedulerLike,\r\n  work: () => void,\r\n  delay = 0,\r\n  repeat = false\r\n): Subscription | void {\r\n  const scheduleSubscription = scheduler.schedule(function (this: SchedulerAction<any>) {\r\n    work();\r\n    if (repeat) {\r\n      parentSubscription.add(this.schedule(null, delay));\r\n    } else {\r\n      this.unsubscribe();\r\n    }\r\n  }, delay);\r\n\r\n  parentSubscription.add(scheduleSubscription);\r\n\r\n  if (!repeat) {\r\n    // Because user-land scheduler implementations are unlikely to properly reuse\r\n    // Actions for repeat scheduling, we can't trust that the returned subscription\r\n    // will control repeat subscription scenarios. So we're trying to avoid using them\r\n    // incorrectly within this library.\r\n    return scheduleSubscription;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}