{"ast":null,"code":"'use strict';\n\n/**\n * Module dependencies\n */\nconst LruMap = require('lru-cache');\nconst NumberAllocator = require('number-allocator').NumberAllocator;\n\n/**\n * Topic Alias sending manager\n * This holds both topic to alias and alias to topic map\n * @param {Number} [max] - topic alias maximum entries\n */\nfunction TopicAliasSend(max) {\n  if (!(this instanceof TopicAliasSend)) {\n    return new TopicAliasSend(max);\n  }\n  if (max > 0) {\n    this.aliasToTopic = new LruMap({\n      max: max\n    });\n    this.topicToAlias = {};\n    this.numberAllocator = new NumberAllocator(1, max);\n    this.max = max;\n    this.length = 0;\n  }\n}\n\n/**\n * Insert or update topic - alias entry.\n * @param {String} [topic] - topic\n * @param {Number} [alias] - topic alias\n * @returns {Boolean} - if success return true otherwise false\n */\nTopicAliasSend.prototype.put = function (topic, alias) {\n  if (alias === 0 || alias > this.max) {\n    return false;\n  }\n  const entry = this.aliasToTopic.get(alias);\n  if (entry) {\n    delete this.topicToAlias[entry];\n  }\n  this.aliasToTopic.set(alias, topic);\n  this.topicToAlias[topic] = alias;\n  this.numberAllocator.use(alias);\n  this.length = this.aliasToTopic.length;\n  return true;\n};\n\n/**\n * Get topic by alias\n * @param {Number} [alias] - topic alias\n * @returns {String} - if mapped topic exists return topic, otherwise return undefined\n */\nTopicAliasSend.prototype.getTopicByAlias = function (alias) {\n  return this.aliasToTopic.get(alias);\n};\n\n/**\n * Get topic by alias\n * @param {String} [topic] - topic\n * @returns {Number} - if mapped topic exists return topic alias, otherwise return undefined\n */\nTopicAliasSend.prototype.getAliasByTopic = function (topic) {\n  const alias = this.topicToAlias[topic];\n  if (typeof alias !== 'undefined') {\n    this.aliasToTopic.get(alias); // LRU update\n  }\n\n  return alias;\n};\n\n/**\n * Clear all entries\n */\nTopicAliasSend.prototype.clear = function () {\n  this.aliasToTopic.reset();\n  this.topicToAlias = {};\n  this.numberAllocator.clear();\n  this.length = 0;\n};\n\n/**\n * Get Least Recently Used (LRU) topic alias\n * @returns {Number} - if vacant alias exists then return it, otherwise then return LRU alias\n */\nTopicAliasSend.prototype.getLruAlias = function () {\n  const alias = this.numberAllocator.firstVacant();\n  if (alias) return alias;\n  return this.aliasToTopic.keys()[this.aliasToTopic.length - 1];\n};\nmodule.exports = TopicAliasSend;","map":{"version":3,"names":["LruMap","require","NumberAllocator","TopicAliasSend","max","aliasToTopic","topicToAlias","numberAllocator","length","prototype","put","topic","alias","entry","get","set","use","getTopicByAlias","getAliasByTopic","clear","reset","getLruAlias","firstVacant","keys","module","exports"],"sources":["C:/Users/Amali/Desktop/Building_the_IoT_w._P2P_and_Cloud_Computing/IoTProject/node_modules/mqtt/lib/topic-alias-send.js"],"sourcesContent":["'use strict'\n\n/**\n * Module dependencies\n */\nconst LruMap = require('lru-cache')\nconst NumberAllocator = require('number-allocator').NumberAllocator\n\n/**\n * Topic Alias sending manager\n * This holds both topic to alias and alias to topic map\n * @param {Number} [max] - topic alias maximum entries\n */\nfunction TopicAliasSend (max) {\n  if (!(this instanceof TopicAliasSend)) {\n    return new TopicAliasSend(max)\n  }\n\n  if (max > 0) {\n    this.aliasToTopic = new LruMap({ max: max })\n    this.topicToAlias = {}\n    this.numberAllocator = new NumberAllocator(1, max)\n    this.max = max\n    this.length = 0\n  }\n}\n\n/**\n * Insert or update topic - alias entry.\n * @param {String} [topic] - topic\n * @param {Number} [alias] - topic alias\n * @returns {Boolean} - if success return true otherwise false\n */\nTopicAliasSend.prototype.put = function (topic, alias) {\n  if (alias === 0 || alias > this.max) {\n    return false\n  }\n  const entry = this.aliasToTopic.get(alias)\n  if (entry) {\n    delete this.topicToAlias[entry]\n  }\n  this.aliasToTopic.set(alias, topic)\n  this.topicToAlias[topic] = alias\n  this.numberAllocator.use(alias)\n  this.length = this.aliasToTopic.length\n  return true\n}\n\n/**\n * Get topic by alias\n * @param {Number} [alias] - topic alias\n * @returns {String} - if mapped topic exists return topic, otherwise return undefined\n */\nTopicAliasSend.prototype.getTopicByAlias = function (alias) {\n  return this.aliasToTopic.get(alias)\n}\n\n/**\n * Get topic by alias\n * @param {String} [topic] - topic\n * @returns {Number} - if mapped topic exists return topic alias, otherwise return undefined\n */\nTopicAliasSend.prototype.getAliasByTopic = function (topic) {\n  const alias = this.topicToAlias[topic]\n  if (typeof alias !== 'undefined') {\n    this.aliasToTopic.get(alias) // LRU update\n  }\n  return alias\n}\n\n/**\n * Clear all entries\n */\nTopicAliasSend.prototype.clear = function () {\n  this.aliasToTopic.reset()\n  this.topicToAlias = {}\n  this.numberAllocator.clear()\n  this.length = 0\n}\n\n/**\n * Get Least Recently Used (LRU) topic alias\n * @returns {Number} - if vacant alias exists then return it, otherwise then return LRU alias\n */\nTopicAliasSend.prototype.getLruAlias = function () {\n  const alias = this.numberAllocator.firstVacant()\n  if (alias) return alias\n  return this.aliasToTopic.keys()[this.aliasToTopic.length - 1]\n}\n\nmodule.exports = TopicAliasSend\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}