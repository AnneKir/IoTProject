{"ast":null,"code":"import { EMPTY } from '../observable/empty';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function take(count) {\n  return count <= 0 ? function () {\n    return EMPTY;\n  } : operate(function (source, subscriber) {\n    var seen = 0;\n    source.subscribe(createOperatorSubscriber(subscriber, function (value) {\n      if (++seen <= count) {\n        subscriber.next(value);\n        if (count <= seen) {\n          subscriber.complete();\n        }\n      }\n    }));\n  });\n}","map":{"version":3,"mappings":"AACA,SAASA,KAAK,QAAQ,qBAAqB;AAC3C,SAASC,OAAO,QAAQ,cAAc;AACtC,SAASC,wBAAwB,QAAQ,sBAAsB;AA4C/D,OAAM,SAAUC,IAAI,CAAIC,KAAa;EACnC,OAAOA,KAAK,IAAI,CAAC,GAEb;IAAM,YAAK;EAAL,CAAK,GACXH,OAAO,CAAC,UAACI,MAAM,EAAEC,UAAU;IACzB,IAAIC,IAAI,GAAG,CAAC;IACZF,MAAM,CAACG,SAAS,CACdN,wBAAwB,CAACI,UAAU,EAAE,UAACG,KAAK;MAIzC,IAAI,EAAEF,IAAI,IAAIH,KAAK,EAAE;QACnBE,UAAU,CAACI,IAAI,CAACD,KAAK,CAAC;QAItB,IAAIL,KAAK,IAAIG,IAAI,EAAE;UACjBD,UAAU,CAACK,QAAQ,EAAE;;;IAG3B,CAAC,CAAC,CACH;EACH,CAAC,CAAC;AACR","names":["EMPTY","operate","createOperatorSubscriber","take","count","source","subscriber","seen","subscribe","value","next","complete"],"sources":["C:\\Users\\Amali\\Desktop\\Building_the_IoT_w._P2P_and_Cloud_Computing\\IoTProject\\node_modules\\rxjs\\src\\internal\\operators\\take.ts"],"sourcesContent":["import { MonoTypeOperatorFunction } from '../types';\r\nimport { EMPTY } from '../observable/empty';\r\nimport { operate } from '../util/lift';\r\nimport { createOperatorSubscriber } from './OperatorSubscriber';\r\n\r\n/**\r\n * Emits only the first `count` values emitted by the source Observable.\r\n *\r\n * <span class=\"informal\">Takes the first `count` values from the source, then\r\n * completes.</span>\r\n *\r\n * ![](take.png)\r\n *\r\n * `take` returns an Observable that emits only the first `count` values emitted\r\n * by the source Observable. If the source emits fewer than `count` values then\r\n * all of its values are emitted. After that, it completes, regardless if the\r\n * source completes.\r\n *\r\n * ## Example\r\n *\r\n * Take the first 5 seconds of an infinite 1-second interval Observable\r\n *\r\n * ```ts\r\n * import { interval, take } from 'rxjs';\r\n *\r\n * const intervalCount = interval(1000);\r\n * const takeFive = intervalCount.pipe(take(5));\r\n * takeFive.subscribe(x => console.log(x));\r\n *\r\n * // Logs:\r\n * // 0\r\n * // 1\r\n * // 2\r\n * // 3\r\n * // 4\r\n * ```\r\n *\r\n * @see {@link takeLast}\r\n * @see {@link takeUntil}\r\n * @see {@link takeWhile}\r\n * @see {@link skip}\r\n *\r\n * @param count The maximum number of `next` values to emit.\r\n * @return A function that returns an Observable that emits only the first\r\n * `count` values emitted by the source Observable, or all of the values from\r\n * the source if the source emits fewer than `count` values.\r\n */\r\nexport function take<T>(count: number): MonoTypeOperatorFunction<T> {\r\n  return count <= 0\r\n    ? // If we are taking no values, that's empty.\r\n      () => EMPTY\r\n    : operate((source, subscriber) => {\r\n        let seen = 0;\r\n        source.subscribe(\r\n          createOperatorSubscriber(subscriber, (value) => {\r\n            // Increment the number of values we have seen,\r\n            // then check it against the allowed count to see\r\n            // if we are still letting values through.\r\n            if (++seen <= count) {\r\n              subscriber.next(value);\r\n              // If we have met or passed our allowed count,\r\n              // we need to complete. We have to do <= here,\r\n              // because re-entrant code will increment `seen` twice.\r\n              if (count <= seen) {\r\n                subscriber.complete();\r\n              }\r\n            }\r\n          })\r\n        );\r\n      });\r\n}\r\n"]},"metadata":{},"sourceType":"module"}