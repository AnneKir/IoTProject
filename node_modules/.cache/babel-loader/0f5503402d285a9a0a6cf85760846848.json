{"ast":null,"code":"import { switchMap } from './switchMap';\nimport { identity } from '../util/identity';\nexport function switchAll() {\n  return switchMap(identity);\n}","map":{"version":3,"mappings":"AACA,SAASA,SAAS,QAAQ,aAAa;AACvC,SAASC,QAAQ,QAAQ,kBAAkB;AA4D3C,OAAM,SAAUC,SAAS;EACvB,OAAOF,SAAS,CAACC,QAAQ,CAAC;AAC5B","names":["switchMap","identity","switchAll"],"sources":["C:\\Users\\Amali\\Desktop\\Building_the_IoT_w._P2P_and_Cloud_Computing\\IoTProject\\node_modules\\rxjs\\src\\internal\\operators\\switchAll.ts"],"sourcesContent":["import { OperatorFunction, ObservableInput, ObservedValueOf } from '../types';\r\nimport { switchMap } from './switchMap';\r\nimport { identity } from '../util/identity';\r\n\r\n/**\r\n * Converts a higher-order Observable into a first-order Observable\r\n * producing values only from the most recent observable sequence\r\n *\r\n * <span class=\"informal\">Flattens an Observable-of-Observables.</span>\r\n *\r\n * ![](switchAll.png)\r\n *\r\n * `switchAll` subscribes to a source that is an observable of observables, also known as a\r\n * \"higher-order observable\" (or `Observable<Observable<T>>`). It subscribes to the most recently\r\n * provided \"inner observable\" emitted by the source, unsubscribing from any previously subscribed\r\n * to inner observable, such that only the most recent inner observable may be subscribed to at\r\n * any point in time. The resulting observable returned by `switchAll` will only complete if the\r\n * source observable completes, *and* any currently subscribed to inner observable also has completed,\r\n * if there are any.\r\n *\r\n * ## Examples\r\n *\r\n * Spawn a new interval observable for each click event, but for every new\r\n * click, cancel the previous interval and subscribe to the new one\r\n *\r\n * ```ts\r\n * import { fromEvent, tap, map, interval, switchAll } from 'rxjs';\r\n *\r\n * const clicks = fromEvent(document, 'click').pipe(tap(() => console.log('click')));\r\n * const source = clicks.pipe(map(() => interval(1000)));\r\n *\r\n * source\r\n *   .pipe(switchAll())\r\n *   .subscribe(x => console.log(x));\r\n *\r\n * // Output\r\n * // click\r\n * // 0\r\n * // 1\r\n * // 2\r\n * // 3\r\n * // ...\r\n * // click\r\n * // 0\r\n * // 1\r\n * // 2\r\n * // ...\r\n * // click\r\n * // ...\r\n * ```\r\n *\r\n * @see {@link combineLatestAll}\r\n * @see {@link concatAll}\r\n * @see {@link exhaustAll}\r\n * @see {@link switchMap}\r\n * @see {@link switchMapTo}\r\n * @see {@link mergeAll}\r\n *\r\n * @return A function that returns an Observable that converts a higher-order\r\n * Observable into a first-order Observable producing values only from the most\r\n * recent Observable sequence.\r\n */\r\nexport function switchAll<O extends ObservableInput<any>>(): OperatorFunction<O, ObservedValueOf<O>> {\r\n  return switchMap(identity);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}