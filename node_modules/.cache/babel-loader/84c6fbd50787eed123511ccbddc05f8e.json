{"ast":null,"code":"const io = require('socket.io-client');\nconst SimplePeerClientWrapper = require('./simple-peer-client-wrapper.js');\nclass SocketIOClientWrapper {\n  constructor() {\n    let {\n      stream,\n      serverUrl,\n      debug = false,\n      simplePeerOptions\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    this.debug = debug;\n    if (typeof serverUrl === 'undefined') {\n      console.error('simple-peer-wrapper requires that you specify a serverUrl on startup. Please specify a serverUrl and try again. See documentation for more information https://github.com/lisajamhoury/simple-peer-wrapper');\n    }\n    this.debug && console.log('connecting socket to ' + serverUrl);\n    this.socket = io.connect(serverUrl);\n    this.peerClient = new SimplePeerClientWrapper(this.socket, this.debug, simplePeerOptions);\n    if (typeof stream !== 'undefined') {\n      this.peerClient.setlocalStream(stream);\n    }\n    this._initSocket();\n  }\n  _initSocket() {\n    this.socket.on('created', room => this._handleCreated(room));\n    this.socket.on('full', room => this._handleFullRoom(room));\n    this.socket.on('join', room => this._handleJoinRoom(room));\n    this.socket.on('joined', room => this._handleJoinedRoom(room));\n    this.socket.on('initiate peer', room => this._handleInitPeer(room));\n    this.socket.on('sending signal', message => this._handleSendSignal(message));\n    this.socket.on('log', array => this._handleLog(array));\n    this.socket.on('message', message => this._handleMessage(message));\n    this.socket.on('simple peer options', options => this._setSimplePeerOptionsFromServer(options));\n    this._startSocketCommunication();\n  }\n\n  // starts socket client communication with signal server automatically\n  _startSocketCommunication() {\n    this.socket.emit('create or join');\n    this.debug && console.log('Attempted to create or join room');\n  }\n  _handleCreated(room) {\n    this.debug && console.log('Created room ' + room);\n  }\n\n  // room only holds two clients, can be changed in signal_socket.js\n  _handleFullRoom(room) {\n    this.debug && console.log('Room ' + room + ' is full');\n  }\n\n  // called by initiator client only\n  _handleJoinRoom(room) {\n    this.debug && console.log('Another peer made a request to join room ' + room);\n    this.debug && console.log('This peer is the initiator of room ' + room + '!');\n    this._logConnection(room, true, true, false);\n    if (this.peerClient.initPeerRequest) {\n      this.debug && console.log('initing peer from handle join');\n      this.peerClient.init();\n    }\n  }\n\n  // called by non-initiator client\n  _handleJoinedRoom(room) {\n    this.debug && console.log('joined: ' + room);\n    this._logConnection(room, false, true, false);\n    if (this.peerClient.initPeerRequest) {\n      this.debug && console.log('initing peer from handle joined');\n      this.peerClient.init();\n    }\n  }\n  _logConnection(_room, _initiator, _roomReady, _peerStarted) {\n    this.debug && console.log('logging connection');\n    const newConnection = {\n      room: _room,\n      // socket.io server room\n      initiator: _initiator,\n      // client initiates the communication\n      roomReady: _roomReady,\n      // socket.io room is created or joined\n      peerStarted: _peerStarted // the peer connection is started\n    };\n\n    this.peerClient.connections.push(newConnection);\n  }\n\n  // logs messages from server\n  _handleLog(array) {\n    log.apply(console, array);\n  }\n  _handleInitPeer(room) {\n    const connection = this._findConnection(room);\n    this.peerClient.attemptPeerStart(connection);\n  }\n  _handleSendSignal(message) {\n    this.debug && console.log('receiving simple signal data');\n    const connection = this._findConnection(message.room);\n    if (!connection.peerStarted) {\n      this.debug && console.log('Creating peer from messages!');\n      this.peerClient.createPeerConnection(connection);\n      connection.peer.signal(message.data);\n    } else {\n      connection.peer.signal(message.data);\n    }\n  }\n  _findConnection(room) {\n    let connection = null;\n    for (let i = 0; i < this.peerClient.connections.length; i++) {\n      if (this.peerClient.connections[i].room === room) {\n        connection = this.peerClient.connections[i];\n      }\n    }\n    if (connection === null) {\n      this.debug && console.log('UT OH THAT CONNECTION DOESNT EXIST');\n    } else {\n      this.debug && console.log('found the connection for room: ' + room);\n    }\n    return connection;\n  }\n\n  // This client receives a message\n  _handleMessage(message) {\n    this.debug && console.log('MESSAGE ' + message);\n    if (message.type) {\n      this.debug && console.log('received msg typ ' + message.type);\n    } else {\n      this.debug && console.log('Client received message: ' + message);\n    }\n\n    // TO DO HANDLE BYE\n    // } else if (message === 'bye' && peerStarted) {\n    //   handleRemoteHangup();\n  }\n\n  _emitSocketMessage(message) {\n    this.debug && console.log('Client sending message: ', message);\n    this.socket.emit('message', message);\n  }\n  _setSimplePeerOptionsFromServer(options) {\n    this.debug && console.log('Setting Simple Peer Options from Server.');\n    this.peerClient.simplePeerOptions = options;\n  }\n}\nmodule.exports = SocketIOClientWrapper;","map":{"version":3,"names":["io","require","SimplePeerClientWrapper","SocketIOClientWrapper","constructor","stream","serverUrl","debug","simplePeerOptions","console","error","log","socket","connect","peerClient","setlocalStream","_initSocket","on","room","_handleCreated","_handleFullRoom","_handleJoinRoom","_handleJoinedRoom","_handleInitPeer","message","_handleSendSignal","array","_handleLog","_handleMessage","options","_setSimplePeerOptionsFromServer","_startSocketCommunication","emit","_logConnection","initPeerRequest","init","_room","_initiator","_roomReady","_peerStarted","newConnection","initiator","roomReady","peerStarted","connections","push","apply","connection","_findConnection","attemptPeerStart","createPeerConnection","peer","signal","data","i","length","type","_emitSocketMessage","module","exports"],"sources":["C:/Users/Amali/Desktop/Building_the_IoT_w._P2P_and_Cloud_Computing/IoTProject/node_modules/simple-peer-wrapper/src/socket-io-client-wrapper.js"],"sourcesContent":["const io = require('socket.io-client');\nconst SimplePeerClientWrapper = require('./simple-peer-client-wrapper.js');\n\nclass SocketIOClientWrapper {\n  constructor({\n    stream,\n    serverUrl,\n    debug = false,\n    simplePeerOptions,\n  } = {}) {\n    this.debug = debug;\n\n    if (typeof serverUrl === 'undefined') {\n      console.error(\n        'simple-peer-wrapper requires that you specify a serverUrl on startup. Please specify a serverUrl and try again. See documentation for more information https://github.com/lisajamhoury/simple-peer-wrapper',\n      );\n    }\n\n    this.debug && console.log('connecting socket to ' + serverUrl);\n    this.socket = io.connect(serverUrl);\n\n    this.peerClient = new SimplePeerClientWrapper(\n      this.socket,\n      this.debug,\n      simplePeerOptions,\n    );\n\n    if (typeof stream !== 'undefined') {\n      this.peerClient.setlocalStream(stream);\n    }\n\n    this._initSocket();\n  }\n\n  _initSocket() {\n    this.socket.on('created', (room) => this._handleCreated(room));\n    this.socket.on('full', (room) => this._handleFullRoom(room));\n    this.socket.on('join', (room) => this._handleJoinRoom(room));\n    this.socket.on('joined', (room) => this._handleJoinedRoom(room));\n    this.socket.on('initiate peer', (room) =>\n      this._handleInitPeer(room),\n    );\n    this.socket.on('sending signal', (message) =>\n      this._handleSendSignal(message),\n    );\n    this.socket.on('log', (array) => this._handleLog(array));\n    this.socket.on('message', (message) =>\n      this._handleMessage(message),\n    );\n    this.socket.on('simple peer options', (options) =>\n      this._setSimplePeerOptionsFromServer(options),\n    );\n\n    this._startSocketCommunication();\n  }\n\n  // starts socket client communication with signal server automatically\n  _startSocketCommunication() {\n    this.socket.emit('create or join');\n    this.debug && console.log('Attempted to create or join room');\n  }\n\n  _handleCreated(room) {\n    this.debug && console.log('Created room ' + room);\n  }\n\n  // room only holds two clients, can be changed in signal_socket.js\n  _handleFullRoom(room) {\n    this.debug && console.log('Room ' + room + ' is full');\n  }\n\n  // called by initiator client only\n  _handleJoinRoom(room) {\n    this.debug &&\n      console.log('Another peer made a request to join room ' + room);\n    this.debug &&\n      console.log('This peer is the initiator of room ' + room + '!');\n\n    this._logConnection(room, true, true, false);\n    if (this.peerClient.initPeerRequest) {\n      this.debug && console.log('initing peer from handle join');\n      this.peerClient.init();\n    }\n  }\n\n  // called by non-initiator client\n  _handleJoinedRoom(room) {\n    this.debug && console.log('joined: ' + room);\n\n    this._logConnection(room, false, true, false);\n    if (this.peerClient.initPeerRequest) {\n      this.debug && console.log('initing peer from handle joined');\n      this.peerClient.init();\n    }\n  }\n\n  _logConnection(_room, _initiator, _roomReady, _peerStarted) {\n    this.debug && console.log('logging connection');\n    const newConnection = {\n      room: _room, // socket.io server room\n      initiator: _initiator, // client initiates the communication\n      roomReady: _roomReady, // socket.io room is created or joined\n      peerStarted: _peerStarted, // the peer connection is started\n    };\n\n    this.peerClient.connections.push(newConnection);\n  }\n\n  // logs messages from server\n  _handleLog(array) {\n    log.apply(console, array);\n  }\n\n  _handleInitPeer(room) {\n    const connection = this._findConnection(room);\n    this.peerClient.attemptPeerStart(connection);\n  }\n\n  _handleSendSignal(message) {\n    this.debug && console.log('receiving simple signal data');\n    const connection = this._findConnection(message.room);\n\n    if (!connection.peerStarted) {\n      this.debug && console.log('Creating peer from messages!');\n      this.peerClient.createPeerConnection(connection);\n      connection.peer.signal(message.data);\n    } else {\n      connection.peer.signal(message.data);\n    }\n  }\n\n  _findConnection(room) {\n    let connection = null;\n\n    for (let i = 0; i < this.peerClient.connections.length; i++) {\n      if (this.peerClient.connections[i].room === room) {\n        connection = this.peerClient.connections[i];\n      }\n    }\n\n    if (connection === null) {\n      this.debug && console.log('UT OH THAT CONNECTION DOESNT EXIST');\n    } else {\n      this.debug &&\n        console.log('found the connection for room: ' + room);\n    }\n\n    return connection;\n  }\n\n  // This client receives a message\n  _handleMessage(message) {\n    this.debug && console.log('MESSAGE ' + message);\n\n    if (message.type) {\n      this.debug && console.log('received msg typ ' + message.type);\n    } else {\n      this.debug &&\n        console.log('Client received message: ' + message);\n    }\n\n    // TO DO HANDLE BYE\n    // } else if (message === 'bye' && peerStarted) {\n    //   handleRemoteHangup();\n  }\n\n  _emitSocketMessage(message) {\n    this.debug && console.log('Client sending message: ', message);\n    this.socket.emit('message', message);\n  }\n\n  _setSimplePeerOptionsFromServer(options) {\n    this.debug &&\n      console.log('Setting Simple Peer Options from Server.');\n    this.peerClient.simplePeerOptions = options;\n  }\n}\n\nmodule.exports = SocketIOClientWrapper;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}