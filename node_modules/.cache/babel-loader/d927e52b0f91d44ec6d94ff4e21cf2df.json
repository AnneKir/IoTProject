{"ast":null,"code":"import { Subject } from '../Subject';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function repeatWhen(notifier) {\n  return operate(function (source, subscriber) {\n    var innerSub;\n    var syncResub = false;\n    var completions$;\n    var isNotifierComplete = false;\n    var isMainComplete = false;\n    var checkComplete = function () {\n      return isMainComplete && isNotifierComplete && (subscriber.complete(), true);\n    };\n    var getCompletionSubject = function () {\n      if (!completions$) {\n        completions$ = new Subject();\n        notifier(completions$).subscribe(createOperatorSubscriber(subscriber, function () {\n          if (innerSub) {\n            subscribeForRepeatWhen();\n          } else {\n            syncResub = true;\n          }\n        }, function () {\n          isNotifierComplete = true;\n          checkComplete();\n        }));\n      }\n      return completions$;\n    };\n    var subscribeForRepeatWhen = function () {\n      isMainComplete = false;\n      innerSub = source.subscribe(createOperatorSubscriber(subscriber, undefined, function () {\n        isMainComplete = true;\n        !checkComplete() && getCompletionSubject().next();\n      }));\n      if (syncResub) {\n        innerSub.unsubscribe();\n        innerSub = null;\n        syncResub = false;\n        subscribeForRepeatWhen();\n      }\n    };\n    subscribeForRepeatWhen();\n  });\n}","map":{"version":3,"mappings":"AACA,SAASA,OAAO,QAAQ,YAAY;AAIpC,SAASC,OAAO,QAAQ,cAAc;AACtC,SAASC,wBAAwB,QAAQ,sBAAsB;AAmC/D,OAAM,SAAUC,UAAU,CAAIC,QAA8D;EAC1F,OAAOH,OAAO,CAAC,UAACI,MAAM,EAAEC,UAAU;IAChC,IAAIC,QAA6B;IACjC,IAAIC,SAAS,GAAG,KAAK;IACrB,IAAIC,YAA2B;IAC/B,IAAIC,kBAAkB,GAAG,KAAK;IAC9B,IAAIC,cAAc,GAAG,KAAK;IAK1B,IAAMC,aAAa,GAAG;MAAM,qBAAc,IAAIF,kBAAkB,KAAKJ,UAAU,CAACO,QAAQ,EAAE,EAAE,IAAI,CAAC;IAArE,CAAqE;IAKjG,IAAMC,oBAAoB,GAAG;MAC3B,IAAI,CAACL,YAAY,EAAE;QACjBA,YAAY,GAAG,IAAIT,OAAO,EAAE;QAI5BI,QAAQ,CAACK,YAAY,CAAC,CAACM,SAAS,CAC9Bb,wBAAwB,CACtBI,UAAU,EACV;UACE,IAAIC,QAAQ,EAAE;YACZS,sBAAsB,EAAE;WACzB,MAAM;YAKLR,SAAS,GAAG,IAAI;;QAEpB,CAAC,EACD;UACEE,kBAAkB,GAAG,IAAI;UACzBE,aAAa,EAAE;QACjB,CAAC,CACF,CACF;;MAEH,OAAOH,YAAY;IACrB,CAAC;IAED,IAAMO,sBAAsB,GAAG;MAC7BL,cAAc,GAAG,KAAK;MAEtBJ,QAAQ,GAAGF,MAAM,CAACU,SAAS,CACzBb,wBAAwB,CAACI,UAAU,EAAEW,SAAS,EAAE;QAC9CN,cAAc,GAAG,IAAI;QAMrB,CAACC,aAAa,EAAE,IAAIE,oBAAoB,EAAE,CAACI,IAAI,EAAE;MACnD,CAAC,CAAC,CACH;MAED,IAAIV,SAAS,EAAE;QAKbD,QAAQ,CAACY,WAAW,EAAE;QAItBZ,QAAQ,GAAG,IAAI;QAEfC,SAAS,GAAG,KAAK;QAEjBQ,sBAAsB,EAAE;;IAE5B,CAAC;IAGDA,sBAAsB,EAAE;EAC1B,CAAC,CAAC;AACJ","names":["Subject","operate","createOperatorSubscriber","repeatWhen","notifier","source","subscriber","innerSub","syncResub","completions$","isNotifierComplete","isMainComplete","checkComplete","complete","getCompletionSubject","subscribe","subscribeForRepeatWhen","undefined","next","unsubscribe"],"sources":["C:\\Users\\Amali\\Desktop\\Building_the_IoT_w._P2P_and_Cloud_Computing\\IoTProject\\node_modules\\rxjs\\src\\internal\\operators\\repeatWhen.ts"],"sourcesContent":["import { Observable } from '../Observable';\r\nimport { Subject } from '../Subject';\r\nimport { Subscription } from '../Subscription';\r\n\r\nimport { MonoTypeOperatorFunction } from '../types';\r\nimport { operate } from '../util/lift';\r\nimport { createOperatorSubscriber } from './OperatorSubscriber';\r\n\r\n/**\r\n * Returns an Observable that mirrors the source Observable with the exception of a `complete`. If the source\r\n * Observable calls `complete`, this method will emit to the Observable returned from `notifier`. If that Observable\r\n * calls `complete` or `error`, then this method will call `complete` or `error` on the child subscription. Otherwise\r\n * this method will resubscribe to the source Observable.\r\n *\r\n * ![](repeatWhen.png)\r\n *\r\n * ## Example\r\n *\r\n * Repeat a message stream on click\r\n *\r\n * ```ts\r\n * import { of, fromEvent, repeatWhen } from 'rxjs';\r\n *\r\n * const source = of('Repeat message');\r\n * const documentClick$ = fromEvent(document, 'click');\r\n *\r\n * const result = source.pipe(repeatWhen(() => documentClick$));\r\n *\r\n * result.subscribe(data => console.log(data))\r\n * ```\r\n *\r\n * @see {@link repeat}\r\n * @see {@link retry}\r\n * @see {@link retryWhen}\r\n *\r\n * @param {function(notifications: Observable): Observable} notifier - Receives an Observable of notifications with\r\n * which a user can `complete` or `error`, aborting the repetition.\r\n * @return A function that returns an Observable that mirrors the source\r\n * Observable with the exception of a `complete`.\r\n * @deprecated Will be removed in v9 or v10. Use {@link repeat}'s `delay` option instead.\r\n */\r\nexport function repeatWhen<T>(notifier: (notifications: Observable<void>) => Observable<any>): MonoTypeOperatorFunction<T> {\r\n  return operate((source, subscriber) => {\r\n    let innerSub: Subscription | null;\r\n    let syncResub = false;\r\n    let completions$: Subject<void>;\r\n    let isNotifierComplete = false;\r\n    let isMainComplete = false;\r\n\r\n    /**\r\n     * Checks to see if we can complete the result, completes it, and returns `true` if it was completed.\r\n     */\r\n    const checkComplete = () => isMainComplete && isNotifierComplete && (subscriber.complete(), true);\r\n    /**\r\n     * Gets the subject to send errors through. If it doesn't exist,\r\n     * we know we need to setup the notifier.\r\n     */\r\n    const getCompletionSubject = () => {\r\n      if (!completions$) {\r\n        completions$ = new Subject();\r\n\r\n        // If the call to `notifier` throws, it will be caught by the OperatorSubscriber\r\n        // In the main subscription -- in `subscribeForRepeatWhen`.\r\n        notifier(completions$).subscribe(\r\n          createOperatorSubscriber(\r\n            subscriber,\r\n            () => {\r\n              if (innerSub) {\r\n                subscribeForRepeatWhen();\r\n              } else {\r\n                // If we don't have an innerSub yet, that's because the inner subscription\r\n                // call hasn't even returned yet. We've arrived here synchronously.\r\n                // So we flag that we want to resub, such that we can ensure finalization\r\n                // happens before we resubscribe.\r\n                syncResub = true;\r\n              }\r\n            },\r\n            () => {\r\n              isNotifierComplete = true;\r\n              checkComplete();\r\n            }\r\n          )\r\n        );\r\n      }\r\n      return completions$;\r\n    };\r\n\r\n    const subscribeForRepeatWhen = () => {\r\n      isMainComplete = false;\r\n\r\n      innerSub = source.subscribe(\r\n        createOperatorSubscriber(subscriber, undefined, () => {\r\n          isMainComplete = true;\r\n          // Check to see if we are complete, and complete if so.\r\n          // If we are not complete. Get the subject. This calls the `notifier` function.\r\n          // If that function fails, it will throw and `.next()` will not be reached on this\r\n          // line. The thrown error is caught by the _complete handler in this\r\n          // `OperatorSubscriber` and handled appropriately.\r\n          !checkComplete() && getCompletionSubject().next();\r\n        })\r\n      );\r\n\r\n      if (syncResub) {\r\n        // Ensure that the inner subscription is torn down before\r\n        // moving on to the next subscription in the synchronous case.\r\n        // If we don't do this here, all inner subscriptions will not be\r\n        // torn down until the entire observable is done.\r\n        innerSub.unsubscribe();\r\n        // It is important to null this out. Not only to free up memory, but\r\n        // to make sure code above knows we are in a subscribing state to\r\n        // handle synchronous resubscription.\r\n        innerSub = null;\r\n        // We may need to do this multiple times, so reset the flags.\r\n        syncResub = false;\r\n        // Resubscribe\r\n        subscribeForRepeatWhen();\r\n      }\r\n    };\r\n\r\n    // Start the subscription\r\n    subscribeForRepeatWhen();\r\n  });\r\n}\r\n"]},"metadata":{},"sourceType":"module"}