{"ast":null,"code":"import { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nimport { innerFrom } from '../observable/innerFrom';\nimport { noop } from '../util/noop';\nexport function skipUntil(notifier) {\n  return operate(function (source, subscriber) {\n    var taking = false;\n    var skipSubscriber = createOperatorSubscriber(subscriber, function () {\n      skipSubscriber === null || skipSubscriber === void 0 ? void 0 : skipSubscriber.unsubscribe();\n      taking = true;\n    }, noop);\n    innerFrom(notifier).subscribe(skipSubscriber);\n    source.subscribe(createOperatorSubscriber(subscriber, function (value) {\n      return taking && subscriber.next(value);\n    }));\n  });\n}","map":{"version":3,"mappings":"AAEA,SAASA,OAAO,QAAQ,cAAc;AACtC,SAASC,wBAAwB,QAAQ,sBAAsB;AAC/D,SAASC,SAAS,QAAQ,yBAAyB;AACnD,SAASC,IAAI,QAAQ,cAAc;AA4CnC,OAAM,SAAUC,SAAS,CAAIC,QAAyB;EACpD,OAAOL,OAAO,CAAC,UAACM,MAAM,EAAEC,UAAU;IAChC,IAAIC,MAAM,GAAG,KAAK;IAElB,IAAMC,cAAc,GAAGR,wBAAwB,CAC7CM,UAAU,EACV;MACEE,cAAc,aAAdA,cAAc,uBAAdA,cAAc,CAAEC,WAAW,EAAE;MAC7BF,MAAM,GAAG,IAAI;IACf,CAAC,EACDL,IAAI,CACL;IAEDD,SAAS,CAACG,QAAQ,CAAC,CAACM,SAAS,CAACF,cAAc,CAAC;IAE7CH,MAAM,CAACK,SAAS,CAACV,wBAAwB,CAACM,UAAU,EAAE,UAACK,KAAK;MAAK,aAAM,IAAIL,UAAU,CAACM,IAAI,CAACD,KAAK,CAAC;IAAhC,CAAgC,CAAC,CAAC;EACrG,CAAC,CAAC;AACJ","names":["operate","createOperatorSubscriber","innerFrom","noop","skipUntil","notifier","source","subscriber","taking","skipSubscriber","unsubscribe","subscribe","value","next"],"sources":["C:\\Users\\Amali\\Desktop\\Building_the_IoT_w._P2P_and_Cloud_Computing\\IoTProject\\node_modules\\rxjs\\src\\internal\\operators\\skipUntil.ts"],"sourcesContent":["import { Observable } from '../Observable';\r\nimport { MonoTypeOperatorFunction } from '../types';\r\nimport { operate } from '../util/lift';\r\nimport { createOperatorSubscriber } from './OperatorSubscriber';\r\nimport { innerFrom } from '../observable/innerFrom';\r\nimport { noop } from '../util/noop';\r\n\r\n/**\r\n * Returns an Observable that skips items emitted by the source Observable until a second Observable emits an item.\r\n *\r\n * The `skipUntil` operator causes the observable stream to skip the emission of values until the passed in observable emits the first value.\r\n * This can be particularly useful in combination with user interactions, responses of http requests or waiting for specific times to pass by.\r\n *\r\n * ![](skipUntil.png)\r\n *\r\n * Internally the `skipUntil` operator subscribes to the passed in observable (in the following called *notifier*) in order to recognize the emission\r\n * of its first value. When this happens, the operator unsubscribes from the *notifier* and starts emitting the values of the *source*\r\n * observable. It will never let the *source* observable emit any values if the *notifier* completes or throws an error without emitting\r\n * a value before.\r\n *\r\n * ## Example\r\n *\r\n * In the following example, all emitted values of the interval observable are skipped until the user clicks anywhere within the page\r\n *\r\n * ```ts\r\n * import { interval, fromEvent, skipUntil } from 'rxjs';\r\n *\r\n * const intervalObservable = interval(1000);\r\n * const click = fromEvent(document, 'click');\r\n *\r\n * const emitAfterClick = intervalObservable.pipe(\r\n *   skipUntil(click)\r\n * );\r\n * // clicked at 4.6s. output: 5...6...7...8........ or\r\n * // clicked at 7.3s. output: 8...9...10..11.......\r\n * emitAfterClick.subscribe(value => console.log(value));\r\n * ```\r\n *\r\n * @see {@link last}\r\n * @see {@link skip}\r\n * @see {@link skipWhile}\r\n * @see {@link skipLast}\r\n *\r\n * @param {Observable} notifier - The second Observable that has to emit an item before the source Observable's elements begin to\r\n * be mirrored by the resulting Observable.\r\n * @return A function that returns an Observable that skips items from the\r\n * source Observable until the second Observable emits an item, then emits the\r\n * remaining items.\r\n */\r\nexport function skipUntil<T>(notifier: Observable<any>): MonoTypeOperatorFunction<T> {\r\n  return operate((source, subscriber) => {\r\n    let taking = false;\r\n\r\n    const skipSubscriber = createOperatorSubscriber(\r\n      subscriber,\r\n      () => {\r\n        skipSubscriber?.unsubscribe();\r\n        taking = true;\r\n      },\r\n      noop\r\n    );\r\n\r\n    innerFrom(notifier).subscribe(skipSubscriber);\r\n\r\n    source.subscribe(createOperatorSubscriber(subscriber, (value) => taking && subscriber.next(value)));\r\n  });\r\n}\r\n"]},"metadata":{},"sourceType":"module"}