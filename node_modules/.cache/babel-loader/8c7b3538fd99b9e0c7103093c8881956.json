{"ast":null,"code":"import { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { filter } from './filter';\nimport { throwIfEmpty } from './throwIfEmpty';\nimport { defaultIfEmpty } from './defaultIfEmpty';\nimport { take } from './take';\nexport function elementAt(index, defaultValue) {\n  if (index < 0) {\n    throw new ArgumentOutOfRangeError();\n  }\n  var hasDefaultValue = arguments.length >= 2;\n  return function (source) {\n    return source.pipe(filter(function (v, i) {\n      return i === index;\n    }), take(1), hasDefaultValue ? defaultIfEmpty(defaultValue) : throwIfEmpty(function () {\n      return new ArgumentOutOfRangeError();\n    }));\n  };\n}","map":{"version":3,"mappings":"AAAA,SAASA,uBAAuB,QAAQ,iCAAiC;AAGzE,SAASC,MAAM,QAAQ,UAAU;AACjC,SAASC,YAAY,QAAQ,gBAAgB;AAC7C,SAASC,cAAc,QAAQ,kBAAkB;AACjD,SAASC,IAAI,QAAQ,QAAQ;AAkD7B,OAAM,SAAUC,SAAS,CAAWC,KAAa,EAAEC,YAAgB;EACjE,IAAID,KAAK,GAAG,CAAC,EAAE;IACb,MAAM,IAAIN,uBAAuB,EAAE;;EAErC,IAAMQ,eAAe,GAAGC,SAAS,CAACC,MAAM,IAAI,CAAC;EAC7C,OAAO,UAACC,MAAqB;IAC3B,aAAM,CAACC,IAAI,CACTX,MAAM,CAAC,UAACY,CAAC,EAAEC,CAAC;MAAK,QAAC,KAAKR,KAAK;IAAX,CAAW,CAAC,EAC7BF,IAAI,CAAC,CAAC,CAAC,EACPI,eAAe,GAAGL,cAAc,CAACI,YAAa,CAAC,GAAGL,YAAY,CAAC;MAAM,WAAIF,uBAAuB,EAAE;IAA7B,CAA6B,CAAC,CACpG;EAJD,CAIC;AACL","names":["ArgumentOutOfRangeError","filter","throwIfEmpty","defaultIfEmpty","take","elementAt","index","defaultValue","hasDefaultValue","arguments","length","source","pipe","v","i"],"sources":["C:\\Users\\Amali\\Desktop\\Building_the_IoT_w._P2P_and_Cloud_Computing\\IoTProject\\node_modules\\rxjs\\src\\internal\\operators\\elementAt.ts"],"sourcesContent":["import { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\r\nimport { Observable } from '../Observable';\r\nimport { OperatorFunction } from '../types';\r\nimport { filter } from './filter';\r\nimport { throwIfEmpty } from './throwIfEmpty';\r\nimport { defaultIfEmpty } from './defaultIfEmpty';\r\nimport { take } from './take';\r\n\r\n/**\r\n * Emits the single value at the specified `index` in a sequence of emissions\r\n * from the source Observable.\r\n *\r\n * <span class=\"informal\">Emits only the i-th value, then completes.</span>\r\n *\r\n * ![](elementAt.png)\r\n *\r\n * `elementAt` returns an Observable that emits the item at the specified\r\n * `index` in the source Observable, or a default value if that `index` is out\r\n * of range and the `default` argument is provided. If the `default` argument is\r\n * not given and the `index` is out of range, the output Observable will emit an\r\n * `ArgumentOutOfRangeError` error.\r\n *\r\n * ## Example\r\n *\r\n * Emit only the third click event\r\n *\r\n * ```ts\r\n * import { fromEvent, elementAt } from 'rxjs';\r\n *\r\n * const clicks = fromEvent(document, 'click');\r\n * const result = clicks.pipe(elementAt(2));\r\n * result.subscribe(x => console.log(x));\r\n *\r\n * // Results in:\r\n * // click 1 = nothing\r\n * // click 2 = nothing\r\n * // click 3 = MouseEvent object logged to console\r\n * ```\r\n *\r\n * @see {@link first}\r\n * @see {@link last}\r\n * @see {@link skip}\r\n * @see {@link single}\r\n * @see {@link take}\r\n *\r\n * @throws {ArgumentOutOfRangeError} When using `elementAt(i)`, it delivers an\r\n * ArgumentOutOfRangeError to the Observer's `error` callback if `i < 0` or the\r\n * Observable has completed before emitting the i-th `next` notification.\r\n *\r\n * @param {number} index Is the number `i` for the i-th source emission that has\r\n * happened since the subscription, starting from the number `0`.\r\n * @param {T} [defaultValue] The default value returned for missing indices.\r\n * @return A function that returns an Observable that emits a single item, if\r\n * it is found. Otherwise, it will emit the default value if given. If not, it\r\n * emits an error.\r\n */\r\nexport function elementAt<T, D = T>(index: number, defaultValue?: D): OperatorFunction<T, T | D> {\r\n  if (index < 0) {\r\n    throw new ArgumentOutOfRangeError();\r\n  }\r\n  const hasDefaultValue = arguments.length >= 2;\r\n  return (source: Observable<T>) =>\r\n    source.pipe(\r\n      filter((v, i) => i === index),\r\n      take(1),\r\n      hasDefaultValue ? defaultIfEmpty(defaultValue!) : throwIfEmpty(() => new ArgumentOutOfRangeError())\r\n    );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}