{"ast":null,"code":"import { not } from '../util/not';\nimport { filter } from '../operators/filter';\nimport { innerFrom } from './innerFrom';\nexport function partition(source, predicate, thisArg) {\n  return [filter(predicate, thisArg)(innerFrom(source)), filter(not(predicate, thisArg))(innerFrom(source))];\n}","map":{"version":3,"mappings":"AAAA,SAASA,GAAG,QAAQ,aAAa;AACjC,SAASC,MAAM,QAAQ,qBAAqB;AAG5C,SAASC,SAAS,QAAQ,aAAa;AA0EvC,OAAM,SAAUC,SAAS,CACvBC,MAA0B,EAC1BC,SAA0D,EAC1DC,OAAa;EAEb,OAAO,CAACL,MAAM,CAACI,SAAS,EAAEC,OAAO,CAAC,CAACJ,SAAS,CAACE,MAAM,CAAC,CAAC,EAAEH,MAAM,CAACD,GAAG,CAACK,SAAS,EAAEC,OAAO,CAAC,CAAC,CAACJ,SAAS,CAACE,MAAM,CAAC,CAAC,CAGxG;AACH","names":["not","filter","innerFrom","partition","source","predicate","thisArg"],"sources":["C:\\Users\\Amali\\Desktop\\Building_the_IoT_w._P2P_and_Cloud_Computing\\IoTProject\\node_modules\\rxjs\\src\\internal\\observable\\partition.ts"],"sourcesContent":["import { not } from '../util/not';\r\nimport { filter } from '../operators/filter';\r\nimport { ObservableInput } from '../types';\r\nimport { Observable } from '../Observable';\r\nimport { innerFrom } from './innerFrom';\r\n\r\n/** @deprecated Use a closure instead of a `thisArg`. Signatures accepting a `thisArg` will be removed in v8. */\r\nexport function partition<T, U extends T, A>(\r\n  source: ObservableInput<T>,\r\n  predicate: (this: A, value: T, index: number) => value is U,\r\n  thisArg: A\r\n): [Observable<U>, Observable<Exclude<T, U>>];\r\nexport function partition<T, U extends T>(\r\n  source: ObservableInput<T>,\r\n  predicate: (value: T, index: number) => value is U\r\n): [Observable<U>, Observable<Exclude<T, U>>];\r\n\r\n/** @deprecated Use a closure instead of a `thisArg`. Signatures accepting a `thisArg` will be removed in v8. */\r\nexport function partition<T, A>(\r\n  source: ObservableInput<T>,\r\n  predicate: (this: A, value: T, index: number) => boolean,\r\n  thisArg: A\r\n): [Observable<T>, Observable<T>];\r\nexport function partition<T>(source: ObservableInput<T>, predicate: (value: T, index: number) => boolean): [Observable<T>, Observable<T>];\r\n\r\n/**\r\n * Splits the source Observable into two, one with values that satisfy a\r\n * predicate, and another with values that don't satisfy the predicate.\r\n *\r\n * <span class=\"informal\">It's like {@link filter}, but returns two Observables:\r\n * one like the output of {@link filter}, and the other with values that did not\r\n * pass the condition.</span>\r\n *\r\n * ![](partition.png)\r\n *\r\n * `partition` outputs an array with two Observables that partition the values\r\n * from the source Observable through the given `predicate` function. The first\r\n * Observable in that array emits source values for which the predicate argument\r\n * returns true. The second Observable emits source values for which the\r\n * predicate returns false. The first behaves like {@link filter} and the second\r\n * behaves like {@link filter} with the predicate negated.\r\n *\r\n * ## Example\r\n *\r\n * Partition a set of numbers into odds and evens observables\r\n *\r\n * ```ts\r\n * import { of, partition } from 'rxjs';\r\n *\r\n * const observableValues = of(1, 2, 3, 4, 5, 6);\r\n * const [evens$, odds$] = partition(observableValues, value => value % 2 === 0);\r\n *\r\n * odds$.subscribe(x => console.log('odds', x));\r\n * evens$.subscribe(x => console.log('evens', x));\r\n *\r\n * // Logs:\r\n * // odds 1\r\n * // odds 3\r\n * // odds 5\r\n * // evens 2\r\n * // evens 4\r\n * // evens 6\r\n * ```\r\n *\r\n * @see {@link filter}\r\n *\r\n * @param {function(value: T, index: number): boolean} predicate A function that\r\n * evaluates each value emitted by the source Observable. If it returns `true`,\r\n * the value is emitted on the first Observable in the returned array, if\r\n * `false` the value is emitted on the second Observable in the array. The\r\n * `index` parameter is the number `i` for the i-th source emission that has\r\n * happened since the subscription, starting from the number `0`.\r\n * @param {any} [thisArg] An optional argument to determine the value of `this`\r\n * in the `predicate` function.\r\n * @return {[Observable<T>, Observable<T>]} An array with two Observables: one\r\n * with values that passed the predicate, and another with values that did not\r\n * pass the predicate.\r\n */\r\nexport function partition<T>(\r\n  source: ObservableInput<T>,\r\n  predicate: (this: any, value: T, index: number) => boolean,\r\n  thisArg?: any\r\n): [Observable<T>, Observable<T>] {\r\n  return [filter(predicate, thisArg)(innerFrom(source)), filter(not(predicate, thisArg))(innerFrom(source))] as [\r\n    Observable<T>,\r\n    Observable<T>\r\n  ];\r\n}\r\n"]},"metadata":{},"sourceType":"module"}