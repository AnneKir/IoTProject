{"ast":null,"code":"import { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function find(predicate, thisArg) {\n  return operate(createFind(predicate, thisArg, 'value'));\n}\nexport function createFind(predicate, thisArg, emit) {\n  var findIndex = emit === 'index';\n  return function (source, subscriber) {\n    var index = 0;\n    source.subscribe(createOperatorSubscriber(subscriber, function (value) {\n      var i = index++;\n      if (predicate.call(thisArg, value, i, source)) {\n        subscriber.next(findIndex ? i : value);\n        subscriber.complete();\n      }\n    }, function () {\n      subscriber.next(findIndex ? -1 : undefined);\n      subscriber.complete();\n    }));\n  };\n}","map":{"version":3,"mappings":"AAGA,SAASA,OAAO,QAAQ,cAAc;AACtC,SAASC,wBAAwB,QAAQ,sBAAsB;AA4D/D,OAAM,SAAUC,IAAI,CAClBC,SAAsE,EACtEC,OAAa;EAEb,OAAOJ,OAAO,CAACK,UAAU,CAACF,SAAS,EAAEC,OAAO,EAAE,OAAO,CAAC,CAAC;AACzD;AAEA,OAAM,SAAUC,UAAU,CACxBF,SAAsE,EACtEC,OAAY,EACZE,IAAuB;EAEvB,IAAMC,SAAS,GAAGD,IAAI,KAAK,OAAO;EAClC,OAAO,UAACE,MAAqB,EAAEC,UAA2B;IACxD,IAAIC,KAAK,GAAG,CAAC;IACbF,MAAM,CAACG,SAAS,CACdV,wBAAwB,CACtBQ,UAAU,EACV,UAACG,KAAK;MACJ,IAAMC,CAAC,GAAGH,KAAK,EAAE;MACjB,IAAIP,SAAS,CAACW,IAAI,CAACV,OAAO,EAAEQ,KAAK,EAAEC,CAAC,EAAEL,MAAM,CAAC,EAAE;QAC7CC,UAAU,CAACM,IAAI,CAACR,SAAS,GAAGM,CAAC,GAAGD,KAAK,CAAC;QACtCH,UAAU,CAACO,QAAQ,EAAE;;IAEzB,CAAC,EACD;MACEP,UAAU,CAACM,IAAI,CAACR,SAAS,GAAG,CAAC,CAAC,GAAGU,SAAS,CAAC;MAC3CR,UAAU,CAACO,QAAQ,EAAE;IACvB,CAAC,CACF,CACF;EACH,CAAC;AACH","names":["operate","createOperatorSubscriber","find","predicate","thisArg","createFind","emit","findIndex","source","subscriber","index","subscribe","value","i","call","next","complete","undefined"],"sources":["C:\\Users\\Amali\\Desktop\\Building_the_IoT_w._P2P_and_Cloud_Computing\\IoTProject\\node_modules\\rxjs\\src\\internal\\operators\\find.ts"],"sourcesContent":["import { Observable } from '../Observable';\r\nimport { Subscriber } from '../Subscriber';\r\nimport { OperatorFunction, TruthyTypesOf } from '../types';\r\nimport { operate } from '../util/lift';\r\nimport { createOperatorSubscriber } from './OperatorSubscriber';\r\n\r\nexport function find<T>(predicate: BooleanConstructor): OperatorFunction<T, TruthyTypesOf<T>>;\r\n/** @deprecated Use a closure instead of a `thisArg`. Signatures accepting a `thisArg` will be removed in v8. */\r\nexport function find<T, S extends T, A>(\r\n  predicate: (this: A, value: T, index: number, source: Observable<T>) => value is S,\r\n  thisArg: A\r\n): OperatorFunction<T, S | undefined>;\r\nexport function find<T, S extends T>(\r\n  predicate: (value: T, index: number, source: Observable<T>) => value is S\r\n): OperatorFunction<T, S | undefined>;\r\n/** @deprecated Use a closure instead of a `thisArg`. Signatures accepting a `thisArg` will be removed in v8. */\r\nexport function find<T, A>(\r\n  predicate: (this: A, value: T, index: number, source: Observable<T>) => boolean,\r\n  thisArg: A\r\n): OperatorFunction<T, T | undefined>;\r\nexport function find<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean): OperatorFunction<T, T | undefined>;\r\n/**\r\n * Emits only the first value emitted by the source Observable that meets some\r\n * condition.\r\n *\r\n * <span class=\"informal\">Finds the first value that passes some test and emits\r\n * that.</span>\r\n *\r\n * ![](find.png)\r\n *\r\n * `find` searches for the first item in the source Observable that matches the\r\n * specified condition embodied by the `predicate`, and returns the first\r\n * occurrence in the source. Unlike {@link first}, the `predicate` is required\r\n * in `find`, and does not emit an error if a valid value is not found\r\n * (emits `undefined` instead).\r\n *\r\n * ## Example\r\n *\r\n * Find and emit the first click that happens on a DIV element\r\n *\r\n * ```ts\r\n * import { fromEvent, find } from 'rxjs';\r\n *\r\n * const div = document.createElement('div');\r\n * div.style.cssText = 'width: 200px; height: 200px; background: #09c;';\r\n * document.body.appendChild(div);\r\n *\r\n * const clicks = fromEvent(document, 'click');\r\n * const result = clicks.pipe(find(ev => (<HTMLElement>ev.target).tagName === 'DIV'));\r\n * result.subscribe(x => console.log(x));\r\n * ```\r\n *\r\n * @see {@link filter}\r\n * @see {@link first}\r\n * @see {@link findIndex}\r\n * @see {@link take}\r\n *\r\n * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate\r\n * A function called with each item to test for condition matching.\r\n * @param {any} [thisArg] An optional argument to determine the value of `this`\r\n * in the `predicate` function.\r\n * @return A function that returns an Observable that emits the first item that\r\n * matches the condition.\r\n */\r\nexport function find<T>(\r\n  predicate: (value: T, index: number, source: Observable<T>) => boolean,\r\n  thisArg?: any\r\n): OperatorFunction<T, T | undefined> {\r\n  return operate(createFind(predicate, thisArg, 'value'));\r\n}\r\n\r\nexport function createFind<T>(\r\n  predicate: (value: T, index: number, source: Observable<T>) => boolean,\r\n  thisArg: any,\r\n  emit: 'value' | 'index'\r\n) {\r\n  const findIndex = emit === 'index';\r\n  return (source: Observable<T>, subscriber: Subscriber<any>) => {\r\n    let index = 0;\r\n    source.subscribe(\r\n      createOperatorSubscriber(\r\n        subscriber,\r\n        (value) => {\r\n          const i = index++;\r\n          if (predicate.call(thisArg, value, i, source)) {\r\n            subscriber.next(findIndex ? i : value);\r\n            subscriber.complete();\r\n          }\r\n        },\r\n        () => {\r\n          subscriber.next(findIndex ? -1 : undefined);\r\n          subscriber.complete();\r\n        }\r\n      )\r\n    );\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}