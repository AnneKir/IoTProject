{"ast":null,"code":"import { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nimport { innerFrom } from '../observable/innerFrom';\nexport var defaultThrottleConfig = {\n  leading: true,\n  trailing: false\n};\nexport function throttle(durationSelector, config) {\n  if (config === void 0) {\n    config = defaultThrottleConfig;\n  }\n  return operate(function (source, subscriber) {\n    var leading = config.leading,\n      trailing = config.trailing;\n    var hasValue = false;\n    var sendValue = null;\n    var throttled = null;\n    var isComplete = false;\n    var endThrottling = function endThrottling() {\n      throttled === null || throttled === void 0 ? void 0 : throttled.unsubscribe();\n      throttled = null;\n      if (trailing) {\n        send();\n        isComplete && subscriber.complete();\n      }\n    };\n    var cleanupThrottling = function cleanupThrottling() {\n      throttled = null;\n      isComplete && subscriber.complete();\n    };\n    var startThrottle = function startThrottle(value) {\n      return throttled = innerFrom(durationSelector(value)).subscribe(createOperatorSubscriber(subscriber, endThrottling, cleanupThrottling));\n    };\n    var send = function send() {\n      if (hasValue) {\n        hasValue = false;\n        var value = sendValue;\n        sendValue = null;\n        subscriber.next(value);\n        !isComplete && startThrottle(value);\n      }\n    };\n    source.subscribe(createOperatorSubscriber(subscriber, function (value) {\n      hasValue = true;\n      sendValue = value;\n      !(throttled && !throttled.closed) && (leading ? send() : startThrottle(value));\n    }, function () {\n      isComplete = true;\n      !(trailing && hasValue && throttled && !throttled.closed) && subscriber.complete();\n    }));\n  });\n}","map":{"version":3,"mappings":"AAGA,SAASA,OAAO,QAAQ,cAAc;AACtC,SAASC,wBAAwB,QAAQ,sBAAsB;AAC/D,SAASC,SAAS,QAAQ,yBAAyB;AAOnD,OAAO,IAAMC,qBAAqB,GAAmB;EACnDC,OAAO,EAAE,IAAI;EACbC,QAAQ,EAAE;CACX;AAgDD,OAAM,SAAUC,QAAQ,CACtBC,gBAAoD,EACpDC,MAA8C;EAA9C;IAAAA,8BAA8C;EAAA;EAE9C,OAAOR,OAAO,CAAC,UAACS,MAAM,EAAEC,UAAU;IACxB,WAAO,GAAeF,MAAM,QAArB;MAAEH,QAAQ,GAAKG,MAAM,SAAX;IACzB,IAAIG,QAAQ,GAAG,KAAK;IACpB,IAAIC,SAAS,GAAa,IAAI;IAC9B,IAAIC,SAAS,GAAwB,IAAI;IACzC,IAAIC,UAAU,GAAG,KAAK;IAEtB,IAAMC,aAAa,GAAG,SAAhBA,aAAa,GAAG;MACpBF,SAAS,aAATA,SAAS,uBAATA,SAAS,CAAEG,WAAW,EAAE;MACxBH,SAAS,GAAG,IAAI;MAChB,IAAIR,QAAQ,EAAE;QACZY,IAAI,EAAE;QACNH,UAAU,IAAIJ,UAAU,CAACQ,QAAQ,EAAE;;IAEvC,CAAC;IAED,IAAMC,iBAAiB,GAAG,SAApBA,iBAAiB,GAAG;MACxBN,SAAS,GAAG,IAAI;MAChBC,UAAU,IAAIJ,UAAU,CAACQ,QAAQ,EAAE;IACrC,CAAC;IAED,IAAME,aAAa,GAAG,SAAhBA,aAAa,CAAIC,KAAQ;MAC7B,OAACR,SAAS,GAAGX,SAAS,CAACK,gBAAgB,CAACc,KAAK,CAAC,CAAC,CAACC,SAAS,CAACrB,wBAAwB,CAACS,UAAU,EAAEK,aAAa,EAAEI,iBAAiB,CAAC,CAAC;IAAjI,CAAkI;IAEpI,IAAMF,IAAI,GAAG,SAAPA,IAAI,GAAG;MACX,IAAIN,QAAQ,EAAE;QAIZA,QAAQ,GAAG,KAAK;QAChB,IAAMU,KAAK,GAAGT,SAAU;QACxBA,SAAS,GAAG,IAAI;QAEhBF,UAAU,CAACa,IAAI,CAACF,KAAK,CAAC;QACtB,CAACP,UAAU,IAAIM,aAAa,CAACC,KAAK,CAAC;;IAEvC,CAAC;IAEDZ,MAAM,CAACa,SAAS,CACdrB,wBAAwB,CACtBS,UAAU,EAMV,UAACW,KAAK;MACJV,QAAQ,GAAG,IAAI;MACfC,SAAS,GAAGS,KAAK;MACjB,EAAER,SAAS,IAAI,CAACA,SAAS,CAACW,MAAM,CAAC,KAAKpB,OAAO,GAAGa,IAAI,EAAE,GAAGG,aAAa,CAACC,KAAK,CAAC,CAAC;IAChF,CAAC,EACD;MACEP,UAAU,GAAG,IAAI;MACjB,EAAET,QAAQ,IAAIM,QAAQ,IAAIE,SAAS,IAAI,CAACA,SAAS,CAACW,MAAM,CAAC,IAAId,UAAU,CAACQ,QAAQ,EAAE;IACpF,CAAC,CACF,CACF;EACH,CAAC,CAAC;AACJ","names":["operate","createOperatorSubscriber","innerFrom","defaultThrottleConfig","leading","trailing","throttle","durationSelector","config","source","subscriber","hasValue","sendValue","throttled","isComplete","endThrottling","unsubscribe","send","complete","cleanupThrottling","startThrottle","value","subscribe","next","closed"],"sources":["C:\\Users\\Amali\\Desktop\\Building_the_IoT_w._P2P_and_Cloud_Computing\\IoTProject\\node_modules\\rxjs\\src\\internal\\operators\\throttle.ts"],"sourcesContent":["import { Subscription } from '../Subscription';\r\n\r\nimport { MonoTypeOperatorFunction, ObservableInput } from '../types';\r\nimport { operate } from '../util/lift';\r\nimport { createOperatorSubscriber } from './OperatorSubscriber';\r\nimport { innerFrom } from '../observable/innerFrom';\r\n\r\nexport interface ThrottleConfig {\r\n  leading?: boolean;\r\n  trailing?: boolean;\r\n}\r\n\r\nexport const defaultThrottleConfig: ThrottleConfig = {\r\n  leading: true,\r\n  trailing: false,\r\n};\r\n\r\n/**\r\n * Emits a value from the source Observable, then ignores subsequent source\r\n * values for a duration determined by another Observable, then repeats this\r\n * process.\r\n *\r\n * <span class=\"informal\">It's like {@link throttleTime}, but the silencing\r\n * duration is determined by a second Observable.</span>\r\n *\r\n * ![](throttle.svg)\r\n *\r\n * `throttle` emits the source Observable values on the output Observable\r\n * when its internal timer is disabled, and ignores source values when the timer\r\n * is enabled. Initially, the timer is disabled. As soon as the first source\r\n * value arrives, it is forwarded to the output Observable, and then the timer\r\n * is enabled by calling the `durationSelector` function with the source value,\r\n * which returns the \"duration\" Observable. When the duration Observable emits a\r\n * value, the timer is disabled, and this process repeats for the\r\n * next source value.\r\n *\r\n * ## Example\r\n *\r\n * Emit clicks at a rate of at most one click per second\r\n *\r\n * ```ts\r\n * import { fromEvent, throttle, interval } from 'rxjs';\r\n *\r\n * const clicks = fromEvent(document, 'click');\r\n * const result = clicks.pipe(throttle(() => interval(1000)));\r\n *\r\n * result.subscribe(x => console.log(x));\r\n * ```\r\n *\r\n * @see {@link audit}\r\n * @see {@link debounce}\r\n * @see {@link delayWhen}\r\n * @see {@link sample}\r\n * @see {@link throttleTime}\r\n *\r\n * @param durationSelector A function\r\n * that receives a value from the source Observable, for computing the silencing\r\n * duration for each source value, returned as an Observable or a Promise.\r\n * @param config a configuration object to define `leading` and `trailing` behavior. Defaults\r\n * to `{ leading: true, trailing: false }`.\r\n * @return A function that returns an Observable that performs the throttle\r\n * operation to limit the rate of emissions from the source.\r\n */\r\nexport function throttle<T>(\r\n  durationSelector: (value: T) => ObservableInput<any>,\r\n  config: ThrottleConfig = defaultThrottleConfig\r\n): MonoTypeOperatorFunction<T> {\r\n  return operate((source, subscriber) => {\r\n    const { leading, trailing } = config;\r\n    let hasValue = false;\r\n    let sendValue: T | null = null;\r\n    let throttled: Subscription | null = null;\r\n    let isComplete = false;\r\n\r\n    const endThrottling = () => {\r\n      throttled?.unsubscribe();\r\n      throttled = null;\r\n      if (trailing) {\r\n        send();\r\n        isComplete && subscriber.complete();\r\n      }\r\n    };\r\n\r\n    const cleanupThrottling = () => {\r\n      throttled = null;\r\n      isComplete && subscriber.complete();\r\n    };\r\n\r\n    const startThrottle = (value: T) =>\r\n      (throttled = innerFrom(durationSelector(value)).subscribe(createOperatorSubscriber(subscriber, endThrottling, cleanupThrottling)));\r\n\r\n    const send = () => {\r\n      if (hasValue) {\r\n        // Ensure we clear out our value and hasValue flag\r\n        // before we emit, otherwise reentrant code can cause\r\n        // issues here.\r\n        hasValue = false;\r\n        const value = sendValue!;\r\n        sendValue = null;\r\n        // Emit the value.\r\n        subscriber.next(value);\r\n        !isComplete && startThrottle(value);\r\n      }\r\n    };\r\n\r\n    source.subscribe(\r\n      createOperatorSubscriber(\r\n        subscriber,\r\n        // Regarding the presence of throttled.closed in the following\r\n        // conditions, if a synchronous duration selector is specified - weird,\r\n        // but legal - an already-closed subscription will be assigned to\r\n        // throttled, so the subscription's closed property needs to be checked,\r\n        // too.\r\n        (value) => {\r\n          hasValue = true;\r\n          sendValue = value;\r\n          !(throttled && !throttled.closed) && (leading ? send() : startThrottle(value));\r\n        },\r\n        () => {\r\n          isComplete = true;\r\n          !(trailing && hasValue && throttled && !throttled.closed) && subscriber.complete();\r\n        }\r\n      )\r\n    );\r\n  });\r\n}\r\n"]},"metadata":{},"sourceType":"module"}