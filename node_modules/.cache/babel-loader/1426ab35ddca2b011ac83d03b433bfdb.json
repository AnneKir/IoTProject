{"ast":null,"code":"import { __read, __spreadArray } from \"tslib\";\nimport { raceInit } from '../observable/race';\nimport { operate } from '../util/lift';\nimport { identity } from '../util/identity';\nexport function raceWith() {\n  var otherSources = [];\n  for (var _i = 0; _i < arguments.length; _i++) {\n    otherSources[_i] = arguments[_i];\n  }\n  return !otherSources.length ? identity : operate(function (source, subscriber) {\n    raceInit(__spreadArray([source], __read(otherSources)))(subscriber);\n  });\n}","map":{"version":3,"mappings":";AACA,SAASA,QAAQ,QAAQ,oBAAoB;AAC7C,SAASC,OAAO,QAAQ,cAAc;AACtC,SAASC,QAAQ,QAAQ,kBAAkB;AA4B3C,OAAM,SAAUC,QAAQ;EACtB;OAAA,UAA6C,EAA7CC,qBAA6C,EAA7CA,IAA6C;IAA7CC;;EAEA,OAAO,CAACA,YAAY,CAACC,MAAM,GACvBJ,QAAQ,GACRD,OAAO,CAAC,UAACM,MAAM,EAAEC,UAAU;IACzBR,QAAQ,gBAAiBO,MAAM,UAAKF,YAAY,GAAE,CAACG,UAAU,CAAC;EAChE,CAAC,CAAC;AACR","names":["raceInit","operate","identity","raceWith","_i","otherSources","length","source","subscriber"],"sources":["C:\\Users\\Amali\\Desktop\\Building_the_IoT_w._P2P_and_Cloud_Computing\\IoTProject\\node_modules\\rxjs\\src\\internal\\operators\\raceWith.ts"],"sourcesContent":["import { OperatorFunction, ObservableInputTuple } from '../types';\r\nimport { raceInit } from '../observable/race';\r\nimport { operate } from '../util/lift';\r\nimport { identity } from '../util/identity';\r\n\r\n/**\r\n * Creates an Observable that mirrors the first source Observable to emit a next,\r\n * error or complete notification from the combination of the Observable to which\r\n * the operator is applied and supplied Observables.\r\n *\r\n * ## Example\r\n *\r\n * ```ts\r\n * import { interval, map, raceWith } from 'rxjs';\r\n *\r\n * const obs1 = interval(7000).pipe(map(() => 'slow one'));\r\n * const obs2 = interval(3000).pipe(map(() => 'fast one'));\r\n * const obs3 = interval(5000).pipe(map(() => 'medium one'));\r\n *\r\n * obs1\r\n *   .pipe(raceWith(obs2, obs3))\r\n *   .subscribe(winner => console.log(winner));\r\n *\r\n * // Outputs\r\n * // a series of 'fast one'\r\n * ```\r\n *\r\n * @param otherSources Sources used to race for which Observable emits first.\r\n * @return A function that returns an Observable that mirrors the output of the\r\n * first Observable to emit an item.\r\n */\r\nexport function raceWith<T, A extends readonly unknown[]>(\r\n  ...otherSources: [...ObservableInputTuple<A>]\r\n): OperatorFunction<T, T | A[number]> {\r\n  return !otherSources.length\r\n    ? identity\r\n    : operate((source, subscriber) => {\r\n        raceInit<T | A[number]>([source, ...otherSources])(subscriber);\r\n      });\r\n}\r\n"]},"metadata":{},"sourceType":"module"}