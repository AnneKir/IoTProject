{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"C:/Users/Amali/Desktop/Building_the_IoT_w._P2P_and_Cloud_Computing/IoTProject/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"C:/Users/Amali/Desktop/Building_the_IoT_w._P2P_and_Cloud_Computing/IoTProject/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _assertThisInitialized = require(\"C:/Users/Amali/Desktop/Building_the_IoT_w._P2P_and_Cloud_Computing/IoTProject/node_modules/@babel/runtime/helpers/assertThisInitialized.js\").default;\nvar _inherits = require(\"C:/Users/Amali/Desktop/Building_the_IoT_w._P2P_and_Cloud_Computing/IoTProject/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"C:/Users/Amali/Desktop/Building_the_IoT_w._P2P_and_Cloud_Computing/IoTProject/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Socket = void 0;\nvar index_js_1 = require(\"./transports/index.js\");\nvar util_js_1 = require(\"./util.js\");\nvar parseqs_js_1 = require(\"./contrib/parseqs.js\");\nvar parseuri_js_1 = require(\"./contrib/parseuri.js\");\nvar debug_1 = __importDefault(require(\"debug\")); // debug()\nvar component_emitter_1 = require(\"@socket.io/component-emitter\");\nvar engine_io_parser_1 = require(\"engine.io-parser\");\nvar debug = (0, debug_1.default)(\"engine.io-client:socket\"); // debug()\nvar Socket = /*#__PURE__*/function (_component_emitter_1$) {\n  _inherits(Socket, _component_emitter_1$);\n  var _super = _createSuper(Socket);\n  /**\n   * Socket constructor.\n   *\n   * @param {String|Object} uri or options\n   * @param {Object} opts - options\n   * @api public\n   */\n  function Socket(uri) {\n    var _this;\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    _classCallCheck(this, Socket);\n    _this = _super.call(this);\n    if (uri && \"object\" === typeof uri) {\n      opts = uri;\n      uri = null;\n    }\n    if (uri) {\n      uri = (0, parseuri_js_1.parse)(uri);\n      opts.hostname = uri.host;\n      opts.secure = uri.protocol === \"https\" || uri.protocol === \"wss\";\n      opts.port = uri.port;\n      if (uri.query) opts.query = uri.query;\n    } else if (opts.host) {\n      opts.hostname = (0, parseuri_js_1.parse)(opts.host).host;\n    }\n    (0, util_js_1.installTimerFunctions)(_assertThisInitialized(_this), opts);\n    _this.secure = null != opts.secure ? opts.secure : typeof location !== \"undefined\" && \"https:\" === location.protocol;\n    if (opts.hostname && !opts.port) {\n      // if no port is specified manually, use the protocol default\n      opts.port = _this.secure ? \"443\" : \"80\";\n    }\n    _this.hostname = opts.hostname || (typeof location !== \"undefined\" ? location.hostname : \"localhost\");\n    _this.port = opts.port || (typeof location !== \"undefined\" && location.port ? location.port : _this.secure ? \"443\" : \"80\");\n    _this.transports = opts.transports || [\"polling\", \"websocket\"];\n    _this.readyState = \"\";\n    _this.writeBuffer = [];\n    _this.prevBufferLen = 0;\n    _this.opts = Object.assign({\n      path: \"/engine.io\",\n      agent: false,\n      withCredentials: false,\n      upgrade: true,\n      timestampParam: \"t\",\n      rememberUpgrade: false,\n      rejectUnauthorized: true,\n      perMessageDeflate: {\n        threshold: 1024\n      },\n      transportOptions: {},\n      closeOnBeforeunload: true\n    }, opts);\n    _this.opts.path = _this.opts.path.replace(/\\/$/, \"\") + \"/\";\n    if (typeof _this.opts.query === \"string\") {\n      _this.opts.query = (0, parseqs_js_1.decode)(_this.opts.query);\n    }\n    // set on handshake\n    _this.id = null;\n    _this.upgrades = null;\n    _this.pingInterval = null;\n    _this.pingTimeout = null;\n    // set on heartbeat\n    _this.pingTimeoutTimer = null;\n    if (typeof addEventListener === \"function\") {\n      if (_this.opts.closeOnBeforeunload) {\n        // Firefox closes the connection when the \"beforeunload\" event is emitted but not Chrome. This event listener\n        // ensures every browser behaves the same (no \"disconnect\" event at the Socket.IO level when the page is\n        // closed/reloaded)\n        _this.beforeunloadEventListener = function () {\n          if (_this.transport) {\n            // silently close the transport\n            _this.transport.removeAllListeners();\n            _this.transport.close();\n          }\n        };\n        addEventListener(\"beforeunload\", _this.beforeunloadEventListener, false);\n      }\n      if (_this.hostname !== \"localhost\") {\n        _this.offlineEventListener = function () {\n          _this.onClose(\"transport close\", {\n            description: \"network connection lost\"\n          });\n        };\n        addEventListener(\"offline\", _this.offlineEventListener, false);\n      }\n    }\n    _this.open();\n    return _this;\n  }\n  /**\n   * Creates transport of the given type.\n   *\n   * @param {String} transport name\n   * @return {Transport}\n   * @api private\n   */\n  _createClass(Socket, [{\n    key: \"createTransport\",\n    value: function createTransport(name) {\n      debug('creating transport \"%s\"', name);\n      var query = Object.assign({}, this.opts.query);\n      // append engine.io protocol identifier\n      query.EIO = engine_io_parser_1.protocol;\n      // transport name\n      query.transport = name;\n      // session id if we already have one\n      if (this.id) query.sid = this.id;\n      var opts = Object.assign({}, this.opts.transportOptions[name], this.opts, {\n        query: query,\n        socket: this,\n        hostname: this.hostname,\n        secure: this.secure,\n        port: this.port\n      });\n      debug(\"options: %j\", opts);\n      return new index_js_1.transports[name](opts);\n    }\n    /**\n     * Initializes transport to use and starts probe.\n     *\n     * @api private\n     */\n  }, {\n    key: \"open\",\n    value: function open() {\n      var _this2 = this;\n      var transport;\n      if (this.opts.rememberUpgrade && Socket.priorWebsocketSuccess && this.transports.indexOf(\"websocket\") !== -1) {\n        transport = \"websocket\";\n      } else if (0 === this.transports.length) {\n        // Emit error on next tick so it can be listened to\n        this.setTimeoutFn(function () {\n          _this2.emitReserved(\"error\", \"No transports available\");\n        }, 0);\n        return;\n      } else {\n        transport = this.transports[0];\n      }\n      this.readyState = \"opening\";\n      // Retry with the next transport if the transport is disabled (jsonp: false)\n      try {\n        transport = this.createTransport(transport);\n      } catch (e) {\n        debug(\"error while creating transport: %s\", e);\n        this.transports.shift();\n        this.open();\n        return;\n      }\n      transport.open();\n      this.setTransport(transport);\n    }\n    /**\n     * Sets the current transport. Disables the existing one (if any).\n     *\n     * @api private\n     */\n  }, {\n    key: \"setTransport\",\n    value: function setTransport(transport) {\n      var _this3 = this;\n      debug(\"setting transport %s\", transport.name);\n      if (this.transport) {\n        debug(\"clearing existing transport %s\", this.transport.name);\n        this.transport.removeAllListeners();\n      }\n      // set up transport\n      this.transport = transport;\n      // set up transport listeners\n      transport.on(\"drain\", this.onDrain.bind(this)).on(\"packet\", this.onPacket.bind(this)).on(\"error\", this.onError.bind(this)).on(\"close\", function (reason) {\n        return _this3.onClose(\"transport close\", reason);\n      });\n    }\n    /**\n     * Probes a transport.\n     *\n     * @param {String} transport name\n     * @api private\n     */\n  }, {\n    key: \"probe\",\n    value: function probe(name) {\n      var _this4 = this;\n      debug('probing transport \"%s\"', name);\n      var transport = this.createTransport(name);\n      var failed = false;\n      Socket.priorWebsocketSuccess = false;\n      var onTransportOpen = function onTransportOpen() {\n        if (failed) return;\n        debug('probe transport \"%s\" opened', name);\n        transport.send([{\n          type: \"ping\",\n          data: \"probe\"\n        }]);\n        transport.once(\"packet\", function (msg) {\n          if (failed) return;\n          if (\"pong\" === msg.type && \"probe\" === msg.data) {\n            debug('probe transport \"%s\" pong', name);\n            _this4.upgrading = true;\n            _this4.emitReserved(\"upgrading\", transport);\n            if (!transport) return;\n            Socket.priorWebsocketSuccess = \"websocket\" === transport.name;\n            debug('pausing current transport \"%s\"', _this4.transport.name);\n            _this4.transport.pause(function () {\n              if (failed) return;\n              if (\"closed\" === _this4.readyState) return;\n              debug(\"changing transport and sending upgrade packet\");\n              cleanup();\n              _this4.setTransport(transport);\n              transport.send([{\n                type: \"upgrade\"\n              }]);\n              _this4.emitReserved(\"upgrade\", transport);\n              transport = null;\n              _this4.upgrading = false;\n              _this4.flush();\n            });\n          } else {\n            debug('probe transport \"%s\" failed', name);\n            var err = new Error(\"probe error\");\n            // @ts-ignore\n            err.transport = transport.name;\n            _this4.emitReserved(\"upgradeError\", err);\n          }\n        });\n      };\n      function freezeTransport() {\n        if (failed) return;\n        // Any callback called by transport should be ignored since now\n        failed = true;\n        cleanup();\n        transport.close();\n        transport = null;\n      }\n      // Handle any error that happens while probing\n      var onerror = function onerror(err) {\n        var error = new Error(\"probe error: \" + err);\n        // @ts-ignore\n        error.transport = transport.name;\n        freezeTransport();\n        debug('probe transport \"%s\" failed because of error: %s', name, err);\n        _this4.emitReserved(\"upgradeError\", error);\n      };\n      function onTransportClose() {\n        onerror(\"transport closed\");\n      }\n      // When the socket is closed while we're probing\n      function onclose() {\n        onerror(\"socket closed\");\n      }\n      // When the socket is upgraded while we're probing\n      function onupgrade(to) {\n        if (transport && to.name !== transport.name) {\n          debug('\"%s\" works - aborting \"%s\"', to.name, transport.name);\n          freezeTransport();\n        }\n      }\n      // Remove all listeners on the transport and on self\n      var cleanup = function cleanup() {\n        transport.removeListener(\"open\", onTransportOpen);\n        transport.removeListener(\"error\", onerror);\n        transport.removeListener(\"close\", onTransportClose);\n        _this4.off(\"close\", onclose);\n        _this4.off(\"upgrading\", onupgrade);\n      };\n      transport.once(\"open\", onTransportOpen);\n      transport.once(\"error\", onerror);\n      transport.once(\"close\", onTransportClose);\n      this.once(\"close\", onclose);\n      this.once(\"upgrading\", onupgrade);\n      transport.open();\n    }\n    /**\n     * Called when connection is deemed open.\n     *\n     * @api private\n     */\n  }, {\n    key: \"onOpen\",\n    value: function onOpen() {\n      debug(\"socket open\");\n      this.readyState = \"open\";\n      Socket.priorWebsocketSuccess = \"websocket\" === this.transport.name;\n      this.emitReserved(\"open\");\n      this.flush();\n      // we check for `readyState` in case an `open`\n      // listener already closed the socket\n      if (\"open\" === this.readyState && this.opts.upgrade && this.transport.pause) {\n        debug(\"starting upgrade probes\");\n        var i = 0;\n        var l = this.upgrades.length;\n        for (; i < l; i++) {\n          this.probe(this.upgrades[i]);\n        }\n      }\n    }\n    /**\n     * Handles a packet.\n     *\n     * @api private\n     */\n  }, {\n    key: \"onPacket\",\n    value: function onPacket(packet) {\n      if (\"opening\" === this.readyState || \"open\" === this.readyState || \"closing\" === this.readyState) {\n        debug('socket receive: type \"%s\", data \"%s\"', packet.type, packet.data);\n        this.emitReserved(\"packet\", packet);\n        // Socket is live - any packet counts\n        this.emitReserved(\"heartbeat\");\n        switch (packet.type) {\n          case \"open\":\n            this.onHandshake(JSON.parse(packet.data));\n            break;\n          case \"ping\":\n            this.resetPingTimeout();\n            this.sendPacket(\"pong\");\n            this.emitReserved(\"ping\");\n            this.emitReserved(\"pong\");\n            break;\n          case \"error\":\n            var err = new Error(\"server error\");\n            // @ts-ignore\n            err.code = packet.data;\n            this.onError(err);\n            break;\n          case \"message\":\n            this.emitReserved(\"data\", packet.data);\n            this.emitReserved(\"message\", packet.data);\n            break;\n        }\n      } else {\n        debug('packet received with socket readyState \"%s\"', this.readyState);\n      }\n    }\n    /**\n     * Called upon handshake completion.\n     *\n     * @param {Object} data - handshake obj\n     * @api private\n     */\n  }, {\n    key: \"onHandshake\",\n    value: function onHandshake(data) {\n      this.emitReserved(\"handshake\", data);\n      this.id = data.sid;\n      this.transport.query.sid = data.sid;\n      this.upgrades = this.filterUpgrades(data.upgrades);\n      this.pingInterval = data.pingInterval;\n      this.pingTimeout = data.pingTimeout;\n      this.maxPayload = data.maxPayload;\n      this.onOpen();\n      // In case open handler closes socket\n      if (\"closed\" === this.readyState) return;\n      this.resetPingTimeout();\n    }\n    /**\n     * Sets and resets ping timeout timer based on server pings.\n     *\n     * @api private\n     */\n  }, {\n    key: \"resetPingTimeout\",\n    value: function resetPingTimeout() {\n      var _this5 = this;\n      this.clearTimeoutFn(this.pingTimeoutTimer);\n      this.pingTimeoutTimer = this.setTimeoutFn(function () {\n        _this5.onClose(\"ping timeout\");\n      }, this.pingInterval + this.pingTimeout);\n      if (this.opts.autoUnref) {\n        this.pingTimeoutTimer.unref();\n      }\n    }\n    /**\n     * Called on `drain` event\n     *\n     * @api private\n     */\n  }, {\n    key: \"onDrain\",\n    value: function onDrain() {\n      this.writeBuffer.splice(0, this.prevBufferLen);\n      // setting prevBufferLen = 0 is very important\n      // for example, when upgrading, upgrade packet is sent over,\n      // and a nonzero prevBufferLen could cause problems on `drain`\n      this.prevBufferLen = 0;\n      if (0 === this.writeBuffer.length) {\n        this.emitReserved(\"drain\");\n      } else {\n        this.flush();\n      }\n    }\n    /**\n     * Flush write buffers.\n     *\n     * @api private\n     */\n  }, {\n    key: \"flush\",\n    value: function flush() {\n      if (\"closed\" !== this.readyState && this.transport.writable && !this.upgrading && this.writeBuffer.length) {\n        var packets = this.getWritablePackets();\n        debug(\"flushing %d packets in socket\", packets.length);\n        this.transport.send(packets);\n        // keep track of current length of writeBuffer\n        // splice writeBuffer and callbackBuffer on `drain`\n        this.prevBufferLen = packets.length;\n        this.emitReserved(\"flush\");\n      }\n    }\n    /**\n     * Ensure the encoded size of the writeBuffer is below the maxPayload value sent by the server (only for HTTP\n     * long-polling)\n     *\n     * @private\n     */\n  }, {\n    key: \"getWritablePackets\",\n    value: function getWritablePackets() {\n      var shouldCheckPayloadSize = this.maxPayload && this.transport.name === \"polling\" && this.writeBuffer.length > 1;\n      if (!shouldCheckPayloadSize) {\n        return this.writeBuffer;\n      }\n      var payloadSize = 1; // first packet type\n      for (var i = 0; i < this.writeBuffer.length; i++) {\n        var data = this.writeBuffer[i].data;\n        if (data) {\n          payloadSize += (0, util_js_1.byteLength)(data);\n        }\n        if (i > 0 && payloadSize > this.maxPayload) {\n          debug(\"only send %d out of %d packets\", i, this.writeBuffer.length);\n          return this.writeBuffer.slice(0, i);\n        }\n        payloadSize += 2; // separator + packet type\n      }\n\n      debug(\"payload size is %d (max: %d)\", payloadSize, this.maxPayload);\n      return this.writeBuffer;\n    }\n    /**\n     * Sends a message.\n     *\n     * @param {String} message.\n     * @param {Function} callback function.\n     * @param {Object} options.\n     * @return {Socket} for chaining.\n     * @api public\n     */\n  }, {\n    key: \"write\",\n    value: function write(msg, options, fn) {\n      this.sendPacket(\"message\", msg, options, fn);\n      return this;\n    }\n  }, {\n    key: \"send\",\n    value: function send(msg, options, fn) {\n      this.sendPacket(\"message\", msg, options, fn);\n      return this;\n    }\n    /**\n     * Sends a packet.\n     *\n     * @param {String} packet type.\n     * @param {String} data.\n     * @param {Object} options.\n     * @param {Function} callback function.\n     * @api private\n     */\n  }, {\n    key: \"sendPacket\",\n    value: function sendPacket(type, data, options, fn) {\n      if (\"function\" === typeof data) {\n        fn = data;\n        data = undefined;\n      }\n      if (\"function\" === typeof options) {\n        fn = options;\n        options = null;\n      }\n      if (\"closing\" === this.readyState || \"closed\" === this.readyState) {\n        return;\n      }\n      options = options || {};\n      options.compress = false !== options.compress;\n      var packet = {\n        type: type,\n        data: data,\n        options: options\n      };\n      this.emitReserved(\"packetCreate\", packet);\n      this.writeBuffer.push(packet);\n      if (fn) this.once(\"flush\", fn);\n      this.flush();\n    }\n    /**\n     * Closes the connection.\n     *\n     * @api public\n     */\n  }, {\n    key: \"close\",\n    value: function close() {\n      var _this6 = this;\n      var close = function close() {\n        _this6.onClose(\"forced close\");\n        debug(\"socket closing - telling transport to close\");\n        _this6.transport.close();\n      };\n      var cleanupAndClose = function cleanupAndClose() {\n        _this6.off(\"upgrade\", cleanupAndClose);\n        _this6.off(\"upgradeError\", cleanupAndClose);\n        close();\n      };\n      var waitForUpgrade = function waitForUpgrade() {\n        // wait for upgrade to finish since we can't send packets while pausing a transport\n        _this6.once(\"upgrade\", cleanupAndClose);\n        _this6.once(\"upgradeError\", cleanupAndClose);\n      };\n      if (\"opening\" === this.readyState || \"open\" === this.readyState) {\n        this.readyState = \"closing\";\n        if (this.writeBuffer.length) {\n          this.once(\"drain\", function () {\n            if (_this6.upgrading) {\n              waitForUpgrade();\n            } else {\n              close();\n            }\n          });\n        } else if (this.upgrading) {\n          waitForUpgrade();\n        } else {\n          close();\n        }\n      }\n      return this;\n    }\n    /**\n     * Called upon transport error\n     *\n     * @api private\n     */\n  }, {\n    key: \"onError\",\n    value: function onError(err) {\n      debug(\"socket error %j\", err);\n      Socket.priorWebsocketSuccess = false;\n      this.emitReserved(\"error\", err);\n      this.onClose(\"transport error\", err);\n    }\n    /**\n     * Called upon transport close.\n     *\n     * @api private\n     */\n  }, {\n    key: \"onClose\",\n    value: function onClose(reason, description) {\n      if (\"opening\" === this.readyState || \"open\" === this.readyState || \"closing\" === this.readyState) {\n        debug('socket close with reason: \"%s\"', reason);\n        // clear timers\n        this.clearTimeoutFn(this.pingTimeoutTimer);\n        // stop event from firing again for transport\n        this.transport.removeAllListeners(\"close\");\n        // ensure transport won't stay open\n        this.transport.close();\n        // ignore further transport communication\n        this.transport.removeAllListeners();\n        if (typeof removeEventListener === \"function\") {\n          removeEventListener(\"beforeunload\", this.beforeunloadEventListener, false);\n          removeEventListener(\"offline\", this.offlineEventListener, false);\n        }\n        // set ready state\n        this.readyState = \"closed\";\n        // clear session id\n        this.id = null;\n        // emit close event\n        this.emitReserved(\"close\", reason, description);\n        // clean buffers after, so users can still\n        // grab the buffers on `close` event\n        this.writeBuffer = [];\n        this.prevBufferLen = 0;\n      }\n    }\n    /**\n     * Filters upgrades, returning only those matching client transports.\n     *\n     * @param {Array} server upgrades\n     * @api private\n     *\n     */\n  }, {\n    key: \"filterUpgrades\",\n    value: function filterUpgrades(upgrades) {\n      var filteredUpgrades = [];\n      var i = 0;\n      var j = upgrades.length;\n      for (; i < j; i++) {\n        if (~this.transports.indexOf(upgrades[i])) filteredUpgrades.push(upgrades[i]);\n      }\n      return filteredUpgrades;\n    }\n  }]);\n  return Socket;\n}(component_emitter_1.Emitter);\nexports.Socket = Socket;\nSocket.protocol = engine_io_parser_1.protocol;","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","Socket","index_js_1","require","util_js_1","parseqs_js_1","parseuri_js_1","debug_1","component_emitter_1","engine_io_parser_1","debug","default","uri","opts","parse","hostname","host","secure","protocol","port","query","installTimerFunctions","location","transports","readyState","writeBuffer","prevBufferLen","assign","path","agent","withCredentials","upgrade","timestampParam","rememberUpgrade","rejectUnauthorized","perMessageDeflate","threshold","transportOptions","closeOnBeforeunload","replace","decode","id","upgrades","pingInterval","pingTimeout","pingTimeoutTimer","addEventListener","beforeunloadEventListener","transport","removeAllListeners","close","offlineEventListener","onClose","description","open","name","EIO","sid","socket","priorWebsocketSuccess","indexOf","length","setTimeoutFn","emitReserved","createTransport","e","shift","setTransport","on","onDrain","bind","onPacket","onError","reason","failed","onTransportOpen","send","type","data","once","msg","upgrading","pause","cleanup","flush","err","Error","freezeTransport","onerror","error","onTransportClose","onclose","onupgrade","to","removeListener","off","i","l","probe","packet","onHandshake","JSON","resetPingTimeout","sendPacket","code","filterUpgrades","maxPayload","onOpen","clearTimeoutFn","autoUnref","unref","splice","writable","packets","getWritablePackets","shouldCheckPayloadSize","payloadSize","byteLength","slice","options","fn","undefined","compress","push","cleanupAndClose","waitForUpgrade","removeEventListener","filteredUpgrades","j","Emitter"],"sources":["C:/Users/Amali/Desktop/Building_the_IoT_w._P2P_and_Cloud_Computing/IoTProject/node_modules/engine.io-client/build/cjs/socket.js"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Socket = void 0;\nconst index_js_1 = require(\"./transports/index.js\");\nconst util_js_1 = require(\"./util.js\");\nconst parseqs_js_1 = require(\"./contrib/parseqs.js\");\nconst parseuri_js_1 = require(\"./contrib/parseuri.js\");\nconst debug_1 = __importDefault(require(\"debug\")); // debug()\nconst component_emitter_1 = require(\"@socket.io/component-emitter\");\nconst engine_io_parser_1 = require(\"engine.io-parser\");\nconst debug = (0, debug_1.default)(\"engine.io-client:socket\"); // debug()\nclass Socket extends component_emitter_1.Emitter {\n    /**\n     * Socket constructor.\n     *\n     * @param {String|Object} uri or options\n     * @param {Object} opts - options\n     * @api public\n     */\n    constructor(uri, opts = {}) {\n        super();\n        if (uri && \"object\" === typeof uri) {\n            opts = uri;\n            uri = null;\n        }\n        if (uri) {\n            uri = (0, parseuri_js_1.parse)(uri);\n            opts.hostname = uri.host;\n            opts.secure = uri.protocol === \"https\" || uri.protocol === \"wss\";\n            opts.port = uri.port;\n            if (uri.query)\n                opts.query = uri.query;\n        }\n        else if (opts.host) {\n            opts.hostname = (0, parseuri_js_1.parse)(opts.host).host;\n        }\n        (0, util_js_1.installTimerFunctions)(this, opts);\n        this.secure =\n            null != opts.secure\n                ? opts.secure\n                : typeof location !== \"undefined\" && \"https:\" === location.protocol;\n        if (opts.hostname && !opts.port) {\n            // if no port is specified manually, use the protocol default\n            opts.port = this.secure ? \"443\" : \"80\";\n        }\n        this.hostname =\n            opts.hostname ||\n                (typeof location !== \"undefined\" ? location.hostname : \"localhost\");\n        this.port =\n            opts.port ||\n                (typeof location !== \"undefined\" && location.port\n                    ? location.port\n                    : this.secure\n                        ? \"443\"\n                        : \"80\");\n        this.transports = opts.transports || [\"polling\", \"websocket\"];\n        this.readyState = \"\";\n        this.writeBuffer = [];\n        this.prevBufferLen = 0;\n        this.opts = Object.assign({\n            path: \"/engine.io\",\n            agent: false,\n            withCredentials: false,\n            upgrade: true,\n            timestampParam: \"t\",\n            rememberUpgrade: false,\n            rejectUnauthorized: true,\n            perMessageDeflate: {\n                threshold: 1024\n            },\n            transportOptions: {},\n            closeOnBeforeunload: true\n        }, opts);\n        this.opts.path = this.opts.path.replace(/\\/$/, \"\") + \"/\";\n        if (typeof this.opts.query === \"string\") {\n            this.opts.query = (0, parseqs_js_1.decode)(this.opts.query);\n        }\n        // set on handshake\n        this.id = null;\n        this.upgrades = null;\n        this.pingInterval = null;\n        this.pingTimeout = null;\n        // set on heartbeat\n        this.pingTimeoutTimer = null;\n        if (typeof addEventListener === \"function\") {\n            if (this.opts.closeOnBeforeunload) {\n                // Firefox closes the connection when the \"beforeunload\" event is emitted but not Chrome. This event listener\n                // ensures every browser behaves the same (no \"disconnect\" event at the Socket.IO level when the page is\n                // closed/reloaded)\n                this.beforeunloadEventListener = () => {\n                    if (this.transport) {\n                        // silently close the transport\n                        this.transport.removeAllListeners();\n                        this.transport.close();\n                    }\n                };\n                addEventListener(\"beforeunload\", this.beforeunloadEventListener, false);\n            }\n            if (this.hostname !== \"localhost\") {\n                this.offlineEventListener = () => {\n                    this.onClose(\"transport close\", {\n                        description: \"network connection lost\"\n                    });\n                };\n                addEventListener(\"offline\", this.offlineEventListener, false);\n            }\n        }\n        this.open();\n    }\n    /**\n     * Creates transport of the given type.\n     *\n     * @param {String} transport name\n     * @return {Transport}\n     * @api private\n     */\n    createTransport(name) {\n        debug('creating transport \"%s\"', name);\n        const query = Object.assign({}, this.opts.query);\n        // append engine.io protocol identifier\n        query.EIO = engine_io_parser_1.protocol;\n        // transport name\n        query.transport = name;\n        // session id if we already have one\n        if (this.id)\n            query.sid = this.id;\n        const opts = Object.assign({}, this.opts.transportOptions[name], this.opts, {\n            query,\n            socket: this,\n            hostname: this.hostname,\n            secure: this.secure,\n            port: this.port\n        });\n        debug(\"options: %j\", opts);\n        return new index_js_1.transports[name](opts);\n    }\n    /**\n     * Initializes transport to use and starts probe.\n     *\n     * @api private\n     */\n    open() {\n        let transport;\n        if (this.opts.rememberUpgrade &&\n            Socket.priorWebsocketSuccess &&\n            this.transports.indexOf(\"websocket\") !== -1) {\n            transport = \"websocket\";\n        }\n        else if (0 === this.transports.length) {\n            // Emit error on next tick so it can be listened to\n            this.setTimeoutFn(() => {\n                this.emitReserved(\"error\", \"No transports available\");\n            }, 0);\n            return;\n        }\n        else {\n            transport = this.transports[0];\n        }\n        this.readyState = \"opening\";\n        // Retry with the next transport if the transport is disabled (jsonp: false)\n        try {\n            transport = this.createTransport(transport);\n        }\n        catch (e) {\n            debug(\"error while creating transport: %s\", e);\n            this.transports.shift();\n            this.open();\n            return;\n        }\n        transport.open();\n        this.setTransport(transport);\n    }\n    /**\n     * Sets the current transport. Disables the existing one (if any).\n     *\n     * @api private\n     */\n    setTransport(transport) {\n        debug(\"setting transport %s\", transport.name);\n        if (this.transport) {\n            debug(\"clearing existing transport %s\", this.transport.name);\n            this.transport.removeAllListeners();\n        }\n        // set up transport\n        this.transport = transport;\n        // set up transport listeners\n        transport\n            .on(\"drain\", this.onDrain.bind(this))\n            .on(\"packet\", this.onPacket.bind(this))\n            .on(\"error\", this.onError.bind(this))\n            .on(\"close\", reason => this.onClose(\"transport close\", reason));\n    }\n    /**\n     * Probes a transport.\n     *\n     * @param {String} transport name\n     * @api private\n     */\n    probe(name) {\n        debug('probing transport \"%s\"', name);\n        let transport = this.createTransport(name);\n        let failed = false;\n        Socket.priorWebsocketSuccess = false;\n        const onTransportOpen = () => {\n            if (failed)\n                return;\n            debug('probe transport \"%s\" opened', name);\n            transport.send([{ type: \"ping\", data: \"probe\" }]);\n            transport.once(\"packet\", msg => {\n                if (failed)\n                    return;\n                if (\"pong\" === msg.type && \"probe\" === msg.data) {\n                    debug('probe transport \"%s\" pong', name);\n                    this.upgrading = true;\n                    this.emitReserved(\"upgrading\", transport);\n                    if (!transport)\n                        return;\n                    Socket.priorWebsocketSuccess = \"websocket\" === transport.name;\n                    debug('pausing current transport \"%s\"', this.transport.name);\n                    this.transport.pause(() => {\n                        if (failed)\n                            return;\n                        if (\"closed\" === this.readyState)\n                            return;\n                        debug(\"changing transport and sending upgrade packet\");\n                        cleanup();\n                        this.setTransport(transport);\n                        transport.send([{ type: \"upgrade\" }]);\n                        this.emitReserved(\"upgrade\", transport);\n                        transport = null;\n                        this.upgrading = false;\n                        this.flush();\n                    });\n                }\n                else {\n                    debug('probe transport \"%s\" failed', name);\n                    const err = new Error(\"probe error\");\n                    // @ts-ignore\n                    err.transport = transport.name;\n                    this.emitReserved(\"upgradeError\", err);\n                }\n            });\n        };\n        function freezeTransport() {\n            if (failed)\n                return;\n            // Any callback called by transport should be ignored since now\n            failed = true;\n            cleanup();\n            transport.close();\n            transport = null;\n        }\n        // Handle any error that happens while probing\n        const onerror = err => {\n            const error = new Error(\"probe error: \" + err);\n            // @ts-ignore\n            error.transport = transport.name;\n            freezeTransport();\n            debug('probe transport \"%s\" failed because of error: %s', name, err);\n            this.emitReserved(\"upgradeError\", error);\n        };\n        function onTransportClose() {\n            onerror(\"transport closed\");\n        }\n        // When the socket is closed while we're probing\n        function onclose() {\n            onerror(\"socket closed\");\n        }\n        // When the socket is upgraded while we're probing\n        function onupgrade(to) {\n            if (transport && to.name !== transport.name) {\n                debug('\"%s\" works - aborting \"%s\"', to.name, transport.name);\n                freezeTransport();\n            }\n        }\n        // Remove all listeners on the transport and on self\n        const cleanup = () => {\n            transport.removeListener(\"open\", onTransportOpen);\n            transport.removeListener(\"error\", onerror);\n            transport.removeListener(\"close\", onTransportClose);\n            this.off(\"close\", onclose);\n            this.off(\"upgrading\", onupgrade);\n        };\n        transport.once(\"open\", onTransportOpen);\n        transport.once(\"error\", onerror);\n        transport.once(\"close\", onTransportClose);\n        this.once(\"close\", onclose);\n        this.once(\"upgrading\", onupgrade);\n        transport.open();\n    }\n    /**\n     * Called when connection is deemed open.\n     *\n     * @api private\n     */\n    onOpen() {\n        debug(\"socket open\");\n        this.readyState = \"open\";\n        Socket.priorWebsocketSuccess = \"websocket\" === this.transport.name;\n        this.emitReserved(\"open\");\n        this.flush();\n        // we check for `readyState` in case an `open`\n        // listener already closed the socket\n        if (\"open\" === this.readyState &&\n            this.opts.upgrade &&\n            this.transport.pause) {\n            debug(\"starting upgrade probes\");\n            let i = 0;\n            const l = this.upgrades.length;\n            for (; i < l; i++) {\n                this.probe(this.upgrades[i]);\n            }\n        }\n    }\n    /**\n     * Handles a packet.\n     *\n     * @api private\n     */\n    onPacket(packet) {\n        if (\"opening\" === this.readyState ||\n            \"open\" === this.readyState ||\n            \"closing\" === this.readyState) {\n            debug('socket receive: type \"%s\", data \"%s\"', packet.type, packet.data);\n            this.emitReserved(\"packet\", packet);\n            // Socket is live - any packet counts\n            this.emitReserved(\"heartbeat\");\n            switch (packet.type) {\n                case \"open\":\n                    this.onHandshake(JSON.parse(packet.data));\n                    break;\n                case \"ping\":\n                    this.resetPingTimeout();\n                    this.sendPacket(\"pong\");\n                    this.emitReserved(\"ping\");\n                    this.emitReserved(\"pong\");\n                    break;\n                case \"error\":\n                    const err = new Error(\"server error\");\n                    // @ts-ignore\n                    err.code = packet.data;\n                    this.onError(err);\n                    break;\n                case \"message\":\n                    this.emitReserved(\"data\", packet.data);\n                    this.emitReserved(\"message\", packet.data);\n                    break;\n            }\n        }\n        else {\n            debug('packet received with socket readyState \"%s\"', this.readyState);\n        }\n    }\n    /**\n     * Called upon handshake completion.\n     *\n     * @param {Object} data - handshake obj\n     * @api private\n     */\n    onHandshake(data) {\n        this.emitReserved(\"handshake\", data);\n        this.id = data.sid;\n        this.transport.query.sid = data.sid;\n        this.upgrades = this.filterUpgrades(data.upgrades);\n        this.pingInterval = data.pingInterval;\n        this.pingTimeout = data.pingTimeout;\n        this.maxPayload = data.maxPayload;\n        this.onOpen();\n        // In case open handler closes socket\n        if (\"closed\" === this.readyState)\n            return;\n        this.resetPingTimeout();\n    }\n    /**\n     * Sets and resets ping timeout timer based on server pings.\n     *\n     * @api private\n     */\n    resetPingTimeout() {\n        this.clearTimeoutFn(this.pingTimeoutTimer);\n        this.pingTimeoutTimer = this.setTimeoutFn(() => {\n            this.onClose(\"ping timeout\");\n        }, this.pingInterval + this.pingTimeout);\n        if (this.opts.autoUnref) {\n            this.pingTimeoutTimer.unref();\n        }\n    }\n    /**\n     * Called on `drain` event\n     *\n     * @api private\n     */\n    onDrain() {\n        this.writeBuffer.splice(0, this.prevBufferLen);\n        // setting prevBufferLen = 0 is very important\n        // for example, when upgrading, upgrade packet is sent over,\n        // and a nonzero prevBufferLen could cause problems on `drain`\n        this.prevBufferLen = 0;\n        if (0 === this.writeBuffer.length) {\n            this.emitReserved(\"drain\");\n        }\n        else {\n            this.flush();\n        }\n    }\n    /**\n     * Flush write buffers.\n     *\n     * @api private\n     */\n    flush() {\n        if (\"closed\" !== this.readyState &&\n            this.transport.writable &&\n            !this.upgrading &&\n            this.writeBuffer.length) {\n            const packets = this.getWritablePackets();\n            debug(\"flushing %d packets in socket\", packets.length);\n            this.transport.send(packets);\n            // keep track of current length of writeBuffer\n            // splice writeBuffer and callbackBuffer on `drain`\n            this.prevBufferLen = packets.length;\n            this.emitReserved(\"flush\");\n        }\n    }\n    /**\n     * Ensure the encoded size of the writeBuffer is below the maxPayload value sent by the server (only for HTTP\n     * long-polling)\n     *\n     * @private\n     */\n    getWritablePackets() {\n        const shouldCheckPayloadSize = this.maxPayload &&\n            this.transport.name === \"polling\" &&\n            this.writeBuffer.length > 1;\n        if (!shouldCheckPayloadSize) {\n            return this.writeBuffer;\n        }\n        let payloadSize = 1; // first packet type\n        for (let i = 0; i < this.writeBuffer.length; i++) {\n            const data = this.writeBuffer[i].data;\n            if (data) {\n                payloadSize += (0, util_js_1.byteLength)(data);\n            }\n            if (i > 0 && payloadSize > this.maxPayload) {\n                debug(\"only send %d out of %d packets\", i, this.writeBuffer.length);\n                return this.writeBuffer.slice(0, i);\n            }\n            payloadSize += 2; // separator + packet type\n        }\n        debug(\"payload size is %d (max: %d)\", payloadSize, this.maxPayload);\n        return this.writeBuffer;\n    }\n    /**\n     * Sends a message.\n     *\n     * @param {String} message.\n     * @param {Function} callback function.\n     * @param {Object} options.\n     * @return {Socket} for chaining.\n     * @api public\n     */\n    write(msg, options, fn) {\n        this.sendPacket(\"message\", msg, options, fn);\n        return this;\n    }\n    send(msg, options, fn) {\n        this.sendPacket(\"message\", msg, options, fn);\n        return this;\n    }\n    /**\n     * Sends a packet.\n     *\n     * @param {String} packet type.\n     * @param {String} data.\n     * @param {Object} options.\n     * @param {Function} callback function.\n     * @api private\n     */\n    sendPacket(type, data, options, fn) {\n        if (\"function\" === typeof data) {\n            fn = data;\n            data = undefined;\n        }\n        if (\"function\" === typeof options) {\n            fn = options;\n            options = null;\n        }\n        if (\"closing\" === this.readyState || \"closed\" === this.readyState) {\n            return;\n        }\n        options = options || {};\n        options.compress = false !== options.compress;\n        const packet = {\n            type: type,\n            data: data,\n            options: options\n        };\n        this.emitReserved(\"packetCreate\", packet);\n        this.writeBuffer.push(packet);\n        if (fn)\n            this.once(\"flush\", fn);\n        this.flush();\n    }\n    /**\n     * Closes the connection.\n     *\n     * @api public\n     */\n    close() {\n        const close = () => {\n            this.onClose(\"forced close\");\n            debug(\"socket closing - telling transport to close\");\n            this.transport.close();\n        };\n        const cleanupAndClose = () => {\n            this.off(\"upgrade\", cleanupAndClose);\n            this.off(\"upgradeError\", cleanupAndClose);\n            close();\n        };\n        const waitForUpgrade = () => {\n            // wait for upgrade to finish since we can't send packets while pausing a transport\n            this.once(\"upgrade\", cleanupAndClose);\n            this.once(\"upgradeError\", cleanupAndClose);\n        };\n        if (\"opening\" === this.readyState || \"open\" === this.readyState) {\n            this.readyState = \"closing\";\n            if (this.writeBuffer.length) {\n                this.once(\"drain\", () => {\n                    if (this.upgrading) {\n                        waitForUpgrade();\n                    }\n                    else {\n                        close();\n                    }\n                });\n            }\n            else if (this.upgrading) {\n                waitForUpgrade();\n            }\n            else {\n                close();\n            }\n        }\n        return this;\n    }\n    /**\n     * Called upon transport error\n     *\n     * @api private\n     */\n    onError(err) {\n        debug(\"socket error %j\", err);\n        Socket.priorWebsocketSuccess = false;\n        this.emitReserved(\"error\", err);\n        this.onClose(\"transport error\", err);\n    }\n    /**\n     * Called upon transport close.\n     *\n     * @api private\n     */\n    onClose(reason, description) {\n        if (\"opening\" === this.readyState ||\n            \"open\" === this.readyState ||\n            \"closing\" === this.readyState) {\n            debug('socket close with reason: \"%s\"', reason);\n            // clear timers\n            this.clearTimeoutFn(this.pingTimeoutTimer);\n            // stop event from firing again for transport\n            this.transport.removeAllListeners(\"close\");\n            // ensure transport won't stay open\n            this.transport.close();\n            // ignore further transport communication\n            this.transport.removeAllListeners();\n            if (typeof removeEventListener === \"function\") {\n                removeEventListener(\"beforeunload\", this.beforeunloadEventListener, false);\n                removeEventListener(\"offline\", this.offlineEventListener, false);\n            }\n            // set ready state\n            this.readyState = \"closed\";\n            // clear session id\n            this.id = null;\n            // emit close event\n            this.emitReserved(\"close\", reason, description);\n            // clean buffers after, so users can still\n            // grab the buffers on `close` event\n            this.writeBuffer = [];\n            this.prevBufferLen = 0;\n        }\n    }\n    /**\n     * Filters upgrades, returning only those matching client transports.\n     *\n     * @param {Array} server upgrades\n     * @api private\n     *\n     */\n    filterUpgrades(upgrades) {\n        const filteredUpgrades = [];\n        let i = 0;\n        const j = upgrades.length;\n        for (; i < j; i++) {\n            if (~this.transports.indexOf(upgrades[i]))\n                filteredUpgrades.push(upgrades[i]);\n        }\n        return filteredUpgrades;\n    }\n}\nexports.Socket = Socket;\nSocket.protocol = engine_io_parser_1.protocol;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}