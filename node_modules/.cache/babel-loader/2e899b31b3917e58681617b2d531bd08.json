{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Socket = void 0;\nconst socket_io_parser_1 = require(\"socket.io-parser\");\nconst on_js_1 = require(\"./on.js\");\nconst component_emitter_1 = require(\"@socket.io/component-emitter\");\nconst debug_1 = __importDefault(require(\"debug\")); // debug()\nconst debug = debug_1.default(\"socket.io-client:socket\"); // debug()\n/**\r\n * Internal events.\r\n * These events can't be emitted by the user.\r\n */\nconst RESERVED_EVENTS = Object.freeze({\n  connect: 1,\n  connect_error: 1,\n  disconnect: 1,\n  disconnecting: 1,\n  // EventEmitter reserved events: https://nodejs.org/api/events.html#events_event_newlistener\n  newListener: 1,\n  removeListener: 1\n});\n/**\r\n * A Socket is the fundamental class for interacting with the server.\r\n *\r\n * A Socket belongs to a certain Namespace (by default /) and uses an underlying {@link Manager} to communicate.\r\n *\r\n * @example\r\n * const socket = io();\r\n *\r\n * socket.on(\"connect\", () => {\r\n *   console.log(\"connected\");\r\n * });\r\n *\r\n * // send an event to the server\r\n * socket.emit(\"foo\", \"bar\");\r\n *\r\n * socket.on(\"foobar\", () => {\r\n *   // an event was received from the server\r\n * });\r\n *\r\n * // upon disconnection\r\n * socket.on(\"disconnect\", (reason) => {\r\n *   console.log(`disconnected due to ${reason}`);\r\n * });\r\n */\nclass Socket extends component_emitter_1.Emitter {\n  /**\r\n   * `Socket` constructor.\r\n   */\n  constructor(io, nsp, opts) {\n    super();\n    /**\r\n     * Whether the socket is currently connected to the server.\r\n     *\r\n     * @example\r\n     * const socket = io();\r\n     *\r\n     * socket.on(\"connect\", () => {\r\n     *   console.log(socket.connected); // true\r\n     * });\r\n     *\r\n     * socket.on(\"disconnect\", () => {\r\n     *   console.log(socket.connected); // false\r\n     * });\r\n     */\n    this.connected = false;\n    /**\r\n     * Buffer for packets received before the CONNECT packet\r\n     */\n    this.receiveBuffer = [];\n    /**\r\n     * Buffer for packets that will be sent once the socket is connected\r\n     */\n    this.sendBuffer = [];\n    this.ids = 0;\n    this.acks = {};\n    this.flags = {};\n    this.io = io;\n    this.nsp = nsp;\n    if (opts && opts.auth) {\n      this.auth = opts.auth;\n    }\n    if (this.io._autoConnect) this.open();\n  }\n  /**\r\n   * Whether the socket is currently disconnected\r\n   *\r\n   * @example\r\n   * const socket = io();\r\n   *\r\n   * socket.on(\"connect\", () => {\r\n   *   console.log(socket.disconnected); // false\r\n   * });\r\n   *\r\n   * socket.on(\"disconnect\", () => {\r\n   *   console.log(socket.disconnected); // true\r\n   * });\r\n   */\n  get disconnected() {\n    return !this.connected;\n  }\n  /**\r\n   * Subscribe to open, close and packet events\r\n   *\r\n   * @private\r\n   */\n  subEvents() {\n    if (this.subs) return;\n    const io = this.io;\n    this.subs = [on_js_1.on(io, \"open\", this.onopen.bind(this)), on_js_1.on(io, \"packet\", this.onpacket.bind(this)), on_js_1.on(io, \"error\", this.onerror.bind(this)), on_js_1.on(io, \"close\", this.onclose.bind(this))];\n  }\n  /**\r\n   * Whether the Socket will try to reconnect when its Manager connects or reconnects.\r\n   *\r\n   * @example\r\n   * const socket = io();\r\n   *\r\n   * console.log(socket.active); // true\r\n   *\r\n   * socket.on(\"disconnect\", (reason) => {\r\n   *   if (reason === \"io server disconnect\") {\r\n   *     // the disconnection was initiated by the server, you need to manually reconnect\r\n   *     console.log(socket.active); // false\r\n   *   }\r\n   *   // else the socket will automatically try to reconnect\r\n   *   console.log(socket.active); // true\r\n   * });\r\n   */\n  get active() {\n    return !!this.subs;\n  }\n  /**\r\n   * \"Opens\" the socket.\r\n   *\r\n   * @example\r\n   * const socket = io({\r\n   *   autoConnect: false\r\n   * });\r\n   *\r\n   * socket.connect();\r\n   */\n  connect() {\n    if (this.connected) return this;\n    this.subEvents();\n    if (!this.io[\"_reconnecting\"]) this.io.open(); // ensure open\n    if (\"open\" === this.io._readyState) this.onopen();\n    return this;\n  }\n  /**\r\n   * Alias for {@link connect()}.\r\n   */\n  open() {\n    return this.connect();\n  }\n  /**\r\n   * Sends a `message` event.\r\n   *\r\n   * This method mimics the WebSocket.send() method.\r\n   *\r\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/send\r\n   *\r\n   * @example\r\n   * socket.send(\"hello\");\r\n   *\r\n   * // this is equivalent to\r\n   * socket.emit(\"message\", \"hello\");\r\n   *\r\n   * @return self\r\n   */\n  send() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    args.unshift(\"message\");\n    this.emit.apply(this, args);\n    return this;\n  }\n  /**\r\n   * Override `emit`.\r\n   * If the event is in `events`, it's emitted normally.\r\n   *\r\n   * @example\r\n   * socket.emit(\"hello\", \"world\");\r\n   *\r\n   * // all serializable datastructures are supported (no need to call JSON.stringify)\r\n   * socket.emit(\"hello\", 1, \"2\", { 3: [\"4\"], 5: Uint8Array.from([6]) });\r\n   *\r\n   * // with an acknowledgement from the server\r\n   * socket.emit(\"hello\", \"world\", (val) => {\r\n   *   // ...\r\n   * });\r\n   *\r\n   * @return self\r\n   */\n  emit(ev) {\n    if (RESERVED_EVENTS.hasOwnProperty(ev)) {\n      throw new Error('\"' + ev.toString() + '\" is a reserved event name');\n    }\n    for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n      args[_key2 - 1] = arguments[_key2];\n    }\n    args.unshift(ev);\n    const packet = {\n      type: socket_io_parser_1.PacketType.EVENT,\n      data: args\n    };\n    packet.options = {};\n    packet.options.compress = this.flags.compress !== false;\n    // event ack callback\n    if (\"function\" === typeof args[args.length - 1]) {\n      const id = this.ids++;\n      debug(\"emitting packet with ack id %d\", id);\n      const ack = args.pop();\n      this._registerAckCallback(id, ack);\n      packet.id = id;\n    }\n    const isTransportWritable = this.io.engine && this.io.engine.transport && this.io.engine.transport.writable;\n    const discardPacket = this.flags.volatile && (!isTransportWritable || !this.connected);\n    if (discardPacket) {\n      debug(\"discard packet as the transport is not currently writable\");\n    } else if (this.connected) {\n      this.notifyOutgoingListeners(packet);\n      this.packet(packet);\n    } else {\n      this.sendBuffer.push(packet);\n    }\n    this.flags = {};\n    return this;\n  }\n  /**\r\n   * @private\r\n   */\n  _registerAckCallback(id, ack) {\n    var _this = this;\n    const timeout = this.flags.timeout;\n    if (timeout === undefined) {\n      this.acks[id] = ack;\n      return;\n    }\n    // @ts-ignore\n    const timer = this.io.setTimeoutFn(() => {\n      delete this.acks[id];\n      for (let i = 0; i < this.sendBuffer.length; i++) {\n        if (this.sendBuffer[i].id === id) {\n          debug(\"removing packet with ack id %d from the buffer\", id);\n          this.sendBuffer.splice(i, 1);\n        }\n      }\n      debug(\"event with ack id %d has timed out after %d ms\", id, timeout);\n      ack.call(this, new Error(\"operation has timed out\"));\n    }, timeout);\n    this.acks[id] = function () {\n      // @ts-ignore\n      _this.io.clearTimeoutFn(timer);\n      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        args[_key3] = arguments[_key3];\n      }\n      ack.apply(_this, [null, ...args]);\n    };\n  }\n  /**\r\n   * Sends a packet.\r\n   *\r\n   * @param packet\r\n   * @private\r\n   */\n  packet(packet) {\n    packet.nsp = this.nsp;\n    this.io._packet(packet);\n  }\n  /**\r\n   * Called upon engine `open`.\r\n   *\r\n   * @private\r\n   */\n  onopen() {\n    debug(\"transport is open - connecting\");\n    if (typeof this.auth == \"function\") {\n      this.auth(data => {\n        this.packet({\n          type: socket_io_parser_1.PacketType.CONNECT,\n          data\n        });\n      });\n    } else {\n      this.packet({\n        type: socket_io_parser_1.PacketType.CONNECT,\n        data: this.auth\n      });\n    }\n  }\n  /**\r\n   * Called upon engine or manager `error`.\r\n   *\r\n   * @param err\r\n   * @private\r\n   */\n  onerror(err) {\n    if (!this.connected) {\n      this.emitReserved(\"connect_error\", err);\n    }\n  }\n  /**\r\n   * Called upon engine `close`.\r\n   *\r\n   * @param reason\r\n   * @param description\r\n   * @private\r\n   */\n  onclose(reason, description) {\n    debug(\"close (%s)\", reason);\n    this.connected = false;\n    delete this.id;\n    this.emitReserved(\"disconnect\", reason, description);\n  }\n  /**\r\n   * Called with socket packet.\r\n   *\r\n   * @param packet\r\n   * @private\r\n   */\n  onpacket(packet) {\n    const sameNamespace = packet.nsp === this.nsp;\n    if (!sameNamespace) return;\n    switch (packet.type) {\n      case socket_io_parser_1.PacketType.CONNECT:\n        if (packet.data && packet.data.sid) {\n          const id = packet.data.sid;\n          this.onconnect(id);\n        } else {\n          this.emitReserved(\"connect_error\", new Error(\"It seems you are trying to reach a Socket.IO server in v2.x with a v3.x client, but they are not compatible (more information here: https://socket.io/docs/v3/migrating-from-2-x-to-3-0/)\"));\n        }\n        break;\n      case socket_io_parser_1.PacketType.EVENT:\n      case socket_io_parser_1.PacketType.BINARY_EVENT:\n        this.onevent(packet);\n        break;\n      case socket_io_parser_1.PacketType.ACK:\n      case socket_io_parser_1.PacketType.BINARY_ACK:\n        this.onack(packet);\n        break;\n      case socket_io_parser_1.PacketType.DISCONNECT:\n        this.ondisconnect();\n        break;\n      case socket_io_parser_1.PacketType.CONNECT_ERROR:\n        this.destroy();\n        const err = new Error(packet.data.message);\n        // @ts-ignore\n        err.data = packet.data.data;\n        this.emitReserved(\"connect_error\", err);\n        break;\n    }\n  }\n  /**\r\n   * Called upon a server event.\r\n   *\r\n   * @param packet\r\n   * @private\r\n   */\n  onevent(packet) {\n    const args = packet.data || [];\n    debug(\"emitting event %j\", args);\n    if (null != packet.id) {\n      debug(\"attaching ack callback to event\");\n      args.push(this.ack(packet.id));\n    }\n    if (this.connected) {\n      this.emitEvent(args);\n    } else {\n      this.receiveBuffer.push(Object.freeze(args));\n    }\n  }\n  emitEvent(args) {\n    if (this._anyListeners && this._anyListeners.length) {\n      const listeners = this._anyListeners.slice();\n      for (const listener of listeners) {\n        listener.apply(this, args);\n      }\n    }\n    super.emit.apply(this, args);\n  }\n  /**\r\n   * Produces an ack callback to emit with an event.\r\n   *\r\n   * @private\r\n   */\n  ack(id) {\n    const self = this;\n    let sent = false;\n    return function () {\n      // prevent double callbacks\n      if (sent) return;\n      sent = true;\n      for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n        args[_key4] = arguments[_key4];\n      }\n      debug(\"sending ack %j\", args);\n      self.packet({\n        type: socket_io_parser_1.PacketType.ACK,\n        id: id,\n        data: args\n      });\n    };\n  }\n  /**\r\n   * Called upon a server acknowlegement.\r\n   *\r\n   * @param packet\r\n   * @private\r\n   */\n  onack(packet) {\n    const ack = this.acks[packet.id];\n    if (\"function\" === typeof ack) {\n      debug(\"calling ack %s with %j\", packet.id, packet.data);\n      ack.apply(this, packet.data);\n      delete this.acks[packet.id];\n    } else {\n      debug(\"bad ack %s\", packet.id);\n    }\n  }\n  /**\r\n   * Called upon server connect.\r\n   *\r\n   * @private\r\n   */\n  onconnect(id) {\n    debug(\"socket connected with id %s\", id);\n    this.id = id;\n    this.connected = true;\n    this.emitBuffered();\n    this.emitReserved(\"connect\");\n  }\n  /**\r\n   * Emit buffered events (received and emitted).\r\n   *\r\n   * @private\r\n   */\n  emitBuffered() {\n    this.receiveBuffer.forEach(args => this.emitEvent(args));\n    this.receiveBuffer = [];\n    this.sendBuffer.forEach(packet => {\n      this.notifyOutgoingListeners(packet);\n      this.packet(packet);\n    });\n    this.sendBuffer = [];\n  }\n  /**\r\n   * Called upon server disconnect.\r\n   *\r\n   * @private\r\n   */\n  ondisconnect() {\n    debug(\"server disconnect (%s)\", this.nsp);\n    this.destroy();\n    this.onclose(\"io server disconnect\");\n  }\n  /**\r\n   * Called upon forced client/server side disconnections,\r\n   * this method ensures the manager stops tracking us and\r\n   * that reconnections don't get triggered for this.\r\n   *\r\n   * @private\r\n   */\n  destroy() {\n    if (this.subs) {\n      // clean subscriptions to avoid reconnections\n      this.subs.forEach(subDestroy => subDestroy());\n      this.subs = undefined;\n    }\n    this.io[\"_destroy\"](this);\n  }\n  /**\r\n   * Disconnects the socket manually. In that case, the socket will not try to reconnect.\r\n   *\r\n   * If this is the last active Socket instance of the {@link Manager}, the low-level connection will be closed.\r\n   *\r\n   * @example\r\n   * const socket = io();\r\n   *\r\n   * socket.on(\"disconnect\", (reason) => {\r\n   *   // console.log(reason); prints \"io client disconnect\"\r\n   * });\r\n   *\r\n   * socket.disconnect();\r\n   *\r\n   * @return self\r\n   */\n  disconnect() {\n    if (this.connected) {\n      debug(\"performing disconnect (%s)\", this.nsp);\n      this.packet({\n        type: socket_io_parser_1.PacketType.DISCONNECT\n      });\n    }\n    // remove socket from pool\n    this.destroy();\n    if (this.connected) {\n      // fire events\n      this.onclose(\"io client disconnect\");\n    }\n    return this;\n  }\n  /**\r\n   * Alias for {@link disconnect()}.\r\n   *\r\n   * @return self\r\n   */\n  close() {\n    return this.disconnect();\n  }\n  /**\r\n   * Sets the compress flag.\r\n   *\r\n   * @example\r\n   * socket.compress(false).emit(\"hello\");\r\n   *\r\n   * @param compress - if `true`, compresses the sending data\r\n   * @return self\r\n   */\n  compress(compress) {\n    this.flags.compress = compress;\n    return this;\n  }\n  /**\r\n   * Sets a modifier for a subsequent event emission that the event message will be dropped when this socket is not\r\n   * ready to send messages.\r\n   *\r\n   * @example\r\n   * socket.volatile.emit(\"hello\"); // the server may or may not receive it\r\n   *\r\n   * @returns self\r\n   */\n  get volatile() {\n    this.flags.volatile = true;\n    return this;\n  }\n  /**\r\n   * Sets a modifier for a subsequent event emission that the callback will be called with an error when the\r\n   * given number of milliseconds have elapsed without an acknowledgement from the server:\r\n   *\r\n   * @example\r\n   * socket.timeout(5000).emit(\"my-event\", (err) => {\r\n   *   if (err) {\r\n   *     // the server did not acknowledge the event in the given delay\r\n   *   }\r\n   * });\r\n   *\r\n   * @returns self\r\n   */\n  timeout(timeout) {\n    this.flags.timeout = timeout;\n    return this;\n  }\n  /**\r\n   * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\r\n   * callback.\r\n   *\r\n   * @example\r\n   * socket.onAny((event, ...args) => {\r\n   *   console.log(`got ${event}`);\r\n   * });\r\n   *\r\n   * @param listener\r\n   */\n  onAny(listener) {\n    this._anyListeners = this._anyListeners || [];\n    this._anyListeners.push(listener);\n    return this;\n  }\n  /**\r\n   * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\r\n   * callback. The listener is added to the beginning of the listeners array.\r\n   *\r\n   * @example\r\n   * socket.prependAny((event, ...args) => {\r\n   *   console.log(`got event ${event}`);\r\n   * });\r\n   *\r\n   * @param listener\r\n   */\n  prependAny(listener) {\n    this._anyListeners = this._anyListeners || [];\n    this._anyListeners.unshift(listener);\n    return this;\n  }\n  /**\r\n   * Removes the listener that will be fired when any event is emitted.\r\n   *\r\n   * @example\r\n   * const catchAllListener = (event, ...args) => {\r\n   *   console.log(`got event ${event}`);\r\n   * }\r\n   *\r\n   * socket.onAny(catchAllListener);\r\n   *\r\n   * // remove a specific listener\r\n   * socket.offAny(catchAllListener);\r\n   *\r\n   * // or remove all listeners\r\n   * socket.offAny();\r\n   *\r\n   * @param listener\r\n   */\n  offAny(listener) {\n    if (!this._anyListeners) {\n      return this;\n    }\n    if (listener) {\n      const listeners = this._anyListeners;\n      for (let i = 0; i < listeners.length; i++) {\n        if (listener === listeners[i]) {\n          listeners.splice(i, 1);\n          return this;\n        }\n      }\n    } else {\n      this._anyListeners = [];\n    }\n    return this;\n  }\n  /**\r\n   * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,\r\n   * e.g. to remove listeners.\r\n   */\n  listenersAny() {\n    return this._anyListeners || [];\n  }\n  /**\r\n   * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\r\n   * callback.\r\n   *\r\n   * Note: acknowledgements sent to the server are not included.\r\n   *\r\n   * @example\r\n   * socket.onAnyOutgoing((event, ...args) => {\r\n   *   console.log(`sent event ${event}`);\r\n   * });\r\n   *\r\n   * @param listener\r\n   */\n  onAnyOutgoing(listener) {\n    this._anyOutgoingListeners = this._anyOutgoingListeners || [];\n    this._anyOutgoingListeners.push(listener);\n    return this;\n  }\n  /**\r\n   * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\r\n   * callback. The listener is added to the beginning of the listeners array.\r\n   *\r\n   * Note: acknowledgements sent to the server are not included.\r\n   *\r\n   * @example\r\n   * socket.prependAnyOutgoing((event, ...args) => {\r\n   *   console.log(`sent event ${event}`);\r\n   * });\r\n   *\r\n   * @param listener\r\n   */\n  prependAnyOutgoing(listener) {\n    this._anyOutgoingListeners = this._anyOutgoingListeners || [];\n    this._anyOutgoingListeners.unshift(listener);\n    return this;\n  }\n  /**\r\n   * Removes the listener that will be fired when any event is emitted.\r\n   *\r\n   * @example\r\n   * const catchAllListener = (event, ...args) => {\r\n   *   console.log(`sent event ${event}`);\r\n   * }\r\n   *\r\n   * socket.onAnyOutgoing(catchAllListener);\r\n   *\r\n   * // remove a specific listener\r\n   * socket.offAnyOutgoing(catchAllListener);\r\n   *\r\n   * // or remove all listeners\r\n   * socket.offAnyOutgoing();\r\n   *\r\n   * @param [listener] - the catch-all listener (optional)\r\n   */\n  offAnyOutgoing(listener) {\n    if (!this._anyOutgoingListeners) {\n      return this;\n    }\n    if (listener) {\n      const listeners = this._anyOutgoingListeners;\n      for (let i = 0; i < listeners.length; i++) {\n        if (listener === listeners[i]) {\n          listeners.splice(i, 1);\n          return this;\n        }\n      }\n    } else {\n      this._anyOutgoingListeners = [];\n    }\n    return this;\n  }\n  /**\r\n   * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,\r\n   * e.g. to remove listeners.\r\n   */\n  listenersAnyOutgoing() {\n    return this._anyOutgoingListeners || [];\n  }\n  /**\r\n   * Notify the listeners for each packet sent\r\n   *\r\n   * @param packet\r\n   *\r\n   * @private\r\n   */\n  notifyOutgoingListeners(packet) {\n    if (this._anyOutgoingListeners && this._anyOutgoingListeners.length) {\n      const listeners = this._anyOutgoingListeners.slice();\n      for (const listener of listeners) {\n        listener.apply(this, packet.data);\n      }\n    }\n  }\n}\nexports.Socket = Socket;","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","Socket","socket_io_parser_1","require","on_js_1","component_emitter_1","debug_1","debug","default","RESERVED_EVENTS","freeze","connect","connect_error","disconnect","disconnecting","newListener","removeListener","Emitter","constructor","io","nsp","opts","connected","receiveBuffer","sendBuffer","ids","acks","flags","auth","_autoConnect","open","disconnected","subEvents","subs","on","onopen","bind","onpacket","onerror","onclose","active","_readyState","send","args","unshift","emit","apply","ev","hasOwnProperty","Error","toString","packet","type","PacketType","EVENT","data","options","compress","length","id","ack","pop","_registerAckCallback","isTransportWritable","engine","transport","writable","discardPacket","volatile","notifyOutgoingListeners","push","timeout","undefined","timer","setTimeoutFn","i","splice","call","clearTimeoutFn","_packet","CONNECT","err","emitReserved","reason","description","sameNamespace","sid","onconnect","BINARY_EVENT","onevent","ACK","BINARY_ACK","onack","DISCONNECT","ondisconnect","CONNECT_ERROR","destroy","message","emitEvent","_anyListeners","listeners","slice","listener","self","sent","emitBuffered","forEach","subDestroy","close","onAny","prependAny","offAny","listenersAny","onAnyOutgoing","_anyOutgoingListeners","prependAnyOutgoing","offAnyOutgoing","listenersAnyOutgoing"],"sources":["C:/Users/annek/Documents/Github/IoTProject/node_modules/socket.io-client/build/cjs/socket.js"],"sourcesContent":["\"use strict\";\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Socket = void 0;\r\nconst socket_io_parser_1 = require(\"socket.io-parser\");\r\nconst on_js_1 = require(\"./on.js\");\r\nconst component_emitter_1 = require(\"@socket.io/component-emitter\");\r\nconst debug_1 = __importDefault(require(\"debug\")); // debug()\r\nconst debug = debug_1.default(\"socket.io-client:socket\"); // debug()\r\n/**\r\n * Internal events.\r\n * These events can't be emitted by the user.\r\n */\r\nconst RESERVED_EVENTS = Object.freeze({\r\n    connect: 1,\r\n    connect_error: 1,\r\n    disconnect: 1,\r\n    disconnecting: 1,\r\n    // EventEmitter reserved events: https://nodejs.org/api/events.html#events_event_newlistener\r\n    newListener: 1,\r\n    removeListener: 1,\r\n});\r\n/**\r\n * A Socket is the fundamental class for interacting with the server.\r\n *\r\n * A Socket belongs to a certain Namespace (by default /) and uses an underlying {@link Manager} to communicate.\r\n *\r\n * @example\r\n * const socket = io();\r\n *\r\n * socket.on(\"connect\", () => {\r\n *   console.log(\"connected\");\r\n * });\r\n *\r\n * // send an event to the server\r\n * socket.emit(\"foo\", \"bar\");\r\n *\r\n * socket.on(\"foobar\", () => {\r\n *   // an event was received from the server\r\n * });\r\n *\r\n * // upon disconnection\r\n * socket.on(\"disconnect\", (reason) => {\r\n *   console.log(`disconnected due to ${reason}`);\r\n * });\r\n */\r\nclass Socket extends component_emitter_1.Emitter {\r\n    /**\r\n     * `Socket` constructor.\r\n     */\r\n    constructor(io, nsp, opts) {\r\n        super();\r\n        /**\r\n         * Whether the socket is currently connected to the server.\r\n         *\r\n         * @example\r\n         * const socket = io();\r\n         *\r\n         * socket.on(\"connect\", () => {\r\n         *   console.log(socket.connected); // true\r\n         * });\r\n         *\r\n         * socket.on(\"disconnect\", () => {\r\n         *   console.log(socket.connected); // false\r\n         * });\r\n         */\r\n        this.connected = false;\r\n        /**\r\n         * Buffer for packets received before the CONNECT packet\r\n         */\r\n        this.receiveBuffer = [];\r\n        /**\r\n         * Buffer for packets that will be sent once the socket is connected\r\n         */\r\n        this.sendBuffer = [];\r\n        this.ids = 0;\r\n        this.acks = {};\r\n        this.flags = {};\r\n        this.io = io;\r\n        this.nsp = nsp;\r\n        if (opts && opts.auth) {\r\n            this.auth = opts.auth;\r\n        }\r\n        if (this.io._autoConnect)\r\n            this.open();\r\n    }\r\n    /**\r\n     * Whether the socket is currently disconnected\r\n     *\r\n     * @example\r\n     * const socket = io();\r\n     *\r\n     * socket.on(\"connect\", () => {\r\n     *   console.log(socket.disconnected); // false\r\n     * });\r\n     *\r\n     * socket.on(\"disconnect\", () => {\r\n     *   console.log(socket.disconnected); // true\r\n     * });\r\n     */\r\n    get disconnected() {\r\n        return !this.connected;\r\n    }\r\n    /**\r\n     * Subscribe to open, close and packet events\r\n     *\r\n     * @private\r\n     */\r\n    subEvents() {\r\n        if (this.subs)\r\n            return;\r\n        const io = this.io;\r\n        this.subs = [\r\n            on_js_1.on(io, \"open\", this.onopen.bind(this)),\r\n            on_js_1.on(io, \"packet\", this.onpacket.bind(this)),\r\n            on_js_1.on(io, \"error\", this.onerror.bind(this)),\r\n            on_js_1.on(io, \"close\", this.onclose.bind(this)),\r\n        ];\r\n    }\r\n    /**\r\n     * Whether the Socket will try to reconnect when its Manager connects or reconnects.\r\n     *\r\n     * @example\r\n     * const socket = io();\r\n     *\r\n     * console.log(socket.active); // true\r\n     *\r\n     * socket.on(\"disconnect\", (reason) => {\r\n     *   if (reason === \"io server disconnect\") {\r\n     *     // the disconnection was initiated by the server, you need to manually reconnect\r\n     *     console.log(socket.active); // false\r\n     *   }\r\n     *   // else the socket will automatically try to reconnect\r\n     *   console.log(socket.active); // true\r\n     * });\r\n     */\r\n    get active() {\r\n        return !!this.subs;\r\n    }\r\n    /**\r\n     * \"Opens\" the socket.\r\n     *\r\n     * @example\r\n     * const socket = io({\r\n     *   autoConnect: false\r\n     * });\r\n     *\r\n     * socket.connect();\r\n     */\r\n    connect() {\r\n        if (this.connected)\r\n            return this;\r\n        this.subEvents();\r\n        if (!this.io[\"_reconnecting\"])\r\n            this.io.open(); // ensure open\r\n        if (\"open\" === this.io._readyState)\r\n            this.onopen();\r\n        return this;\r\n    }\r\n    /**\r\n     * Alias for {@link connect()}.\r\n     */\r\n    open() {\r\n        return this.connect();\r\n    }\r\n    /**\r\n     * Sends a `message` event.\r\n     *\r\n     * This method mimics the WebSocket.send() method.\r\n     *\r\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/send\r\n     *\r\n     * @example\r\n     * socket.send(\"hello\");\r\n     *\r\n     * // this is equivalent to\r\n     * socket.emit(\"message\", \"hello\");\r\n     *\r\n     * @return self\r\n     */\r\n    send(...args) {\r\n        args.unshift(\"message\");\r\n        this.emit.apply(this, args);\r\n        return this;\r\n    }\r\n    /**\r\n     * Override `emit`.\r\n     * If the event is in `events`, it's emitted normally.\r\n     *\r\n     * @example\r\n     * socket.emit(\"hello\", \"world\");\r\n     *\r\n     * // all serializable datastructures are supported (no need to call JSON.stringify)\r\n     * socket.emit(\"hello\", 1, \"2\", { 3: [\"4\"], 5: Uint8Array.from([6]) });\r\n     *\r\n     * // with an acknowledgement from the server\r\n     * socket.emit(\"hello\", \"world\", (val) => {\r\n     *   // ...\r\n     * });\r\n     *\r\n     * @return self\r\n     */\r\n    emit(ev, ...args) {\r\n        if (RESERVED_EVENTS.hasOwnProperty(ev)) {\r\n            throw new Error('\"' + ev.toString() + '\" is a reserved event name');\r\n        }\r\n        args.unshift(ev);\r\n        const packet = {\r\n            type: socket_io_parser_1.PacketType.EVENT,\r\n            data: args,\r\n        };\r\n        packet.options = {};\r\n        packet.options.compress = this.flags.compress !== false;\r\n        // event ack callback\r\n        if (\"function\" === typeof args[args.length - 1]) {\r\n            const id = this.ids++;\r\n            debug(\"emitting packet with ack id %d\", id);\r\n            const ack = args.pop();\r\n            this._registerAckCallback(id, ack);\r\n            packet.id = id;\r\n        }\r\n        const isTransportWritable = this.io.engine &&\r\n            this.io.engine.transport &&\r\n            this.io.engine.transport.writable;\r\n        const discardPacket = this.flags.volatile && (!isTransportWritable || !this.connected);\r\n        if (discardPacket) {\r\n            debug(\"discard packet as the transport is not currently writable\");\r\n        }\r\n        else if (this.connected) {\r\n            this.notifyOutgoingListeners(packet);\r\n            this.packet(packet);\r\n        }\r\n        else {\r\n            this.sendBuffer.push(packet);\r\n        }\r\n        this.flags = {};\r\n        return this;\r\n    }\r\n    /**\r\n     * @private\r\n     */\r\n    _registerAckCallback(id, ack) {\r\n        const timeout = this.flags.timeout;\r\n        if (timeout === undefined) {\r\n            this.acks[id] = ack;\r\n            return;\r\n        }\r\n        // @ts-ignore\r\n        const timer = this.io.setTimeoutFn(() => {\r\n            delete this.acks[id];\r\n            for (let i = 0; i < this.sendBuffer.length; i++) {\r\n                if (this.sendBuffer[i].id === id) {\r\n                    debug(\"removing packet with ack id %d from the buffer\", id);\r\n                    this.sendBuffer.splice(i, 1);\r\n                }\r\n            }\r\n            debug(\"event with ack id %d has timed out after %d ms\", id, timeout);\r\n            ack.call(this, new Error(\"operation has timed out\"));\r\n        }, timeout);\r\n        this.acks[id] = (...args) => {\r\n            // @ts-ignore\r\n            this.io.clearTimeoutFn(timer);\r\n            ack.apply(this, [null, ...args]);\r\n        };\r\n    }\r\n    /**\r\n     * Sends a packet.\r\n     *\r\n     * @param packet\r\n     * @private\r\n     */\r\n    packet(packet) {\r\n        packet.nsp = this.nsp;\r\n        this.io._packet(packet);\r\n    }\r\n    /**\r\n     * Called upon engine `open`.\r\n     *\r\n     * @private\r\n     */\r\n    onopen() {\r\n        debug(\"transport is open - connecting\");\r\n        if (typeof this.auth == \"function\") {\r\n            this.auth((data) => {\r\n                this.packet({ type: socket_io_parser_1.PacketType.CONNECT, data });\r\n            });\r\n        }\r\n        else {\r\n            this.packet({ type: socket_io_parser_1.PacketType.CONNECT, data: this.auth });\r\n        }\r\n    }\r\n    /**\r\n     * Called upon engine or manager `error`.\r\n     *\r\n     * @param err\r\n     * @private\r\n     */\r\n    onerror(err) {\r\n        if (!this.connected) {\r\n            this.emitReserved(\"connect_error\", err);\r\n        }\r\n    }\r\n    /**\r\n     * Called upon engine `close`.\r\n     *\r\n     * @param reason\r\n     * @param description\r\n     * @private\r\n     */\r\n    onclose(reason, description) {\r\n        debug(\"close (%s)\", reason);\r\n        this.connected = false;\r\n        delete this.id;\r\n        this.emitReserved(\"disconnect\", reason, description);\r\n    }\r\n    /**\r\n     * Called with socket packet.\r\n     *\r\n     * @param packet\r\n     * @private\r\n     */\r\n    onpacket(packet) {\r\n        const sameNamespace = packet.nsp === this.nsp;\r\n        if (!sameNamespace)\r\n            return;\r\n        switch (packet.type) {\r\n            case socket_io_parser_1.PacketType.CONNECT:\r\n                if (packet.data && packet.data.sid) {\r\n                    const id = packet.data.sid;\r\n                    this.onconnect(id);\r\n                }\r\n                else {\r\n                    this.emitReserved(\"connect_error\", new Error(\"It seems you are trying to reach a Socket.IO server in v2.x with a v3.x client, but they are not compatible (more information here: https://socket.io/docs/v3/migrating-from-2-x-to-3-0/)\"));\r\n                }\r\n                break;\r\n            case socket_io_parser_1.PacketType.EVENT:\r\n            case socket_io_parser_1.PacketType.BINARY_EVENT:\r\n                this.onevent(packet);\r\n                break;\r\n            case socket_io_parser_1.PacketType.ACK:\r\n            case socket_io_parser_1.PacketType.BINARY_ACK:\r\n                this.onack(packet);\r\n                break;\r\n            case socket_io_parser_1.PacketType.DISCONNECT:\r\n                this.ondisconnect();\r\n                break;\r\n            case socket_io_parser_1.PacketType.CONNECT_ERROR:\r\n                this.destroy();\r\n                const err = new Error(packet.data.message);\r\n                // @ts-ignore\r\n                err.data = packet.data.data;\r\n                this.emitReserved(\"connect_error\", err);\r\n                break;\r\n        }\r\n    }\r\n    /**\r\n     * Called upon a server event.\r\n     *\r\n     * @param packet\r\n     * @private\r\n     */\r\n    onevent(packet) {\r\n        const args = packet.data || [];\r\n        debug(\"emitting event %j\", args);\r\n        if (null != packet.id) {\r\n            debug(\"attaching ack callback to event\");\r\n            args.push(this.ack(packet.id));\r\n        }\r\n        if (this.connected) {\r\n            this.emitEvent(args);\r\n        }\r\n        else {\r\n            this.receiveBuffer.push(Object.freeze(args));\r\n        }\r\n    }\r\n    emitEvent(args) {\r\n        if (this._anyListeners && this._anyListeners.length) {\r\n            const listeners = this._anyListeners.slice();\r\n            for (const listener of listeners) {\r\n                listener.apply(this, args);\r\n            }\r\n        }\r\n        super.emit.apply(this, args);\r\n    }\r\n    /**\r\n     * Produces an ack callback to emit with an event.\r\n     *\r\n     * @private\r\n     */\r\n    ack(id) {\r\n        const self = this;\r\n        let sent = false;\r\n        return function (...args) {\r\n            // prevent double callbacks\r\n            if (sent)\r\n                return;\r\n            sent = true;\r\n            debug(\"sending ack %j\", args);\r\n            self.packet({\r\n                type: socket_io_parser_1.PacketType.ACK,\r\n                id: id,\r\n                data: args,\r\n            });\r\n        };\r\n    }\r\n    /**\r\n     * Called upon a server acknowlegement.\r\n     *\r\n     * @param packet\r\n     * @private\r\n     */\r\n    onack(packet) {\r\n        const ack = this.acks[packet.id];\r\n        if (\"function\" === typeof ack) {\r\n            debug(\"calling ack %s with %j\", packet.id, packet.data);\r\n            ack.apply(this, packet.data);\r\n            delete this.acks[packet.id];\r\n        }\r\n        else {\r\n            debug(\"bad ack %s\", packet.id);\r\n        }\r\n    }\r\n    /**\r\n     * Called upon server connect.\r\n     *\r\n     * @private\r\n     */\r\n    onconnect(id) {\r\n        debug(\"socket connected with id %s\", id);\r\n        this.id = id;\r\n        this.connected = true;\r\n        this.emitBuffered();\r\n        this.emitReserved(\"connect\");\r\n    }\r\n    /**\r\n     * Emit buffered events (received and emitted).\r\n     *\r\n     * @private\r\n     */\r\n    emitBuffered() {\r\n        this.receiveBuffer.forEach((args) => this.emitEvent(args));\r\n        this.receiveBuffer = [];\r\n        this.sendBuffer.forEach((packet) => {\r\n            this.notifyOutgoingListeners(packet);\r\n            this.packet(packet);\r\n        });\r\n        this.sendBuffer = [];\r\n    }\r\n    /**\r\n     * Called upon server disconnect.\r\n     *\r\n     * @private\r\n     */\r\n    ondisconnect() {\r\n        debug(\"server disconnect (%s)\", this.nsp);\r\n        this.destroy();\r\n        this.onclose(\"io server disconnect\");\r\n    }\r\n    /**\r\n     * Called upon forced client/server side disconnections,\r\n     * this method ensures the manager stops tracking us and\r\n     * that reconnections don't get triggered for this.\r\n     *\r\n     * @private\r\n     */\r\n    destroy() {\r\n        if (this.subs) {\r\n            // clean subscriptions to avoid reconnections\r\n            this.subs.forEach((subDestroy) => subDestroy());\r\n            this.subs = undefined;\r\n        }\r\n        this.io[\"_destroy\"](this);\r\n    }\r\n    /**\r\n     * Disconnects the socket manually. In that case, the socket will not try to reconnect.\r\n     *\r\n     * If this is the last active Socket instance of the {@link Manager}, the low-level connection will be closed.\r\n     *\r\n     * @example\r\n     * const socket = io();\r\n     *\r\n     * socket.on(\"disconnect\", (reason) => {\r\n     *   // console.log(reason); prints \"io client disconnect\"\r\n     * });\r\n     *\r\n     * socket.disconnect();\r\n     *\r\n     * @return self\r\n     */\r\n    disconnect() {\r\n        if (this.connected) {\r\n            debug(\"performing disconnect (%s)\", this.nsp);\r\n            this.packet({ type: socket_io_parser_1.PacketType.DISCONNECT });\r\n        }\r\n        // remove socket from pool\r\n        this.destroy();\r\n        if (this.connected) {\r\n            // fire events\r\n            this.onclose(\"io client disconnect\");\r\n        }\r\n        return this;\r\n    }\r\n    /**\r\n     * Alias for {@link disconnect()}.\r\n     *\r\n     * @return self\r\n     */\r\n    close() {\r\n        return this.disconnect();\r\n    }\r\n    /**\r\n     * Sets the compress flag.\r\n     *\r\n     * @example\r\n     * socket.compress(false).emit(\"hello\");\r\n     *\r\n     * @param compress - if `true`, compresses the sending data\r\n     * @return self\r\n     */\r\n    compress(compress) {\r\n        this.flags.compress = compress;\r\n        return this;\r\n    }\r\n    /**\r\n     * Sets a modifier for a subsequent event emission that the event message will be dropped when this socket is not\r\n     * ready to send messages.\r\n     *\r\n     * @example\r\n     * socket.volatile.emit(\"hello\"); // the server may or may not receive it\r\n     *\r\n     * @returns self\r\n     */\r\n    get volatile() {\r\n        this.flags.volatile = true;\r\n        return this;\r\n    }\r\n    /**\r\n     * Sets a modifier for a subsequent event emission that the callback will be called with an error when the\r\n     * given number of milliseconds have elapsed without an acknowledgement from the server:\r\n     *\r\n     * @example\r\n     * socket.timeout(5000).emit(\"my-event\", (err) => {\r\n     *   if (err) {\r\n     *     // the server did not acknowledge the event in the given delay\r\n     *   }\r\n     * });\r\n     *\r\n     * @returns self\r\n     */\r\n    timeout(timeout) {\r\n        this.flags.timeout = timeout;\r\n        return this;\r\n    }\r\n    /**\r\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\r\n     * callback.\r\n     *\r\n     * @example\r\n     * socket.onAny((event, ...args) => {\r\n     *   console.log(`got ${event}`);\r\n     * });\r\n     *\r\n     * @param listener\r\n     */\r\n    onAny(listener) {\r\n        this._anyListeners = this._anyListeners || [];\r\n        this._anyListeners.push(listener);\r\n        return this;\r\n    }\r\n    /**\r\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\r\n     * callback. The listener is added to the beginning of the listeners array.\r\n     *\r\n     * @example\r\n     * socket.prependAny((event, ...args) => {\r\n     *   console.log(`got event ${event}`);\r\n     * });\r\n     *\r\n     * @param listener\r\n     */\r\n    prependAny(listener) {\r\n        this._anyListeners = this._anyListeners || [];\r\n        this._anyListeners.unshift(listener);\r\n        return this;\r\n    }\r\n    /**\r\n     * Removes the listener that will be fired when any event is emitted.\r\n     *\r\n     * @example\r\n     * const catchAllListener = (event, ...args) => {\r\n     *   console.log(`got event ${event}`);\r\n     * }\r\n     *\r\n     * socket.onAny(catchAllListener);\r\n     *\r\n     * // remove a specific listener\r\n     * socket.offAny(catchAllListener);\r\n     *\r\n     * // or remove all listeners\r\n     * socket.offAny();\r\n     *\r\n     * @param listener\r\n     */\r\n    offAny(listener) {\r\n        if (!this._anyListeners) {\r\n            return this;\r\n        }\r\n        if (listener) {\r\n            const listeners = this._anyListeners;\r\n            for (let i = 0; i < listeners.length; i++) {\r\n                if (listener === listeners[i]) {\r\n                    listeners.splice(i, 1);\r\n                    return this;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            this._anyListeners = [];\r\n        }\r\n        return this;\r\n    }\r\n    /**\r\n     * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,\r\n     * e.g. to remove listeners.\r\n     */\r\n    listenersAny() {\r\n        return this._anyListeners || [];\r\n    }\r\n    /**\r\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\r\n     * callback.\r\n     *\r\n     * Note: acknowledgements sent to the server are not included.\r\n     *\r\n     * @example\r\n     * socket.onAnyOutgoing((event, ...args) => {\r\n     *   console.log(`sent event ${event}`);\r\n     * });\r\n     *\r\n     * @param listener\r\n     */\r\n    onAnyOutgoing(listener) {\r\n        this._anyOutgoingListeners = this._anyOutgoingListeners || [];\r\n        this._anyOutgoingListeners.push(listener);\r\n        return this;\r\n    }\r\n    /**\r\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\r\n     * callback. The listener is added to the beginning of the listeners array.\r\n     *\r\n     * Note: acknowledgements sent to the server are not included.\r\n     *\r\n     * @example\r\n     * socket.prependAnyOutgoing((event, ...args) => {\r\n     *   console.log(`sent event ${event}`);\r\n     * });\r\n     *\r\n     * @param listener\r\n     */\r\n    prependAnyOutgoing(listener) {\r\n        this._anyOutgoingListeners = this._anyOutgoingListeners || [];\r\n        this._anyOutgoingListeners.unshift(listener);\r\n        return this;\r\n    }\r\n    /**\r\n     * Removes the listener that will be fired when any event is emitted.\r\n     *\r\n     * @example\r\n     * const catchAllListener = (event, ...args) => {\r\n     *   console.log(`sent event ${event}`);\r\n     * }\r\n     *\r\n     * socket.onAnyOutgoing(catchAllListener);\r\n     *\r\n     * // remove a specific listener\r\n     * socket.offAnyOutgoing(catchAllListener);\r\n     *\r\n     * // or remove all listeners\r\n     * socket.offAnyOutgoing();\r\n     *\r\n     * @param [listener] - the catch-all listener (optional)\r\n     */\r\n    offAnyOutgoing(listener) {\r\n        if (!this._anyOutgoingListeners) {\r\n            return this;\r\n        }\r\n        if (listener) {\r\n            const listeners = this._anyOutgoingListeners;\r\n            for (let i = 0; i < listeners.length; i++) {\r\n                if (listener === listeners[i]) {\r\n                    listeners.splice(i, 1);\r\n                    return this;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            this._anyOutgoingListeners = [];\r\n        }\r\n        return this;\r\n    }\r\n    /**\r\n     * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,\r\n     * e.g. to remove listeners.\r\n     */\r\n    listenersAnyOutgoing() {\r\n        return this._anyOutgoingListeners || [];\r\n    }\r\n    /**\r\n     * Notify the listeners for each packet sent\r\n     *\r\n     * @param packet\r\n     *\r\n     * @private\r\n     */\r\n    notifyOutgoingListeners(packet) {\r\n        if (this._anyOutgoingListeners && this._anyOutgoingListeners.length) {\r\n            const listeners = this._anyOutgoingListeners.slice();\r\n            for (const listener of listeners) {\r\n                listener.apply(this, packet.data);\r\n            }\r\n        }\r\n    }\r\n}\r\nexports.Socket = Socket;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}