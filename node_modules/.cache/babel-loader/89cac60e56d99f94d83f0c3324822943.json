{"ast":null,"code":"import { EMPTY } from '../observable/empty';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nimport { innerFrom } from '../observable/innerFrom';\nimport { timer } from '../observable/timer';\nexport function repeat(countOrConfig) {\n  var _a;\n  var count = Infinity;\n  var delay;\n  if (countOrConfig != null) {\n    if (typeof countOrConfig === 'object') {\n      _a = countOrConfig.count, count = _a === void 0 ? Infinity : _a, delay = countOrConfig.delay;\n    } else {\n      count = countOrConfig;\n    }\n  }\n  return count <= 0 ? function () {\n    return EMPTY;\n  } : operate(function (source, subscriber) {\n    var soFar = 0;\n    var sourceSub;\n    var resubscribe = function resubscribe() {\n      sourceSub === null || sourceSub === void 0 ? void 0 : sourceSub.unsubscribe();\n      sourceSub = null;\n      if (delay != null) {\n        var notifier = typeof delay === 'number' ? timer(delay) : innerFrom(delay(soFar));\n        var notifierSubscriber_1 = createOperatorSubscriber(subscriber, function () {\n          notifierSubscriber_1.unsubscribe();\n          subscribeToSource();\n        });\n        notifier.subscribe(notifierSubscriber_1);\n      } else {\n        subscribeToSource();\n      }\n    };\n    var subscribeToSource = function subscribeToSource() {\n      var syncUnsub = false;\n      sourceSub = source.subscribe(createOperatorSubscriber(subscriber, undefined, function () {\n        if (++soFar < count) {\n          if (sourceSub) {\n            resubscribe();\n          } else {\n            syncUnsub = true;\n          }\n        } else {\n          subscriber.complete();\n        }\n      }));\n      if (syncUnsub) {\n        resubscribe();\n      }\n    };\n    subscribeToSource();\n  });\n}","map":{"version":3,"mappings":"AACA,SAASA,KAAK,QAAQ,qBAAqB;AAC3C,SAASC,OAAO,QAAQ,cAAc;AAEtC,SAASC,wBAAwB,QAAQ,sBAAsB;AAC/D,SAASC,SAAS,QAAQ,yBAAyB;AACnD,SAASC,KAAK,QAAQ,qBAAqB;AA6G3C,OAAM,SAAUC,MAAM,CAAIC,aAAqC;;EAC7D,IAAIC,KAAK,GAAGC,QAAQ;EACpB,IAAIC,KAA4B;EAEhC,IAAIH,aAAa,IAAI,IAAI,EAAE;IACzB,IAAI,OAAOA,aAAa,KAAK,QAAQ,EAAE;MAClCI,KAA4BJ,aAAa,MAAzB,EAAhBC,KAAK,mBAAGC,QAAQ,OAAEC,KAAK,GAAKH,aAAa,MAAlB;KAC3B,MAAM;MACLC,KAAK,GAAGD,aAAa;;;EAIzB,OAAOC,KAAK,IAAI,CAAC,GACb;IAAM,YAAK;EAAL,CAAK,GACXN,OAAO,CAAC,UAACU,MAAM,EAAEC,UAAU;IACzB,IAAIC,KAAK,GAAG,CAAC;IACb,IAAIC,SAA8B;IAElC,IAAMC,WAAW,GAAG,SAAdA,WAAW,GAAG;MAClBD,SAAS,aAATA,SAAS,uBAATA,SAAS,CAAEE,WAAW,EAAE;MACxBF,SAAS,GAAG,IAAI;MAChB,IAAIL,KAAK,IAAI,IAAI,EAAE;QACjB,IAAMQ,QAAQ,GAAG,OAAOR,KAAK,KAAK,QAAQ,GAAGL,KAAK,CAACK,KAAK,CAAC,GAAGN,SAAS,CAACM,KAAK,CAACI,KAAK,CAAC,CAAC;QACnF,IAAMK,oBAAkB,GAAGhB,wBAAwB,CAACU,UAAU,EAAE;UAC9DM,oBAAkB,CAACF,WAAW,EAAE;UAChCG,iBAAiB,EAAE;QACrB,CAAC,CAAC;QACFF,QAAQ,CAACG,SAAS,CAACF,oBAAkB,CAAC;OACvC,MAAM;QACLC,iBAAiB,EAAE;;IAEvB,CAAC;IAED,IAAMA,iBAAiB,GAAG,SAApBA,iBAAiB,GAAG;MACxB,IAAIE,SAAS,GAAG,KAAK;MACrBP,SAAS,GAAGH,MAAM,CAACS,SAAS,CAC1BlB,wBAAwB,CAACU,UAAU,EAAEU,SAAS,EAAE;QAC9C,IAAI,EAAET,KAAK,GAAGN,KAAK,EAAE;UACnB,IAAIO,SAAS,EAAE;YACbC,WAAW,EAAE;WACd,MAAM;YACLM,SAAS,GAAG,IAAI;;SAEnB,MAAM;UACLT,UAAU,CAACW,QAAQ,EAAE;;MAEzB,CAAC,CAAC,CACH;MAED,IAAIF,SAAS,EAAE;QACbN,WAAW,EAAE;;IAEjB,CAAC;IAEDI,iBAAiB,EAAE;EACrB,CAAC,CAAC;AACR","names":["EMPTY","operate","createOperatorSubscriber","innerFrom","timer","repeat","countOrConfig","count","Infinity","delay","_a","source","subscriber","soFar","sourceSub","resubscribe","unsubscribe","notifier","notifierSubscriber_1","subscribeToSource","subscribe","syncUnsub","undefined","complete"],"sources":["C:\\Users\\Amali\\Desktop\\Building_the_IoT_w._P2P_and_Cloud_Computing\\IoTProject\\node_modules\\rxjs\\src\\internal\\operators\\repeat.ts"],"sourcesContent":["import { Subscription } from '../Subscription';\r\nimport { EMPTY } from '../observable/empty';\r\nimport { operate } from '../util/lift';\r\nimport { MonoTypeOperatorFunction, ObservableInput } from '../types';\r\nimport { createOperatorSubscriber } from './OperatorSubscriber';\r\nimport { innerFrom } from '../observable/innerFrom';\r\nimport { timer } from '../observable/timer';\r\n\r\nexport interface RepeatConfig {\r\n  /**\r\n   * The number of times to repeat the source. Defaults to `Infinity`.\r\n   */\r\n  count?: number;\r\n\r\n  /**\r\n   * If a `number`, will delay the repeat of the source by that number of milliseconds.\r\n   * If a function, it will provide the number of times the source has been subscribed to,\r\n   * and the return value should be a valid observable input that will notify when the source\r\n   * should be repeated. If the notifier observable is empty, the result will complete.\r\n   */\r\n  delay?: number | ((count: number) => ObservableInput<any>);\r\n}\r\n\r\n/**\r\n * Returns an Observable that will resubscribe to the source stream when the source stream completes.\r\n *\r\n * <span class=\"informal\">Repeats all values emitted on the source. It's like {@link retry}, but for non error cases.</span>\r\n *\r\n * ![](repeat.png)\r\n *\r\n * Repeat will output values from a source until the source completes, then it will resubscribe to the\r\n * source a specified number of times, with a specified delay. Repeat can be particularly useful in\r\n * combination with closing operators like {@link take}, {@link takeUntil}, {@link first}, or {@link takeWhile},\r\n * as it can be used to restart a source again from scratch.\r\n *\r\n * Repeat is very similar to {@link retry}, where {@link retry} will resubscribe to the source in the error case, but\r\n * `repeat` will resubscribe if the source completes.\r\n *\r\n * Note that `repeat` will _not_ catch errors. Use {@link retry} for that.\r\n *\r\n * - `repeat(0)` returns an empty observable\r\n * - `repeat()` will repeat forever\r\n * - `repeat({ delay: 200 })` will repeat forever, with a delay of 200ms between repetitions.\r\n * - `repeat({ count: 2, delay: 400 })` will repeat twice, with a delay of 400ms between repetitions.\r\n * - `repeat({ delay: (count) => timer(count * 1000) })` will repeat forever, but will have a delay that grows by one second for each repetition.\r\n *\r\n * ## Example\r\n *\r\n * Repeat a message stream\r\n *\r\n * ```ts\r\n * import { of, repeat } from 'rxjs';\r\n *\r\n * const source = of('Repeat message');\r\n * const result = source.pipe(repeat(3));\r\n *\r\n * result.subscribe(x => console.log(x));\r\n *\r\n * // Results\r\n * // 'Repeat message'\r\n * // 'Repeat message'\r\n * // 'Repeat message'\r\n * ```\r\n *\r\n * Repeat 3 values, 2 times\r\n *\r\n * ```ts\r\n * import { interval, take, repeat } from 'rxjs';\r\n *\r\n * const source = interval(1000);\r\n * const result = source.pipe(take(3), repeat(2));\r\n *\r\n * result.subscribe(x => console.log(x));\r\n *\r\n * // Results every second\r\n * // 0\r\n * // 1\r\n * // 2\r\n * // 0\r\n * // 1\r\n * // 2\r\n * ```\r\n *\r\n * Defining two complex repeats with delays on the same source.\r\n * Note that the second repeat cannot be called until the first\r\n * repeat as exhausted it's count.\r\n *\r\n * ```ts\r\n * import { defer, of, repeat } from 'rxjs';\r\n *\r\n * const source = defer(() => {\r\n *    return of(`Hello, it is ${new Date()}`)\r\n * });\r\n *\r\n * source.pipe(\r\n *    // Repeat 3 times with a delay of 1 second between repetitions\r\n *    repeat({\r\n *      count: 3,\r\n *      delay: 1000,\r\n *    }),\r\n *\r\n *    // *Then* repeat forever, but with an exponential step-back\r\n *    // maxing out at 1 minute.\r\n *    repeat({\r\n *      delay: (count) => timer(Math.min(60000, 2 ^ count * 1000))\r\n *    })\r\n * )\r\n * ```\r\n *\r\n * @see {@link repeatWhen}\r\n * @see {@link retry}\r\n *\r\n * @param count The number of times the source Observable items are repeated, a count of 0 will yield\r\n * an empty Observable.\r\n */\r\nexport function repeat<T>(countOrConfig?: number | RepeatConfig): MonoTypeOperatorFunction<T> {\r\n  let count = Infinity;\r\n  let delay: RepeatConfig['delay'];\r\n\r\n  if (countOrConfig != null) {\r\n    if (typeof countOrConfig === 'object') {\r\n      ({ count = Infinity, delay } = countOrConfig);\r\n    } else {\r\n      count = countOrConfig;\r\n    }\r\n  }\r\n\r\n  return count <= 0\r\n    ? () => EMPTY\r\n    : operate((source, subscriber) => {\r\n        let soFar = 0;\r\n        let sourceSub: Subscription | null;\r\n\r\n        const resubscribe = () => {\r\n          sourceSub?.unsubscribe();\r\n          sourceSub = null;\r\n          if (delay != null) {\r\n            const notifier = typeof delay === 'number' ? timer(delay) : innerFrom(delay(soFar));\r\n            const notifierSubscriber = createOperatorSubscriber(subscriber, () => {\r\n              notifierSubscriber.unsubscribe();\r\n              subscribeToSource();\r\n            });\r\n            notifier.subscribe(notifierSubscriber);\r\n          } else {\r\n            subscribeToSource();\r\n          }\r\n        };\r\n\r\n        const subscribeToSource = () => {\r\n          let syncUnsub = false;\r\n          sourceSub = source.subscribe(\r\n            createOperatorSubscriber(subscriber, undefined, () => {\r\n              if (++soFar < count) {\r\n                if (sourceSub) {\r\n                  resubscribe();\r\n                } else {\r\n                  syncUnsub = true;\r\n                }\r\n              } else {\r\n                subscriber.complete();\r\n              }\r\n            })\r\n          );\r\n\r\n          if (syncUnsub) {\r\n            resubscribe();\r\n          }\r\n        };\r\n\r\n        subscribeToSource();\r\n      });\r\n}\r\n"]},"metadata":{},"sourceType":"module"}