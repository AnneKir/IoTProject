{"ast":null,"code":"import { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nimport { noop } from '../util/noop';\nexport function distinct(keySelector, flushes) {\n  return operate(function (source, subscriber) {\n    var distinctKeys = new Set();\n    source.subscribe(createOperatorSubscriber(subscriber, function (value) {\n      var key = keySelector ? keySelector(value) : value;\n      if (!distinctKeys.has(key)) {\n        distinctKeys.add(key);\n        subscriber.next(value);\n      }\n    }));\n    flushes === null || flushes === void 0 ? void 0 : flushes.subscribe(createOperatorSubscriber(subscriber, function () {\n      return distinctKeys.clear();\n    }, noop));\n  });\n}","map":{"version":3,"mappings":"AAEA,SAASA,OAAO,QAAQ,cAAc;AACtC,SAASC,wBAAwB,QAAQ,sBAAsB;AAC/D,SAASC,IAAI,QAAQ,cAAc;AA2DnC,OAAM,SAAUC,QAAQ,CAAOC,WAA6B,EAAEC,OAAyB;EACrF,OAAOL,OAAO,CAAC,UAACM,MAAM,EAAEC,UAAU;IAChC,IAAMC,YAAY,GAAG,IAAIC,GAAG,EAAE;IAC9BH,MAAM,CAACI,SAAS,CACdT,wBAAwB,CAACM,UAAU,EAAE,UAACI,KAAK;MACzC,IAAMC,GAAG,GAAGR,WAAW,GAAGA,WAAW,CAACO,KAAK,CAAC,GAAGA,KAAK;MACpD,IAAI,CAACH,YAAY,CAACK,GAAG,CAACD,GAAG,CAAC,EAAE;QAC1BJ,YAAY,CAACM,GAAG,CAACF,GAAG,CAAC;QACrBL,UAAU,CAACQ,IAAI,CAACJ,KAAK,CAAC;;IAE1B,CAAC,CAAC,CACH;IAEDN,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEK,SAAS,CAACT,wBAAwB,CAACM,UAAU,EAAE;MAAM,mBAAY,CAACS,KAAK,EAAE;IAApB,CAAoB,EAAEd,IAAI,CAAC,CAAC;EAC5F,CAAC,CAAC;AACJ","names":["operate","createOperatorSubscriber","noop","distinct","keySelector","flushes","source","subscriber","distinctKeys","Set","subscribe","value","key","has","add","next","clear"],"sources":["C:\\Users\\Amali\\Desktop\\Building_the_IoT_w._P2P_and_Cloud_Computing\\IoTProject\\node_modules\\rxjs\\src\\internal\\operators\\distinct.ts"],"sourcesContent":["import { Observable } from '../Observable';\r\nimport { MonoTypeOperatorFunction } from '../types';\r\nimport { operate } from '../util/lift';\r\nimport { createOperatorSubscriber } from './OperatorSubscriber';\r\nimport { noop } from '../util/noop';\r\n\r\n/**\r\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from previous items.\r\n *\r\n * If a `keySelector` function is provided, then it will project each value from the source observable into a new value that it will\r\n * check for equality with previously projected values. If the `keySelector` function is not provided, it will use each value from the\r\n * source observable directly with an equality check against previous values.\r\n *\r\n * In JavaScript runtimes that support `Set`, this operator will use a `Set` to improve performance of the distinct value checking.\r\n *\r\n * In other runtimes, this operator will use a minimal implementation of `Set` that relies on an `Array` and `indexOf` under the\r\n * hood, so performance will degrade as more values are checked for distinction. Even in newer browsers, a long-running `distinct`\r\n * use might result in memory leaks. To help alleviate this in some scenarios, an optional `flushes` parameter is also provided so\r\n * that the internal `Set` can be \"flushed\", basically clearing it of values.\r\n *\r\n * ## Examples\r\n *\r\n * A simple example with numbers\r\n *\r\n * ```ts\r\n * import { of, distinct } from 'rxjs';\r\n *\r\n * of(1, 1, 2, 2, 2, 1, 2, 3, 4, 3, 2, 1)\r\n *   .pipe(distinct())\r\n *   .subscribe(x => console.log(x));\r\n *\r\n * // Outputs\r\n * // 1\r\n * // 2\r\n * // 3\r\n * // 4\r\n * ```\r\n *\r\n * An example using the `keySelector` function\r\n *\r\n * ```ts\r\n * import { of, distinct } from 'rxjs';\r\n *\r\n * of(\r\n *   { age: 4, name: 'Foo'},\r\n *   { age: 7, name: 'Bar'},\r\n *   { age: 5, name: 'Foo'}\r\n * )\r\n * .pipe(distinct(({ name }) => name))\r\n * .subscribe(x => console.log(x));\r\n *\r\n * // Outputs\r\n * // { age: 4, name: 'Foo' }\r\n * // { age: 7, name: 'Bar' }\r\n * ```\r\n * @see {@link distinctUntilChanged}\r\n * @see {@link distinctUntilKeyChanged}\r\n *\r\n * @param {function} [keySelector] Optional function to select which value you want to check as distinct.\r\n * @param {Observable} [flushes] Optional Observable for flushing the internal HashSet of the operator.\r\n * @return A function that returns an Observable that emits items from the\r\n * source Observable with distinct values.\r\n */\r\nexport function distinct<T, K>(keySelector?: (value: T) => K, flushes?: Observable<any>): MonoTypeOperatorFunction<T> {\r\n  return operate((source, subscriber) => {\r\n    const distinctKeys = new Set();\r\n    source.subscribe(\r\n      createOperatorSubscriber(subscriber, (value) => {\r\n        const key = keySelector ? keySelector(value) : value;\r\n        if (!distinctKeys.has(key)) {\r\n          distinctKeys.add(key);\r\n          subscriber.next(value);\r\n        }\r\n      })\r\n    );\r\n\r\n    flushes?.subscribe(createOperatorSubscriber(subscriber, () => distinctKeys.clear(), noop));\r\n  });\r\n}\r\n"]},"metadata":{},"sourceType":"module"}