{"ast":null,"code":"import { Observable } from '../Observable';\nexport function fromSubscribable(subscribable) {\n  return new Observable(function (subscriber) {\n    return subscribable.subscribe(subscriber);\n  });\n}","map":{"version":3,"mappings":"AAAA,SAASA,UAAU,QAAQ,eAAe;AAc1C,OAAM,SAAUC,gBAAgB,CAAIC,YAA6B;EAC/D,OAAO,IAAIF,UAAU,CAAC,UAACG,UAAyB;IAAK,mBAAY,CAACC,SAAS,CAACD,UAAU,CAAC;EAAlC,CAAkC,CAAC;AAC1F","names":["Observable","fromSubscribable","subscribable","subscriber","subscribe"],"sources":["C:\\Users\\Amali\\Desktop\\Building_the_IoT_w._P2P_and_Cloud_Computing\\IoTProject\\node_modules\\rxjs\\src\\internal\\observable\\fromSubscribable.ts"],"sourcesContent":["import { Observable } from '../Observable';\r\nimport { Subscriber } from '../Subscriber';\r\nimport { Subscribable } from '../types';\r\n\r\n/**\r\n * Used to convert a subscribable to an observable.\r\n *\r\n * Currently, this is only used within internals.\r\n *\r\n * TODO: Discuss ObservableInput supporting \"Subscribable\".\r\n * https://github.com/ReactiveX/rxjs/issues/5909\r\n *\r\n * @param subscribable A subscribable\r\n */\r\nexport function fromSubscribable<T>(subscribable: Subscribable<T>) {\r\n  return new Observable((subscriber: Subscriber<T>) => subscribable.subscribe(subscriber));\r\n}\r\n"]},"metadata":{},"sourceType":"module"}