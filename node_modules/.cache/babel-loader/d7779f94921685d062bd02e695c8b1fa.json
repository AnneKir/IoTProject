{"ast":null,"code":"import { Subject } from '../Subject';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nimport { noop } from '../util/noop';\nexport function window(windowBoundaries) {\n  return operate(function (source, subscriber) {\n    var windowSubject = new Subject();\n    subscriber.next(windowSubject.asObservable());\n    var errorHandler = function errorHandler(err) {\n      windowSubject.error(err);\n      subscriber.error(err);\n    };\n    source.subscribe(createOperatorSubscriber(subscriber, function (value) {\n      return windowSubject === null || windowSubject === void 0 ? void 0 : windowSubject.next(value);\n    }, function () {\n      windowSubject.complete();\n      subscriber.complete();\n    }, errorHandler));\n    windowBoundaries.subscribe(createOperatorSubscriber(subscriber, function () {\n      windowSubject.complete();\n      subscriber.next(windowSubject = new Subject());\n    }, noop, errorHandler));\n    return function () {\n      windowSubject === null || windowSubject === void 0 ? void 0 : windowSubject.unsubscribe();\n      windowSubject = null;\n    };\n  });\n}","map":{"version":3,"mappings":"AAEA,SAASA,OAAO,QAAQ,YAAY;AACpC,SAASC,OAAO,QAAQ,cAAc;AACtC,SAASC,wBAAwB,QAAQ,sBAAsB;AAC/D,SAASC,IAAI,QAAQ,cAAc;AA6CnC,OAAM,SAAUC,MAAM,CAAIC,gBAAiC;EACzD,OAAOJ,OAAO,CAAC,UAACK,MAAM,EAAEC,UAAU;IAChC,IAAIC,aAAa,GAAe,IAAIR,OAAO,EAAK;IAEhDO,UAAU,CAACE,IAAI,CAACD,aAAa,CAACE,YAAY,EAAE,CAAC;IAE7C,IAAMC,YAAY,GAAG,SAAfA,YAAY,CAAIC,GAAQ;MAC5BJ,aAAa,CAACK,KAAK,CAACD,GAAG,CAAC;MACxBL,UAAU,CAACM,KAAK,CAACD,GAAG,CAAC;IACvB,CAAC;IAGDN,MAAM,CAACQ,SAAS,CACdZ,wBAAwB,CACtBK,UAAU,EACV,UAACQ,KAAK;MAAK,oBAAa,aAAbP,aAAa,uBAAbA,aAAa,CAAEC,IAAI,CAACM,KAAK,CAAC;IAA1B,CAA0B,EACrC;MACEP,aAAa,CAACQ,QAAQ,EAAE;MACxBT,UAAU,CAACS,QAAQ,EAAE;IACvB,CAAC,EACDL,YAAY,CACb,CACF;IAGDN,gBAAgB,CAACS,SAAS,CACxBZ,wBAAwB,CACtBK,UAAU,EACV;MACEC,aAAa,CAACQ,QAAQ,EAAE;MACxBT,UAAU,CAACE,IAAI,CAAED,aAAa,GAAG,IAAIR,OAAO,EAAE,CAAE;IAClD,CAAC,EACDG,IAAI,EACJQ,YAAY,CACb,CACF;IAED,OAAO;MAILH,aAAa,aAAbA,aAAa,uBAAbA,aAAa,CAAES,WAAW,EAAE;MAC5BT,aAAa,GAAG,IAAK;IACvB,CAAC;EACH,CAAC,CAAC;AACJ","names":["Subject","operate","createOperatorSubscriber","noop","window","windowBoundaries","source","subscriber","windowSubject","next","asObservable","errorHandler","err","error","subscribe","value","complete","unsubscribe"],"sources":["C:\\Users\\Amali\\Desktop\\Building_the_IoT_w._P2P_and_Cloud_Computing\\IoTProject\\node_modules\\rxjs\\src\\internal\\operators\\window.ts"],"sourcesContent":["import { Observable } from '../Observable';\r\nimport { OperatorFunction } from '../types';\r\nimport { Subject } from '../Subject';\r\nimport { operate } from '../util/lift';\r\nimport { createOperatorSubscriber } from './OperatorSubscriber';\r\nimport { noop } from '../util/noop';\r\n\r\n/**\r\n * Branch out the source Observable values as a nested Observable whenever\r\n * `windowBoundaries` emits.\r\n *\r\n * <span class=\"informal\">It's like {@link buffer}, but emits a nested Observable\r\n * instead of an array.</span>\r\n *\r\n * ![](window.png)\r\n *\r\n * Returns an Observable that emits windows of items it collects from the source\r\n * Observable. The output Observable emits connected, non-overlapping\r\n * windows. It emits the current window and opens a new one whenever the\r\n * Observable `windowBoundaries` emits an item. Because each window is an\r\n * Observable, the output is a higher-order Observable.\r\n *\r\n * ## Example\r\n *\r\n * In every window of 1 second each, emit at most 2 click events\r\n *\r\n * ```ts\r\n * import { fromEvent, interval, window, map, take, mergeAll } from 'rxjs';\r\n *\r\n * const clicks = fromEvent(document, 'click');\r\n * const sec = interval(1000);\r\n * const result = clicks.pipe(\r\n *   window(sec),\r\n *   map(win => win.pipe(take(2))), // take at most 2 emissions from each window\r\n *   mergeAll()                     // flatten the Observable-of-Observables\r\n * );\r\n * result.subscribe(x => console.log(x));\r\n * ```\r\n *\r\n * @see {@link windowCount}\r\n * @see {@link windowTime}\r\n * @see {@link windowToggle}\r\n * @see {@link windowWhen}\r\n * @see {@link buffer}\r\n *\r\n * @param {Observable<any>} windowBoundaries An Observable that completes the\r\n * previous window and starts a new window.\r\n * @return A function that returns an Observable of windows, which are\r\n * Observables emitting values of the source Observable.\r\n */\r\nexport function window<T>(windowBoundaries: Observable<any>): OperatorFunction<T, Observable<T>> {\r\n  return operate((source, subscriber) => {\r\n    let windowSubject: Subject<T> = new Subject<T>();\r\n\r\n    subscriber.next(windowSubject.asObservable());\r\n\r\n    const errorHandler = (err: any) => {\r\n      windowSubject.error(err);\r\n      subscriber.error(err);\r\n    };\r\n\r\n    // Subscribe to our source\r\n    source.subscribe(\r\n      createOperatorSubscriber(\r\n        subscriber,\r\n        (value) => windowSubject?.next(value),\r\n        () => {\r\n          windowSubject.complete();\r\n          subscriber.complete();\r\n        },\r\n        errorHandler\r\n      )\r\n    );\r\n\r\n    // Subscribe to the window boundaries.\r\n    windowBoundaries.subscribe(\r\n      createOperatorSubscriber(\r\n        subscriber,\r\n        () => {\r\n          windowSubject.complete();\r\n          subscriber.next((windowSubject = new Subject()));\r\n        },\r\n        noop,\r\n        errorHandler\r\n      )\r\n    );\r\n\r\n    return () => {\r\n      // Unsubscribing the subject ensures that anyone who has captured\r\n      // a reference to this window that tries to use it after it can\r\n      // no longer get values from the source will get an ObjectUnsubscribedError.\r\n      windowSubject?.unsubscribe();\r\n      windowSubject = null!;\r\n    };\r\n  });\r\n}\r\n"]},"metadata":{},"sourceType":"module"}