{"ast":null,"code":"import { combineLatest } from '../observable/combineLatest';\nimport { joinAllInternals } from './joinAllInternals';\nexport function combineLatestAll(project) {\n  return joinAllInternals(combineLatest, project);\n}","map":{"version":3,"mappings":"AAAA,SAASA,aAAa,QAAQ,6BAA6B;AAE3D,SAASC,gBAAgB,QAAQ,oBAAoB;AA6CrD,OAAM,SAAUC,gBAAgB,CAAIC,OAAsC;EACxE,OAAOF,gBAAgB,CAACD,aAAa,EAAEG,OAAO,CAAC;AACjD","names":["combineLatest","joinAllInternals","combineLatestAll","project"],"sources":["C:\\Users\\Amali\\Desktop\\Building_the_IoT_w._P2P_and_Cloud_Computing\\IoTProject\\node_modules\\rxjs\\src\\internal\\operators\\combineLatestAll.ts"],"sourcesContent":["import { combineLatest } from '../observable/combineLatest';\r\nimport { OperatorFunction, ObservableInput } from '../types';\r\nimport { joinAllInternals } from './joinAllInternals';\r\n\r\nexport function combineLatestAll<T>(): OperatorFunction<ObservableInput<T>, T[]>;\r\nexport function combineLatestAll<T>(): OperatorFunction<any, T[]>;\r\nexport function combineLatestAll<T, R>(project: (...values: T[]) => R): OperatorFunction<ObservableInput<T>, R>;\r\nexport function combineLatestAll<R>(project: (...values: Array<any>) => R): OperatorFunction<any, R>;\r\n\r\n/**\r\n * Flattens an Observable-of-Observables by applying {@link combineLatest} when the Observable-of-Observables completes.\r\n *\r\n * `combineLatestAll` takes an Observable of Observables, and collects all Observables from it. Once the outer Observable completes,\r\n * it subscribes to all collected Observables and combines their values using the {@link combineLatest} strategy, such that:\r\n *\r\n * * Every time an inner Observable emits, the output Observable emits\r\n * * When the returned observable emits, it emits all of the latest values by:\r\n *    * If a `project` function is provided, it is called with each recent value from each inner Observable in whatever order they\r\n *      arrived, and the result of the `project` function is what is emitted by the output Observable.\r\n *    * If there is no `project` function, an array of all the most recent values is emitted by the output Observable.\r\n *\r\n * ## Example\r\n *\r\n * Map two click events to a finite interval Observable, then apply `combineLatestAll`\r\n *\r\n * ```ts\r\n * import { fromEvent, map, interval, take, combineLatestAll } from 'rxjs';\r\n *\r\n * const clicks = fromEvent(document, 'click');\r\n * const higherOrder = clicks.pipe(\r\n *   map(() => interval(Math.random() * 2000).pipe(take(3))),\r\n *   take(2)\r\n * );\r\n * const result = higherOrder.pipe(combineLatestAll());\r\n *\r\n * result.subscribe(x => console.log(x));\r\n * ```\r\n *\r\n * @see {@link combineLatest}\r\n * @see {@link combineLatestWith}\r\n * @see {@link mergeAll}\r\n *\r\n * @param project optional function to map the most recent values from each inner Observable into a new result.\r\n * Takes each of the most recent values from each collected inner Observable as arguments, in order.\r\n * @return A function that returns an Observable that flattens Observables\r\n * emitted by the source Observable.\r\n */\r\nexport function combineLatestAll<R>(project?: (...values: Array<any>) => R) {\r\n  return joinAllInternals(combineLatest, project);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}