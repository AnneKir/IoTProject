{"ast":null,"code":"import { observeNotification } from '../Notification';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function dematerialize() {\n  return operate(function (source, subscriber) {\n    source.subscribe(createOperatorSubscriber(subscriber, function (notification) {\n      return observeNotification(notification, subscriber);\n    }));\n  });\n}","map":{"version":3,"mappings":"AAAA,SAASA,mBAAmB,QAAQ,iBAAiB;AAErD,SAASC,OAAO,QAAQ,cAAc;AACtC,SAASC,wBAAwB,QAAQ,sBAAsB;AAkD/D,OAAM,SAAUC,aAAa;EAC3B,OAAOF,OAAO,CAAC,UAACG,MAAM,EAAEC,UAAU;IAChCD,MAAM,CAACE,SAAS,CAACJ,wBAAwB,CAACG,UAAU,EAAE,UAACE,YAAY;MAAK,0BAAmB,CAACA,YAAY,EAAEF,UAAU,CAAC;IAA7C,CAA6C,CAAC,CAAC;EACzH,CAAC,CAAC;AACJ","names":["observeNotification","operate","createOperatorSubscriber","dematerialize","source","subscriber","subscribe","notification"],"sources":["C:\\Users\\Amali\\Desktop\\Building_the_IoT_w._P2P_and_Cloud_Computing\\IoTProject\\node_modules\\rxjs\\src\\internal\\operators\\dematerialize.ts"],"sourcesContent":["import { observeNotification } from '../Notification';\r\nimport { OperatorFunction, ObservableNotification, ValueFromNotification } from '../types';\r\nimport { operate } from '../util/lift';\r\nimport { createOperatorSubscriber } from './OperatorSubscriber';\r\n\r\n/**\r\n * Converts an Observable of {@link ObservableNotification} objects into the emissions\r\n * that they represent.\r\n *\r\n * <span class=\"informal\">Unwraps {@link ObservableNotification} objects as actual `next`,\r\n * `error` and `complete` emissions. The opposite of {@link materialize}.</span>\r\n *\r\n * ![](dematerialize.png)\r\n *\r\n * `dematerialize` is assumed to operate an Observable that only emits\r\n * {@link ObservableNotification} objects as `next` emissions, and does not emit any\r\n * `error`. Such Observable is the output of a `materialize` operation. Those\r\n * notifications are then unwrapped using the metadata they contain, and emitted\r\n * as `next`, `error`, and `complete` on the output Observable.\r\n *\r\n * Use this operator in conjunction with {@link materialize}.\r\n *\r\n * ## Example\r\n *\r\n * Convert an Observable of Notifications to an actual Observable\r\n *\r\n * ```ts\r\n * import { NextNotification, ErrorNotification, of, dematerialize } from 'rxjs';\r\n *\r\n * const notifA: NextNotification<string> = { kind: 'N', value: 'A' };\r\n * const notifB: NextNotification<string> = { kind: 'N', value: 'B' };\r\n * const notifE: ErrorNotification = { kind: 'E', error: new TypeError('x.toUpperCase is not a function') };\r\n *\r\n * const materialized = of(notifA, notifB, notifE);\r\n *\r\n * const upperCase = materialized.pipe(dematerialize());\r\n * upperCase.subscribe({\r\n *   next: x => console.log(x),\r\n *   error: e => console.error(e)\r\n * });\r\n *\r\n * // Results in:\r\n * // A\r\n * // B\r\n * // TypeError: x.toUpperCase is not a function\r\n * ```\r\n *\r\n * @see {@link materialize}\r\n *\r\n * @return A function that returns an Observable that emits items and\r\n * notifications embedded in Notification objects emitted by the source\r\n * Observable.\r\n */\r\nexport function dematerialize<N extends ObservableNotification<any>>(): OperatorFunction<N, ValueFromNotification<N>> {\r\n  return operate((source, subscriber) => {\r\n    source.subscribe(createOperatorSubscriber(subscriber, (notification) => observeNotification(notification, subscriber)));\r\n  });\r\n}\r\n"]},"metadata":{},"sourceType":"module"}