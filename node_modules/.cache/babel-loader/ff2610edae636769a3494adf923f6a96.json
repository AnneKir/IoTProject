{"ast":null,"code":"import { asyncScheduler } from '../scheduler/async';\nimport { defaultThrottleConfig, throttle } from './throttle';\nimport { timer } from '../observable/timer';\nexport function throttleTime(duration, scheduler, config) {\n  if (scheduler === void 0) {\n    scheduler = asyncScheduler;\n  }\n  if (config === void 0) {\n    config = defaultThrottleConfig;\n  }\n  var duration$ = timer(duration, scheduler);\n  return throttle(function () {\n    return duration$;\n  }, config);\n}","map":{"version":3,"mappings":"AAAA,SAASA,cAAc,QAAQ,oBAAoB;AACnD,SAASC,qBAAqB,EAAEC,QAAQ,QAAQ,YAAY;AAE5D,SAASC,KAAK,QAAQ,qBAAqB;AAmD3C,OAAM,SAAUC,YAAY,CAC1BC,QAAgB,EAChBC,SAAyC,EACzCC,MAA8B;EAD9B;IAAAD,0BAAyC;EAAA;EACzC;IAAAC,8BAA8B;EAAA;EAE9B,IAAMC,SAAS,GAAGL,KAAK,CAACE,QAAQ,EAAEC,SAAS,CAAC;EAC5C,OAAOJ,QAAQ,CAAC;IAAM,gBAAS;EAAT,CAAS,EAAEK,MAAM,CAAC;AAC1C","names":["asyncScheduler","defaultThrottleConfig","throttle","timer","throttleTime","duration","scheduler","config","duration$"],"sources":["C:\\Users\\Amali\\Desktop\\Building_the_IoT_w._P2P_and_Cloud_Computing\\IoTProject\\node_modules\\rxjs\\src\\internal\\operators\\throttleTime.ts"],"sourcesContent":["import { asyncScheduler } from '../scheduler/async';\r\nimport { defaultThrottleConfig, throttle } from './throttle';\r\nimport { MonoTypeOperatorFunction, SchedulerLike } from '../types';\r\nimport { timer } from '../observable/timer';\r\n\r\n/**\r\n * Emits a value from the source Observable, then ignores subsequent source\r\n * values for `duration` milliseconds, then repeats this process.\r\n *\r\n * <span class=\"informal\">Lets a value pass, then ignores source values for the\r\n * next `duration` milliseconds.</span>\r\n *\r\n * ![](throttleTime.png)\r\n *\r\n * `throttleTime` emits the source Observable values on the output Observable\r\n * when its internal timer is disabled, and ignores source values when the timer\r\n * is enabled. Initially, the timer is disabled. As soon as the first source\r\n * value arrives, it is forwarded to the output Observable, and then the timer\r\n * is enabled. After `duration` milliseconds (or the time unit determined\r\n * internally by the optional `scheduler`) has passed, the timer is disabled,\r\n * and this process repeats for the next source value. Optionally takes a\r\n * {@link SchedulerLike} for managing timers.\r\n *\r\n * ## Examples\r\n *\r\n * ### Limit click rate\r\n *\r\n * Emit clicks at a rate of at most one click per second\r\n *\r\n * ```ts\r\n * import { fromEvent, throttleTime } from 'rxjs';\r\n *\r\n * const clicks = fromEvent(document, 'click');\r\n * const result = clicks.pipe(throttleTime(1000));\r\n *\r\n * result.subscribe(x => console.log(x));\r\n * ```\r\n *\r\n * @see {@link auditTime}\r\n * @see {@link debounceTime}\r\n * @see {@link delay}\r\n * @see {@link sampleTime}\r\n * @see {@link throttle}\r\n *\r\n * @param duration Time to wait before emitting another value after\r\n * emitting the last value, measured in milliseconds or the time unit determined\r\n * internally by the optional `scheduler`.\r\n * @param scheduler The {@link SchedulerLike} to use for\r\n * managing the timers that handle the throttling. Defaults to {@link asyncScheduler}.\r\n * @param config a configuration object to define `leading` and\r\n * `trailing` behavior. Defaults to `{ leading: true, trailing: false }`.\r\n * @return A function that returns an Observable that performs the throttle\r\n * operation to limit the rate of emissions from the source.\r\n */\r\nexport function throttleTime<T>(\r\n  duration: number,\r\n  scheduler: SchedulerLike = asyncScheduler,\r\n  config = defaultThrottleConfig\r\n): MonoTypeOperatorFunction<T> {\r\n  const duration$ = timer(duration, scheduler);\r\n  return throttle(() => duration$, config);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}