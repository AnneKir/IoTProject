{"ast":null,"code":"import { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nimport { identity } from '../util/identity';\nimport { timer } from '../observable/timer';\nimport { innerFrom } from '../observable/innerFrom';\nexport function retry(configOrCount) {\n  if (configOrCount === void 0) {\n    configOrCount = Infinity;\n  }\n  var config;\n  if (configOrCount && typeof configOrCount === 'object') {\n    config = configOrCount;\n  } else {\n    config = {\n      count: configOrCount\n    };\n  }\n  var _a = config.count,\n    count = _a === void 0 ? Infinity : _a,\n    delay = config.delay,\n    _b = config.resetOnSuccess,\n    resetOnSuccess = _b === void 0 ? false : _b;\n  return count <= 0 ? identity : operate(function (source, subscriber) {\n    var soFar = 0;\n    var innerSub;\n    var subscribeForRetry = function () {\n      var syncUnsub = false;\n      innerSub = source.subscribe(createOperatorSubscriber(subscriber, function (value) {\n        if (resetOnSuccess) {\n          soFar = 0;\n        }\n        subscriber.next(value);\n      }, undefined, function (err) {\n        if (soFar++ < count) {\n          var resub_1 = function () {\n            if (innerSub) {\n              innerSub.unsubscribe();\n              innerSub = null;\n              subscribeForRetry();\n            } else {\n              syncUnsub = true;\n            }\n          };\n          if (delay != null) {\n            var notifier = typeof delay === 'number' ? timer(delay) : innerFrom(delay(err, soFar));\n            var notifierSubscriber_1 = createOperatorSubscriber(subscriber, function () {\n              notifierSubscriber_1.unsubscribe();\n              resub_1();\n            }, function () {\n              subscriber.complete();\n            });\n            notifier.subscribe(notifierSubscriber_1);\n          } else {\n            resub_1();\n          }\n        } else {\n          subscriber.error(err);\n        }\n      }));\n      if (syncUnsub) {\n        innerSub.unsubscribe();\n        innerSub = null;\n        subscribeForRetry();\n      }\n    };\n    subscribeForRetry();\n  });\n}","map":{"version":3,"mappings":"AACA,SAASA,OAAO,QAAQ,cAAc;AAEtC,SAASC,wBAAwB,QAAQ,sBAAsB;AAC/D,SAASC,QAAQ,QAAQ,kBAAkB;AAC3C,SAASC,KAAK,QAAQ,qBAAqB;AAC3C,SAASC,SAAS,QAAQ,yBAAyB;AA4EnD,OAAM,SAAUC,KAAK,CAAIC,aAA8C;EAA9C;IAAAA,wBAA8C;EAAA;EACrE,IAAIC,MAAmB;EACvB,IAAID,aAAa,IAAI,OAAOA,aAAa,KAAK,QAAQ,EAAE;IACtDC,MAAM,GAAGD,aAAa;GACvB,MAAM;IACLC,MAAM,GAAG;MACPC,KAAK,EAAEF;KACR;;EAEK,SAAoEC,MAAM,MAA1D;IAAhBC,KAAK,mBAAGC,QAAQ;IAAEC,KAAK,GAA6CH,MAAM,MAAnD;IAAEI,KAA2CJ,MAAM,eAAX;IAAtBK,cAAc,mBAAG,KAAK;EAEvE,OAAOJ,KAAK,IAAI,CAAC,GACbN,QAAQ,GACRF,OAAO,CAAC,UAACa,MAAM,EAAEC,UAAU;IACzB,IAAIC,KAAK,GAAG,CAAC;IACb,IAAIC,QAA6B;IACjC,IAAMC,iBAAiB,GAAG;MACxB,IAAIC,SAAS,GAAG,KAAK;MACrBF,QAAQ,GAAGH,MAAM,CAACM,SAAS,CACzBlB,wBAAwB,CACtBa,UAAU,EACV,UAACM,KAAK;QAEJ,IAAIR,cAAc,EAAE;UAClBG,KAAK,GAAG,CAAC;;QAEXD,UAAU,CAACO,IAAI,CAACD,KAAK,CAAC;MACxB,CAAC,EAEDE,SAAS,EACT,UAACC,GAAG;QACF,IAAIR,KAAK,EAAE,GAAGP,KAAK,EAAE;UAEnB,IAAMgB,OAAK,GAAG;YACZ,IAAIR,QAAQ,EAAE;cACZA,QAAQ,CAACS,WAAW,EAAE;cACtBT,QAAQ,GAAG,IAAI;cACfC,iBAAiB,EAAE;aACpB,MAAM;cACLC,SAAS,GAAG,IAAI;;UAEpB,CAAC;UAED,IAAIR,KAAK,IAAI,IAAI,EAAE;YAIjB,IAAMgB,QAAQ,GAAG,OAAOhB,KAAK,KAAK,QAAQ,GAAGP,KAAK,CAACO,KAAK,CAAC,GAAGN,SAAS,CAACM,KAAK,CAACa,GAAG,EAAER,KAAK,CAAC,CAAC;YACxF,IAAMY,oBAAkB,GAAG1B,wBAAwB,CACjDa,UAAU,EACV;cAIEa,oBAAkB,CAACF,WAAW,EAAE;cAChCD,OAAK,EAAE;YACT,CAAC,EACD;cAGEV,UAAU,CAACc,QAAQ,EAAE;YACvB,CAAC,CACF;YACDF,QAAQ,CAACP,SAAS,CAACQ,oBAAkB,CAAC;WACvC,MAAM;YAELH,OAAK,EAAE;;SAEV,MAAM;UAGLV,UAAU,CAACe,KAAK,CAACN,GAAG,CAAC;;MAEzB,CAAC,CACF,CACF;MACD,IAAIL,SAAS,EAAE;QACbF,QAAQ,CAACS,WAAW,EAAE;QACtBT,QAAQ,GAAG,IAAI;QACfC,iBAAiB,EAAE;;IAEvB,CAAC;IACDA,iBAAiB,EAAE;EACrB,CAAC,CAAC;AACR","names":["operate","createOperatorSubscriber","identity","timer","innerFrom","retry","configOrCount","config","count","Infinity","delay","_b","resetOnSuccess","source","subscriber","soFar","innerSub","subscribeForRetry","syncUnsub","subscribe","value","next","undefined","err","resub_1","unsubscribe","notifier","notifierSubscriber_1","complete","error"],"sources":["C:\\Users\\Amali\\Desktop\\Building_the_IoT_w._P2P_and_Cloud_Computing\\IoTProject\\node_modules\\rxjs\\src\\internal\\operators\\retry.ts"],"sourcesContent":["import { MonoTypeOperatorFunction, ObservableInput } from '../types';\r\nimport { operate } from '../util/lift';\r\nimport { Subscription } from '../Subscription';\r\nimport { createOperatorSubscriber } from './OperatorSubscriber';\r\nimport { identity } from '../util/identity';\r\nimport { timer } from '../observable/timer';\r\nimport { innerFrom } from '../observable/innerFrom';\r\n\r\n/**\r\n * The {@link retry} operator configuration object. `retry` either accepts a `number`\r\n * or an object described by this interface.\r\n */\r\nexport interface RetryConfig {\r\n  /**\r\n   * The maximum number of times to retry. If `count` is omitted, `retry` will try to\r\n   * resubscribe on errors infinite number of times.\r\n   */\r\n  count?: number;\r\n  /**\r\n   * The number of milliseconds to delay before retrying, OR a function to\r\n   * return a notifier for delaying. If a function is given, that function should\r\n   * return a notifier that, when it emits will retry the source. If the notifier\r\n   * completes _without_ emitting, the resulting observable will complete without error,\r\n   * if the notifier errors, the error will be pushed to the result.\r\n   */\r\n  delay?: number | ((error: any, retryCount: number) => ObservableInput<any>);\r\n  /**\r\n   * Whether or not to reset the retry counter when the retried subscription\r\n   * emits its first value.\r\n   */\r\n  resetOnSuccess?: boolean;\r\n}\r\n\r\nexport function retry<T>(count?: number): MonoTypeOperatorFunction<T>;\r\nexport function retry<T>(config: RetryConfig): MonoTypeOperatorFunction<T>;\r\n\r\n/**\r\n * Returns an Observable that mirrors the source Observable with the exception of an `error`.\r\n *\r\n * If the source Observable calls `error`, this method will resubscribe to the source Observable for a maximum of\r\n * `count` resubscriptions rather than propagating the `error` call.\r\n *\r\n * ![](retry.png)\r\n *\r\n * The number of retries is determined by the `count` parameter. It can be set either by passing a number to\r\n * `retry` function or by setting `count` property when `retry` is configured using {@link RetryConfig}. If\r\n * `count` is omitted, `retry` will try to resubscribe on errors infinite number of times.\r\n *\r\n * Any and all items emitted by the source Observable will be emitted by the resulting Observable, even those\r\n * emitted during failed subscriptions. For example, if an Observable fails at first but emits `[1, 2]` then\r\n * succeeds the second time and emits: `[1, 2, 3, 4, 5, complete]` then the complete stream of emissions and\r\n * notifications would be: `[1, 2, 1, 2, 3, 4, 5, complete]`.\r\n *\r\n * ## Example\r\n *\r\n * ```ts\r\n * import { interval, mergeMap, throwError, of, retry } from 'rxjs';\r\n *\r\n * const source = interval(1000);\r\n * const result = source.pipe(\r\n *   mergeMap(val => val > 5 ? throwError(() => 'Error!') : of(val)),\r\n *   retry(2) // retry 2 times on error\r\n * );\r\n *\r\n * result.subscribe({\r\n *   next: value => console.log(value),\r\n *   error: err => console.log(`${ err }: Retried 2 times then quit!`)\r\n * });\r\n *\r\n * // Output:\r\n * // 0..1..2..3..4..5..\r\n * // 0..1..2..3..4..5..\r\n * // 0..1..2..3..4..5..\r\n * // 'Error!: Retried 2 times then quit!'\r\n * ```\r\n *\r\n * @see {@link retryWhen}\r\n *\r\n * @param configOrCount - Either number of retry attempts before failing or a {@link RetryConfig} object.\r\n * @return A function that returns an Observable that will resubscribe to the\r\n * source stream when the source stream errors, at most `count` times.\r\n */\r\nexport function retry<T>(configOrCount: number | RetryConfig = Infinity): MonoTypeOperatorFunction<T> {\r\n  let config: RetryConfig;\r\n  if (configOrCount && typeof configOrCount === 'object') {\r\n    config = configOrCount;\r\n  } else {\r\n    config = {\r\n      count: configOrCount as number,\r\n    };\r\n  }\r\n  const { count = Infinity, delay, resetOnSuccess: resetOnSuccess = false } = config;\r\n\r\n  return count <= 0\r\n    ? identity\r\n    : operate((source, subscriber) => {\r\n        let soFar = 0;\r\n        let innerSub: Subscription | null;\r\n        const subscribeForRetry = () => {\r\n          let syncUnsub = false;\r\n          innerSub = source.subscribe(\r\n            createOperatorSubscriber(\r\n              subscriber,\r\n              (value) => {\r\n                // If we're resetting on success\r\n                if (resetOnSuccess) {\r\n                  soFar = 0;\r\n                }\r\n                subscriber.next(value);\r\n              },\r\n              // Completions are passed through to consumer.\r\n              undefined,\r\n              (err) => {\r\n                if (soFar++ < count) {\r\n                  // We are still under our retry count\r\n                  const resub = () => {\r\n                    if (innerSub) {\r\n                      innerSub.unsubscribe();\r\n                      innerSub = null;\r\n                      subscribeForRetry();\r\n                    } else {\r\n                      syncUnsub = true;\r\n                    }\r\n                  };\r\n\r\n                  if (delay != null) {\r\n                    // The user specified a retry delay.\r\n                    // They gave us a number, use a timer, otherwise, it's a function,\r\n                    // and we're going to call it to get a notifier.\r\n                    const notifier = typeof delay === 'number' ? timer(delay) : innerFrom(delay(err, soFar));\r\n                    const notifierSubscriber = createOperatorSubscriber(\r\n                      subscriber,\r\n                      () => {\r\n                        // After we get the first notification, we\r\n                        // unsubscribe from the notifier, because we don't want anymore\r\n                        // and we resubscribe to the source.\r\n                        notifierSubscriber.unsubscribe();\r\n                        resub();\r\n                      },\r\n                      () => {\r\n                        // The notifier completed without emitting.\r\n                        // The author is telling us they want to complete.\r\n                        subscriber.complete();\r\n                      }\r\n                    );\r\n                    notifier.subscribe(notifierSubscriber);\r\n                  } else {\r\n                    // There was no notifier given. Just resub immediately.\r\n                    resub();\r\n                  }\r\n                } else {\r\n                  // We're past our maximum number of retries.\r\n                  // Just send along the error.\r\n                  subscriber.error(err);\r\n                }\r\n              }\r\n            )\r\n          );\r\n          if (syncUnsub) {\r\n            innerSub.unsubscribe();\r\n            innerSub = null;\r\n            subscribeForRetry();\r\n          }\r\n        };\r\n        subscribeForRetry();\r\n      });\r\n}\r\n"]},"metadata":{},"sourceType":"module"}