{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Amali\\\\Desktop\\\\Building_the_IoT_w._P2P_and_Cloud_Computing\\\\IoTProject\\\\src\\\\App.tsx\";\n// import logo from './logo.svg';\nimport { Grid, Typography } from '@mui/material';\nimport './App.css';\n// import './first';\n// import wrtc from 'wrtc';\n\nimport React from 'react';\n// import HookMqtt from 'MQTT_Hook';\n// import paho from 'Paho'';\n\nimport mqtt from 'mqtt';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  // const [connectStatus, setConnectStatus] = useState(\"\");\n  // const [client, setClient] = useState<MqttClient>(() => MqttClient);\n  // const mqttConnect = (host: string, mqttOption?: mqtt.IClientOptions) => {\n  //   setConnectStatus('Connecting');\n  //   const client: MqttClient = mqtt.connect(host, mqttOption);\n  //   setClient(() => client);\n  // }\n\n  const url = \"tls://diotp2p.mooo.com:8883\";\n  const options = {\n    port: 8883,\n    host: \"diotp2p.mooo.com\",\n    // protocol: 'ssl',\n    protocolId: \"SSL\",\n    clientId: \"peer1\",\n    username: \"RainbowDash\",\n    password: \"kw8x5vaTh2kcrSWN\",\n    rejectUnauthorized: false\n  };\n\n  // const clientConnectionOptions = {\n  //   keepalive: 100,\n  //   protocolId: 'MQTT',\n  //   protocolVersion: 4,\n  //   clean: true,\n  //   reconnectPeriod: 1000,\n  //   connectTimeout: 30 * 3000,\n  //   will: {\n  //     topic: 'WillMsg',\n  //     payload: 'Connection Closed abnormally..!',\n  //     qos: 0,\n  //     retain: false\n  //   },\n  //   rejectUnauthorized: false\n  // };\n\n  const client = mqtt.connect(url, options);\n  client.on('connect', function () {\n    console.log(\"Im funckign connetced !!!!!!!!!!!!!!!!\");\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        children: /*#__PURE__*/_jsxDEV(Typography, {\n          children: \"Hello fuckers\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this);\n}\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Grid","Typography","React","mqtt","App","url","options","port","host","protocolId","clientId","username","password","rejectUnauthorized","client","connect","on","console","log"],"sources":["C:/Users/Amali/Desktop/Building_the_IoT_w._P2P_and_Cloud_Computing/IoTProject/src/App.tsx"],"sourcesContent":["// import logo from './logo.svg';\r\nimport { Grid, Paper, Typography, Button, TextField } from '@mui/material';\r\nimport './App.css';\r\n// import './first';\r\n// import wrtc from 'wrtc';\r\nimport ReactDOM from 'react-dom/client';\r\nimport React, { useState } from 'react';\r\n// import HookMqtt from 'MQTT_Hook';\r\n// import paho from 'Paho'';\r\nimport { HookMqtt } from './components/Hook/index'\r\nimport { Connection } from './components/Hook/Connection';\r\nimport { Publisher } from './components/Hook/Publisher';\r\nimport SimplePeer, { SignalData, Instance } from 'simple-peer';\r\nimport { io, Socket } from 'socket.io-client';\r\nimport { ServerToClientEvents, ClientToServerEvents } from \"./SocketTypes\";\r\nimport {\r\n  Setup,\r\n  JoinRequest,\r\n  ClientOffer,\r\n  State,\r\n  setModel,\r\n  getId,\r\n  setRoom,\r\n  Peers,\r\n  JoinRoomButton,\r\n  PeerVideo,\r\n  ReactSimplePeerModel\r\n} from 'react-simple-peer';\r\nimport { urlToHttpOptions } from 'url';\r\nimport mqtt from 'mqtt';\r\n\r\n\r\nfunction App(): JSX.Element {\r\n\r\n  // const [connectStatus, setConnectStatus] = useState(\"\");\r\n  // const [client, setClient] = useState<MqttClient>(() => MqttClient);\r\n  // const mqttConnect = (host: string, mqttOption?: mqtt.IClientOptions) => {\r\n  //   setConnectStatus('Connecting');\r\n  //   const client: MqttClient = mqtt.connect(host, mqttOption);\r\n  //   setClient(() => client);\r\n  // }\r\n\r\n  const url = \"tls://diotp2p.mooo.com:8883\"\r\n  const options = {\r\n    port: 8883,\r\n    host: \"diotp2p.mooo.com\",\r\n    // protocol: 'ssl',\r\n    protocolId: \"SSL\",\r\n    clientId: \"peer1\",\r\n    username: \"RainbowDash\",\r\n    password: \"kw8x5vaTh2kcrSWN\",\r\n    rejectUnauthorized: false\r\n  }\r\n\r\n  // const clientConnectionOptions = {\r\n  //   keepalive: 100,\r\n  //   protocolId: 'MQTT',\r\n  //   protocolVersion: 4,\r\n  //   clean: true,\r\n  //   reconnectPeriod: 1000,\r\n  //   connectTimeout: 30 * 3000,\r\n  //   will: {\r\n  //     topic: 'WillMsg',\r\n  //     payload: 'Connection Closed abnormally..!',\r\n  //     qos: 0,\r\n  //     retain: false\r\n  //   },\r\n  //   rejectUnauthorized: false\r\n  // };\r\n\r\n  const client = mqtt.connect(url, options)\r\n\r\n  client.on('connect', function () {\r\n    console.log(\"Im funckign connetced !!!!!!!!!!!!!!!!\")\r\n  });\r\n\r\n\r\n\r\n\r\n  return (\r\n    <div className='App'>\r\n      {/* <HookMqtt /> */}\r\n      <Grid container alignItems={\"center\"} justifyContent=\"center\">\r\n        <Grid item>\r\n          <Typography>Hello fuckers</Typography>\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":";AAAA;AACA,SAASA,IAAI,EAASC,UAAU,QAA2B,eAAe;AAC1E,OAAO,WAAW;AAClB;AACA;;AAEA,OAAOC,KAAK,MAAoB,OAAO;AACvC;AACA;;AAqBA,OAAOC,IAAI,MAAM,MAAM;AAAC;AAGxB,SAASC,GAAG,GAAgB;EAE1B;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,MAAMC,GAAG,GAAG,6BAA6B;EACzC,MAAMC,OAAO,GAAG;IACdC,IAAI,EAAE,IAAI;IACVC,IAAI,EAAE,kBAAkB;IACxB;IACAC,UAAU,EAAE,KAAK;IACjBC,QAAQ,EAAE,OAAO;IACjBC,QAAQ,EAAE,aAAa;IACvBC,QAAQ,EAAE,kBAAkB;IAC5BC,kBAAkB,EAAE;EACtB,CAAC;;EAED;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,MAAMC,MAAM,GAAGX,IAAI,CAACY,OAAO,CAACV,GAAG,EAAEC,OAAO,CAAC;EAEzCQ,MAAM,CAACE,EAAE,CAAC,SAAS,EAAE,YAAY;IAC/BC,OAAO,CAACC,GAAG,CAAC,wCAAwC,CAAC;EACvD,CAAC,CAAC;EAKF,oBACE;IAAK,SAAS,EAAC,KAAK;IAAA,uBAElB,QAAC,IAAI;MAAC,SAAS;MAAC,UAAU,EAAE,QAAS;MAAC,cAAc,EAAC,QAAQ;MAAA,uBAC3D,QAAC,IAAI;QAAC,IAAI;QAAA,uBACR,QAAC,UAAU;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAA2B;QAAA;QAAA;QAAA;MAAA;IACjC;MAAA;MAAA;MAAA;IAAA;EACF;IAAA;IAAA;IAAA;EAAA,QACH;AAEV;AAAC,KAzDQd,GAAG;AA2DZ,eAAeA,GAAG;AAAC;AAAA"},"metadata":{},"sourceType":"module"}