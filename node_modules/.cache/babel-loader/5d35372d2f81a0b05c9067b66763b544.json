{"ast":null,"code":"import { reduce } from './reduce';\nexport function count(predicate) {\n  return reduce(function (total, value, i) {\n    return !predicate || predicate(value, i) ? total + 1 : total;\n  }, 0);\n}","map":{"version":3,"mappings":"AACA,SAASA,MAAM,QAAQ,UAAU;AAyDjC,OAAM,SAAUC,KAAK,CAAIC,SAAgD;EACvE,OAAOF,MAAM,CAAC,UAACG,KAAK,EAAEC,KAAK,EAAEC,CAAC;IAAK,OAAC,CAACH,SAAS,IAAIA,SAAS,CAACE,KAAK,EAAEC,CAAC,CAAC,GAAGF,KAAK,GAAG,CAAC,GAAGA,KAAK;EAAtD,CAAuD,EAAE,CAAC,CAAC;AAChG","names":["reduce","count","predicate","total","value","i"],"sources":["C:\\Users\\Amali\\Desktop\\Building_the_IoT_w._P2P_and_Cloud_Computing\\IoTProject\\node_modules\\rxjs\\src\\internal\\operators\\count.ts"],"sourcesContent":["import { OperatorFunction } from '../types';\r\nimport { reduce } from './reduce';\r\n\r\n/**\r\n * Counts the number of emissions on the source and emits that number when the\r\n * source completes.\r\n *\r\n * <span class=\"informal\">Tells how many values were emitted, when the source\r\n * completes.</span>\r\n *\r\n * ![](count.png)\r\n *\r\n * `count` transforms an Observable that emits values into an Observable that\r\n * emits a single value that represents the number of values emitted by the\r\n * source Observable. If the source Observable terminates with an error, `count`\r\n * will pass this error notification along without emitting a value first. If\r\n * the source Observable does not terminate at all, `count` will neither emit\r\n * a value nor terminate. This operator takes an optional `predicate` function\r\n * as argument, in which case the output emission will represent the number of\r\n * source values that matched `true` with the `predicate`.\r\n *\r\n * ## Examples\r\n *\r\n * Counts how many seconds have passed before the first click happened\r\n *\r\n * ```ts\r\n * import { interval, fromEvent, takeUntil, count } from 'rxjs';\r\n *\r\n * const seconds = interval(1000);\r\n * const clicks = fromEvent(document, 'click');\r\n * const secondsBeforeClick = seconds.pipe(takeUntil(clicks));\r\n * const result = secondsBeforeClick.pipe(count());\r\n * result.subscribe(x => console.log(x));\r\n * ```\r\n *\r\n * Counts how many odd numbers are there between 1 and 7\r\n *\r\n * ```ts\r\n * import { range, count } from 'rxjs';\r\n *\r\n * const numbers = range(1, 7);\r\n * const result = numbers.pipe(count(i => i % 2 === 1));\r\n * result.subscribe(x => console.log(x));\r\n * // Results in:\r\n * // 4\r\n * ```\r\n *\r\n * @see {@link max}\r\n * @see {@link min}\r\n * @see {@link reduce}\r\n *\r\n * @param predicate A function that is used to analyze the value and the index and\r\n * determine whether or not to increment the count. Return `true` to increment the count,\r\n * and return `false` to keep the count the same.\r\n * If the predicate is not provided, every value will be counted.\r\n * @return A function that returns an Observable that emits one number that\r\n * represents the count of emissions.\r\n */\r\nexport function count<T>(predicate?: (value: T, index: number) => boolean): OperatorFunction<T, number> {\r\n  return reduce((total, value, i) => (!predicate || predicate(value, i) ? total + 1 : total), 0);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}