{"ast":null,"code":"import { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function map(project, thisArg) {\n  return operate(function (source, subscriber) {\n    var index = 0;\n    source.subscribe(createOperatorSubscriber(subscriber, function (value) {\n      subscriber.next(project.call(thisArg, value, index++));\n    }));\n  });\n}","map":{"version":3,"mappings":"AACA,SAASA,OAAO,QAAQ,cAAc;AACtC,SAASC,wBAAwB,QAAQ,sBAAsB;AA6C/D,OAAM,SAAUC,GAAG,CAAOC,OAAuC,EAAEC,OAAa;EAC9E,OAAOJ,OAAO,CAAC,UAACK,MAAM,EAAEC,UAAU;IAEhC,IAAIC,KAAK,GAAG,CAAC;IAGbF,MAAM,CAACG,SAAS,CACdP,wBAAwB,CAACK,UAAU,EAAE,UAACG,KAAQ;MAG5CH,UAAU,CAACI,IAAI,CAACP,OAAO,CAACQ,IAAI,CAACP,OAAO,EAAEK,KAAK,EAAEF,KAAK,EAAE,CAAC,CAAC;IACxD,CAAC,CAAC,CACH;EACH,CAAC,CAAC;AACJ","names":["operate","createOperatorSubscriber","map","project","thisArg","source","subscriber","index","subscribe","value","next","call"],"sources":["C:\\Users\\Amali\\Desktop\\Building_the_IoT_w._P2P_and_Cloud_Computing\\IoTProject\\node_modules\\rxjs\\src\\internal\\operators\\map.ts"],"sourcesContent":["import { OperatorFunction } from '../types';\r\nimport { operate } from '../util/lift';\r\nimport { createOperatorSubscriber } from './OperatorSubscriber';\r\n\r\nexport function map<T, R>(project: (value: T, index: number) => R): OperatorFunction<T, R>;\r\n/** @deprecated Use a closure instead of a `thisArg`. Signatures accepting a `thisArg` will be removed in v8. */\r\nexport function map<T, R, A>(project: (this: A, value: T, index: number) => R, thisArg: A): OperatorFunction<T, R>;\r\n\r\n/**\r\n * Applies a given `project` function to each value emitted by the source\r\n * Observable, and emits the resulting values as an Observable.\r\n *\r\n * <span class=\"informal\">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),\r\n * it passes each source value through a transformation function to get\r\n * corresponding output values.</span>\r\n *\r\n * ![](map.png)\r\n *\r\n * Similar to the well known `Array.prototype.map` function, this operator\r\n * applies a projection to each value and emits that projection in the output\r\n * Observable.\r\n *\r\n * ## Example\r\n *\r\n * Map every click to the `clientX` position of that click\r\n *\r\n * ```ts\r\n * import { fromEvent, map } from 'rxjs';\r\n *\r\n * const clicks = fromEvent<PointerEvent>(document, 'click');\r\n * const positions = clicks.pipe(map(ev => ev.clientX));\r\n *\r\n * positions.subscribe(x => console.log(x));\r\n * ```\r\n *\r\n * @see {@link mapTo}\r\n * @see {@link pluck}\r\n *\r\n * @param {function(value: T, index: number): R} project The function to apply\r\n * to each `value` emitted by the source Observable. The `index` parameter is\r\n * the number `i` for the i-th emission that has happened since the\r\n * subscription, starting from the number `0`.\r\n * @param {any} [thisArg] An optional argument to define what `this` is in the\r\n * `project` function.\r\n * @return A function that returns an Observable that emits the values from the\r\n * source Observable transformed by the given `project` function.\r\n */\r\nexport function map<T, R>(project: (value: T, index: number) => R, thisArg?: any): OperatorFunction<T, R> {\r\n  return operate((source, subscriber) => {\r\n    // The index of the value from the source. Used with projection.\r\n    let index = 0;\r\n    // Subscribe to the source, all errors and completions are sent along\r\n    // to the consumer.\r\n    source.subscribe(\r\n      createOperatorSubscriber(subscriber, (value: T) => {\r\n        // Call the projection function with the appropriate this context,\r\n        // and send the resulting value to the consumer.\r\n        subscriber.next(project.call(thisArg, value, index++));\r\n      })\r\n    );\r\n  });\r\n}\r\n"]},"metadata":{},"sourceType":"module"}