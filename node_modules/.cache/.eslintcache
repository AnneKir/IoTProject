[{"C:\\Users\\Amali\\Desktop\\Building_the_IoT_w._P2P_and_Cloud_Computing\\IoTProject\\src\\index.tsx":"1","C:\\Users\\Amali\\Desktop\\Building_the_IoT_w._P2P_and_Cloud_Computing\\IoTProject\\src\\reportWebVitals.ts":"2","C:\\Users\\Amali\\Desktop\\Building_the_IoT_w._P2P_and_Cloud_Computing\\IoTProject\\src\\App.tsx":"3","C:\\Users\\Amali\\Desktop\\Building_the_IoT_w._P2P_and_Cloud_Computing\\IoTProject\\src\\first.js":"4","C:\\Users\\Amali\\Desktop\\Building_the_IoT_w._P2P_and_Cloud_Computing\\IoTProject\\src\\client.js":"5"},{"size":554,"mtime":1667132284851,"results":"6","hashOfConfig":"7"},{"size":425,"mtime":1667132284807,"results":"8","hashOfConfig":"7"},{"size":3377,"mtime":1667315315578,"results":"9","hashOfConfig":"7"},{"size":1553,"mtime":1667314132382,"results":"10","hashOfConfig":"7"},{"size":1819,"mtime":1667314128579,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","suppressedMessages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"15"},"9984n0",{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"15"},{"filePath":"19","messages":"20","suppressedMessages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"26"},"C:\\Users\\Amali\\Desktop\\Building_the_IoT_w._P2P_and_Cloud_Computing\\IoTProject\\src\\index.tsx",[],[],[],"C:\\Users\\Amali\\Desktop\\Building_the_IoT_w._P2P_and_Cloud_Computing\\IoTProject\\src\\reportWebVitals.ts",[],[],"C:\\Users\\Amali\\Desktop\\Building_the_IoT_w._P2P_and_Cloud_Computing\\IoTProject\\src\\App.tsx",["31","32","33"],[],"import logo from './logo.svg';\r\nimport { Grid, Paper, Typography, Button, TextField } from '@mui/material';\r\nimport './App.css';\r\n// import './first';\r\nimport wrtc from 'wrtc';\r\nimport { startServer } from './first';\r\nimport SimplePeerWrapper from 'simple-peer-wrapper';\r\nimport { startClient } from './client';\r\nimport { Box } from '@mui/system';\r\n// import SimplePeerWrapper from 'simple-peer-wrapper';\r\n// import wrtc from 'wrtc';\r\n\r\nconst options = {\r\n  serverUrl: 'http://localhost:8081',\r\n  debugger: false,\r\n  simplePeerOptions: {\r\n    initiator: false,\r\n    trickle: false,\r\n    wrtc: wrtc\r\n  }\r\n};\r\n\r\nconst options2 = {\r\n  serverUrl: 'http://localhost:8081',\r\n  debugger: false,\r\n  simplePeerOptions: {\r\n    initiator: true,\r\n    trickle: false,\r\n    wrtc: wrtc\r\n  }\r\n};\r\n\r\ntype data = {\r\n  id: string;\r\n  data: object;\r\n}\r\n\r\nfunction rree() {\r\n  const spw = new SimplePeerWrapper(options);\r\n  console.log(\"ehek\")\r\n  spw.connect();\r\n  spw.on('connect', ()=>{\r\n    console.log(\"conection\");\r\n    spw.send(\"hej\");\r\n  });\r\n  spw.on('data', (data: data) => {\r\n    console.log(data.data.toString());\r\n  });\r\n\r\n}\r\n\r\nfunction first() {\r\n  const spw = new SimplePeerWrapper(options2);\r\n  console.log(\"eheooo\")\r\n  spw.connect();\r\n  spw.on('connect', ()=>{\r\n    console.log(\"conection\");\r\n    spw.send(\"heiij\");\r\n  });\r\n  spw.on('data', (data: data) => {\r\n    console.log(data.data.toString());\r\n  });\r\n  spw.on('error', (err: Error) => console.log('error', err))\r\n\r\n}\r\n\r\n\r\n// function gotData(data: Object) {\r\n//   // put the incoming data somewhere to use later\r\n//   let partnerMouse = data.data;\r\n//   console.log(\"got data: \" + partnerMouse.toString())\r\n// }\r\n\r\n// let count = 0;\r\n// function gotConnect(spw: SimplePeerWrapper) {\r\n//   console.log('peer connection open');\r\n//   count++;\r\n//   spw.send(\"hej\" + count.toString());\r\n// }\r\n\r\nfunction App(): JSX.Element {\r\n  return (\r\n    <div className=\"App\">\r\n      <Box padding={4}>\r\n        <Paper elevation={2}>\r\n          <Grid container alignItems={\"center\"} justifyContent={\"center\"} padding={2}>\r\n            <Grid item xs={6}>\r\n              <Typography>This is a website</Typography>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n              <Typography>Where u can upload picutes</Typography>\r\n            </Grid>\r\n            <Grid item marginTop={4} xs={10}>\r\n              This could be a thing\r\n            </Grid>\r\n            <Grid item marginTop={4} xs={\"auto\"}>\r\n              <Button onClick={()=> startClient()}> connect </Button>\r\n            </Grid>\r\n            <Grid item marginTop={4} xs={\"auto\"}>\r\n              <Button onClick={()=> startServer()}> start </Button>\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n            <TextField id=\"standard-basic\" label=\"Standard\" variant=\"standard\" />\r\n            </Grid>\r\n          </Grid>\r\n        </Paper>\r\n      </Box>\r\n      {/* <header className=\"App-header\"> */}\r\n      {/* <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n        <p>\r\n          Edit <code>src/App.tsx</code> and save to reload.\r\n        </p>\r\n        <a\r\n          className=\"App-link\"\r\n          href=\"https://reactjs.org\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          Learn React\r\n        </a> */}\r\n      {/* <Typography>Welcome</Typography> */}\r\n      {/* </header> */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\Amali\\Desktop\\Building_the_IoT_w._P2P_and_Cloud_Computing\\IoTProject\\src\\first.js",[],[],[],"C:\\Users\\Amali\\Desktop\\Building_the_IoT_w._P2P_and_Cloud_Computing\\IoTProject\\src\\client.js",["34","35"],[],"// https://github.com/lisajamhoury/simple-peer-wrapper\r\n\r\nimport React from 'react';\r\n// import Grid from '@material-ui/core/Grid';\r\n// import ReactDOM from 'react-dom/client';\r\n\r\nimport SimplePeerWrapper from 'simple-peer-wrapper';\r\nimport wrtc  from 'wrtc';\r\nconst id = Math.floor(Math.random() * 100);\r\n// in your client code - create a wrapper and connect to your server\r\nconst options = {\r\n  serverUrl: 'http://localhost:8081',\r\n  debugger: true,\r\n  simplePeerOptions: {\r\n    initiator: false,\r\n    trickle: false,\r\n    wrtc: wrtc\r\n  }\r\n};\r\n\r\nconst spw = new SimplePeerWrapper(options); // creates a socket connection to signaling server\r\nexport function startClient() {\r\n  spw.connect();  // initiates peer connection via socket connection\r\n  spw.on('connect', gotConnect);\r\n  spw.on('data', gotData);\r\n\r\n}\r\n\r\n\r\n\r\n// document.getElementById(\"incoming\");\r\n\r\n// make sure you close the connection before you close the window\r\n// window.onbeforeunload = () => {\r\n//   spw.close();\r\n// };\r\n\r\n// a global variable to hold data\r\nlet partnerMouse;\r\n\r\n// when we receive data, call the gotData function\r\n\r\n// this runs each time data is received\r\n// the incoming data is passed into the function\r\nfunction gotData(data) {\r\n  // put the incoming data somewhere to use later\r\n  partnerMouse = data.data;\r\n  console.log(\"got data: \" + partnerMouse.toString())\r\n}\r\n// document.querySelector()\r\n\r\nfunction gotConnect() {\r\n  console.log('peer connection open');\r\n  console.log(\"sending: hej from \" + id.toString());\r\n  spw.send(\"hej from \" + id.toString());\r\n}\r\n\r\nfunction sendMessage(msg) {\r\n  console.log('Sending: ' + msg.toString())\r\n  spw.send(msg);\r\n}\r\n\r\n// spw.on('close', () => {spw.close()})\r\n// window.onbeforeunload = () => {\r\n//   spw.close();\r\n// };\r\n\r\nspw.on('error', err => console.log('error', err))\r\n\r\n\r\n\r\n\r\n\r\n",{"ruleId":"36","severity":1,"message":"37","line":1,"column":8,"nodeType":"38","messageId":"39","endLine":1,"endColumn":12},{"ruleId":"36","severity":1,"message":"40","line":38,"column":10,"nodeType":"38","messageId":"39","endLine":38,"endColumn":14},{"ruleId":"36","severity":1,"message":"41","line":52,"column":10,"nodeType":"38","messageId":"39","endLine":52,"endColumn":15},{"ruleId":"42","severity":1,"message":"43","line":3,"column":8,"nodeType":"38","messageId":"39","endLine":3,"endColumn":13},{"ruleId":"42","severity":1,"message":"44","line":58,"column":10,"nodeType":"38","messageId":"39","endLine":58,"endColumn":21},"@typescript-eslint/no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'rree' is defined but never used.","'first' is defined but never used.","no-unused-vars","'React' is defined but never used.","'sendMessage' is defined but never used."]