"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const __1 = require("..");
const __2 = require("..");
const __3 = require("..");
const __4 = require("..");
const __5 = require("..");
const __6 = require("..");
const __7 = require("..");
const __8 = require("..");
const no_decorator_exception_1 = require("./no-decorator-exception");
const no_such_property_exception_1 = require("./no-such-property-exception");
describe('exception', function () {
    it('should return the error', function () {
        let e = new __1.Exception('error');
        expect(e.toString()).toEqual('Exception: error\n');
    });
});
describe('classCastException', function () {
    it('should return the error', function () {
        let e = new __2.ClassCastException('error');
        expect(e.toString()).toEqual('ClassCastException: error\n');
    });
});
describe('illegalArgumentException', function () {
    it('should return the error', function () {
        let e = new __3.IllegalArgumentException('error');
        expect(e.toString()).toEqual('IllegalArgumentException: error\n');
    });
});
describe('nullReferenceException', function () {
    it('should return the error', function () {
        let e = new __4.NullReferenceException('error');
        expect(e.toString()).toEqual('NullReferenceException: error\n');
    });
});
describe('unsupportedOperationException', function () {
    it('should return the error', function () {
        let e = new __5.UnsupportedOperationException('error');
        expect(e.toString()).toEqual('UnsupportedOperationException: error\n');
    });
});
describe('IndexOutOfBoundException', function () {
    it('should return the error', function () {
        let e = new __6.IndexOutOfBoundsException('error');
        expect(e.toString()).toEqual('IndexOutOfBoundsException: error\n');
    });
});
describe('InvalidMarkException', function () {
    it('should return the error', function () {
        let e = new __7.InvalidMarkException('error');
        expect(e.toString()).toEqual('InvalidMarkException: error\n');
    });
});
describe('IndexOutOfBoundException', function () {
    it('should return the error', function () {
        let e = new __6.IndexOutOfBoundsException('error');
        expect(e.toString()).toEqual('IndexOutOfBoundsException: error\n');
    });
});
describe('ReadOnlyBufferException', function () {
    it('should return the error', function () {
        let e = new __8.ReadOnlyBufferException('error');
        expect(e.toString()).toEqual('ReadOnlyBufferException: error\n');
    });
});
describe('NoDecoratorException', function () {
    it('should return the error', function () {
        let e = new no_decorator_exception_1.NoDecoratorException('error');
        expect(e.toString()).toEqual('NoDecoratorException: error\n');
    });
});
describe('NoSuchPropertyException', function () {
    it('should return the error', function () {
        let e = new no_such_property_exception_1.NoSuchPropertyException('error');
        expect(e.toString()).toEqual('NoSuchPropertyException: error\n');
    });
});
//# sourceMappingURL=exception.spec.js.map