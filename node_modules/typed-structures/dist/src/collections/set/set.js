"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
const __1 = require("../..");
const TsQDecorator_1 = require("../../tsQ/decorator/TsQDecorator");
class Set {
    constructor() {
        this._elements = [];
    }
    add(e) {
        if (e === null || e === undefined)
            throw new __1.NullReferenceException('The element cannot be null nor undefined');
        if (this.contains(e))
            return false;
        else {
            this._elements.push(e);
            return true;
        }
    }
    addAll(c) {
        let length = this._elements.length;
        c.forEach((element) => this.add(element));
        return this._elements.length !== length;
    }
    clear() {
        this._elements.length = 0;
    }
    contains(o) {
        if (o === null || o === undefined)
            throw new __1.NullReferenceException('The element cannot be null nor undefined');
        return this._elements
            .filter((e) => e === o).length > 0;
    }
    containsAll(c) {
        if (c === null || c === undefined)
            throw new __1.NullReferenceException('The collection cannot be null nor undefined');
        return c.every((e) => this.contains(e));
    }
    equals(o) {
        return this.size() === o.size() && o.toArray().every((e, index) => {
            if (e.equals)
                return e.equals(this._elements[index]);
            else
                return e === this._elements[index];
        });
    }
    hashCode() {
        let hash = 1;
        return this.toArray().reduce((accumulator, e) => {
            if (e.hashCode)
                hash = hash * 31 + e.hashCode();
            else
                hash = hash * 17 + +e;
            return hash;
        }, 0);
    }
    isEmpty() {
        return this._elements.length === 0;
    }
    remove(o) {
        if (o === null || o === undefined)
            throw new __1.NullReferenceException('The element cannot be null nor undefined');
        if (!this.contains(o))
            return false;
        else {
            this._elements = this._elements.filter((e) => e !== o);
            return true;
        }
    }
    removeAll(c) {
        if (c === null || c === undefined)
            throw new __1.NullReferenceException('The collection cannot be null nor undefined');
        let length = this._elements.length;
        c.forEach((e) => this.remove(e));
        return this._elements.length !== length;
    }
    retainAll(c) {
        if (c === null || c === undefined)
            throw new __1.NullReferenceException('The collection cannot be null nor undefined');
        let length = this._elements.length;
        let set = new Set();
        set.addAll(c);
        this._elements = this._elements.filter((e) => set.contains(e));
        return this._elements.length !== length;
    }
    size() {
        return this._elements.length;
    }
    toArray() {
        return this._elements;
    }
}
__decorate([
    TsQDecorator_1.TsQ()
], Set.prototype, "toArray", null);
exports.Set = Set;
//# sourceMappingURL=set.js.map