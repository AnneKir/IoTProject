"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const set_1 = require("./set");
const null_reference_exception_1 = require("../../exceptions/null-reference-exception");
describe('new Set', function () {
    it('should be empty', function () {
        let set = new set_1.Set();
        expect(set.size()).toBe(0);
    });
});
describe('add null and undefined', function () {
    it('should throw NullReferenceException', function () {
        let set = new set_1.Set();
        expect(() => set.add(null)).toThrow(new null_reference_exception_1.NullReferenceException('The element cannot be null nor undefined'));
        expect(() => set.add(undefined)).toThrow(new null_reference_exception_1.NullReferenceException('The element cannot be null nor undefined'));
    });
});
describe('add an already present value', function () {
    it('should return false', function () {
        let set = new set_1.Set();
        set.add(1);
        expect(set.add(1)).toBe(false);
    });
    it('should add nothing', function () {
        let set = new set_1.Set();
        set.add(1);
        set.add(1);
        expect(set.size()).toEqual(1);
    });
});
describe('add an not present value', function () {
    it('should return true', function () {
        let set = new set_1.Set();
        expect(set.add(1)).toBe(true);
    });
    it('should add the value', function () {
        let set = new set_1.Set();
        set.add(1);
        set.add(2);
        expect(set.size()).toEqual(2);
    });
});
describe('addAll', function () {
    it('should add as much as items as the array length', function () {
        let set = new set_1.Set();
        set.addAll([1, 2, 3, 4, 5]);
        expect(set.size()).toEqual(5);
    });
});
describe('clear', function () {
    it('should empty the set', function () {
        let set = new set_1.Set();
        set.addAll([1, 2, 3, 4, 5]);
        set.clear();
        expect(set.size()).toEqual(0);
    });
});
describe('contains null and undefined', function () {
    it('should throw NullReferenceException', function () {
        let set = new set_1.Set();
        expect(() => set.contains(null)).toThrow(new null_reference_exception_1.NullReferenceException('The element cannot be null nor undefined'));
        expect(() => set.contains(undefined)).toThrow(new null_reference_exception_1.NullReferenceException('The element cannot be null nor undefined'));
    });
});
describe('contains', function () {
    it('should be true', function () {
        let set = new set_1.Set();
        set.addAll([1, 2, 3, 4, 5]);
        expect(set.contains(1)).toBe(true);
    });
    it('should be false', function () {
        let set = new set_1.Set();
        set.addAll([1, 2, 3, 4, 5]);
        expect(set.contains(6)).toBe(false);
    });
});
describe('containsAll null and undefined', function () {
    it('should throw NullReferenceException', function () {
        let set = new set_1.Set();
        expect(() => set.containsAll(null)).toThrow(new null_reference_exception_1.NullReferenceException('The collection cannot be null nor undefined'));
        expect(() => set.containsAll(undefined)).toThrow(new null_reference_exception_1.NullReferenceException('The collection cannot be null nor undefined'));
    });
});
describe('containsAll', function () {
    it('should be true', function () {
        let set = new set_1.Set();
        set.addAll([1, 2, 3, 4, 5]);
        expect(set.containsAll([1, 2, 3])).toBe(true);
    });
    it('should be false', function () {
        let set = new set_1.Set();
        set.addAll([1, 2, 3, 4, 5]);
        expect(set.containsAll([1, 2, 6])).toBe(false);
    });
});
describe('equals', function () {
    it('should be true', function () {
        let a = new set_1.Set();
        a.addAll([1, 2, 3, 4, 5]);
        let b = new set_1.Set();
        b.addAll([1, 2, 3, 4, 5]);
        expect(a.equals(b)).toBe(true);
    });
    it('should be false', function () {
        let a = new set_1.Set();
        a.addAll([1, 2, 3, 4, 6]);
        let b = new set_1.Set();
        b.addAll([1, 2, 3, 4, 5]);
        expect(a.equals(b)).toBe(false);
    });
    class A {
        constructor(a) {
            this.a = a;
        }
        equals(a) {
            return a.a === this.a;
        }
    }
    it('should be true with object', function () {
        let a = new set_1.Set();
        a.addAll([new A('a'), new A('b'), new A('c'), new A('d')]);
        let b = new set_1.Set();
        b.addAll([new A('a'), new A('b'), new A('c'), new A('d')]);
        expect(a.equals(b)).toBe(true);
    });
    it('should be false with object', function () {
        let a = new set_1.Set();
        a.addAll([new A('a'), new A('b'), new A('c'), new A('e')]);
        let b = new set_1.Set();
        b.addAll([new A('a'), new A('b'), new A('c'), new A('d')]);
        expect(a.equals(b)).toBe(false);
    });
});
describe('hashCode of int', function () {
    it('should be the same', function () {
        let a = new set_1.Set();
        a.addAll([1, 2, 3, 4, 5]);
        let b = new set_1.Set();
        b.addAll([1, 2, 3, 4, 5]);
        expect(a.hashCode()).toEqual(b.hashCode());
    });
    it('should be different', function () {
        let a = new set_1.Set();
        a.addAll([1, 2, 3, 4, 6]);
        let b = new set_1.Set();
        b.addAll([1, 2, 3, 4, 5]);
        expect(a.hashCode()).not.toEqual(b.hashCode());
    });
});
describe('hashCode of object', function () {
    class A {
        constructor(a, b) {
            this.a = a;
            this.b = b;
        }
        hashCode() {
            let hash = 1;
            return Object.keys(this).reduce((accumulator, key) => {
                hash = hash * 17 + this[key];
                return hash;
            }, 0);
        }
    }
    it('should be the same', function () {
        let a = new set_1.Set();
        a.addAll([new A(1, 'a')]);
        let b = new set_1.Set();
        b.addAll([new A(1, 'a')]);
        expect(a.hashCode()).toEqual(b.hashCode());
    });
    it('should be different', function () {
        let a = new set_1.Set();
        a.addAll([new A(1, 'a')]);
        let b = new set_1.Set();
        b.addAll([new A(1, 'b')]);
        expect(a.hashCode()).not.toEqual(b.hashCode());
    });
});
describe('isEmpty', function () {
    it('should be true', function () {
        let set = new set_1.Set();
        expect(set.isEmpty()).toBe(true);
    });
    it('should be false', function () {
        let set = new set_1.Set();
        set.add(1);
        expect(set.isEmpty()).toBe(false);
    });
});
describe('remove null and undefined', function () {
    it('should throw NullReferenceException', function () {
        let set = new set_1.Set();
        expect(() => set.remove(null)).toThrow(new null_reference_exception_1.NullReferenceException('The element cannot be null nor undefined'));
        expect(() => set.remove(undefined)).toThrow(new null_reference_exception_1.NullReferenceException('The element cannot be null nor undefined'));
    });
});
describe('remove', function () {
    it('should return false', function () {
        let set = new set_1.Set();
        expect(set.remove(1)).toBe(false);
    });
    it('should return true', function () {
        let set = new set_1.Set();
        set.add(2);
        expect(set.remove(2)).toBe(true);
    });
    it('should empty a one element long set containing this element', function () {
        let set = new set_1.Set();
        set.add(2);
        set.remove(2);
        expect(set.size()).toEqual(0);
    });
});
describe('removeAll null and undefined', function () {
    it('should throw NullReferenceException', function () {
        let set = new set_1.Set();
        expect(() => set.removeAll(null)).toThrow(new null_reference_exception_1.NullReferenceException('The collection cannot be null nor undefined'));
        expect(() => set.removeAll(undefined)).toThrow(new null_reference_exception_1.NullReferenceException('The collection cannot be null nor undefined'));
    });
});
describe('removeAll', function () {
    it('should be true', function () {
        let set = new set_1.Set();
        set.addAll([1, 2, 3, 4, 5]);
        expect(set.removeAll([1, 2, 3])).toBe(true);
    });
    it('should be false', function () {
        let set = new set_1.Set();
        set.addAll([1, 2, 3, 4, 5]);
        expect(set.removeAll([6])).toBe(false);
    });
});
describe('retainAll null and undefined', function () {
    it('should throw NullReferenceException', function () {
        let set = new set_1.Set();
        expect(() => set.retainAll(null)).toThrow(new null_reference_exception_1.NullReferenceException('The collection cannot be null nor undefined'));
        expect(() => set.retainAll(undefined)).toThrow(new null_reference_exception_1.NullReferenceException('The collection cannot be null nor undefined'));
    });
});
describe('retainAll', function () {
    it('should be true', function () {
        let set = new set_1.Set();
        set.addAll([1, 2, 3, 4, 5]);
        expect(set.retainAll([1, 2, 3])).toBe(true);
    });
    it('should be false', function () {
        let set = new set_1.Set();
        set.addAll([1, 2, 3, 4, 5]);
        expect(set.retainAll([1, 2, 3, 4, 5])).toBe(false);
    });
});
//# sourceMappingURL=set.spec.js.map