"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class BNode {
    constructor(data) {
        this._data = data;
        this._left = undefined;
        this._right = undefined;
    }
    get data() {
        return this._data;
    }
    set data(data) {
        this._data = data;
    }
    get left() {
        return this._left;
    }
    set left(node) {
        this._left = node;
    }
    get right() {
        return this._right;
    }
    set right(node) {
        this._right = node;
    }
    hasLeft() {
        return this._left !== undefined && this._left !== null;
    }
    hasRight() {
        return this._right !== undefined && this._right !== null;
    }
    getMinValue() {
        if (this._left === undefined) {
            return this.data;
        }
        else {
            return this._left.getMinValue();
        }
    }
    add(item) {
        if (item < this.data) {
            if (this._left === undefined) {
                this._left = new BNode(item);
                return true;
            }
            else {
                return this._left.add(item);
            }
        }
        else if (item > this.data) {
            if (this._right === undefined) {
                this._right = new BNode(item);
                return true;
            }
            else {
                return this._right.add(item);
            }
        }
        else {
            return false;
        }
    }
    remove(parent, item) {
        if (item < this.data) {
            if (this._left !== undefined)
                return this._left.remove(this, item);
            else
                return false;
        }
        else if (item > this.data) {
            if (this._right !== undefined)
                return this._right.remove(this, item);
            else
                return false;
        }
        else {
            if (this._left !== undefined && this._right !== undefined) {
                this.data = this._right.getMinValue();
                this._right.remove(this, this.data);
            }
            else if (parent.left === this) {
                parent.left = (this._left !== undefined) ? this._left : this._right;
            }
            else if (parent.right === this) {
                parent.right = (this._left !== undefined) ? this._left : this._right;
            }
            return true;
        }
    }
}
exports.BNode = BNode;
//# sourceMappingURL=b-node.js.map