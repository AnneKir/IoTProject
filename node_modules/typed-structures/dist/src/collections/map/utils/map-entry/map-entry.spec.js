"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const map_entry_1 = require("./map-entry");
const flatten_1 = require("../../../../util/flatten");
describe('equals', function () {
    it('should be true', function () {
        let a = new map_entry_1.MapEntry(1, 2);
        let b = new map_entry_1.MapEntry(1, 2);
        expect(a.equals(b)).toBe(true);
    });
    it('should be false', function () {
        let a = new map_entry_1.MapEntry(1, 2);
        let b = new map_entry_1.MapEntry(2, 2);
        expect(a.equals(b)).toBe(false);
    });
    it('should be true', function () {
        let a = new map_entry_1.MapEntry(null, null);
        let b = new map_entry_1.MapEntry(null, null);
        expect(a.equals(b)).toBe(true);
    });
    it('should be false', function () {
        let a = new map_entry_1.MapEntry(null, 2);
        let b = new map_entry_1.MapEntry(2, null);
        expect(a.equals(b)).toBe(false);
    });
});
describe('getKey', function () {
    it('should retrieve key', function () {
        let mapEntry = new map_entry_1.MapEntry(1, 2);
        expect(mapEntry.getKey()).toEqual(1);
    });
});
describe('getValue', function () {
    it('should retrieve value', function () {
        let mapEntry = new map_entry_1.MapEntry(1, 2);
        expect(mapEntry.getValue()).toEqual(2);
    });
});
describe('hashCode of int', function () {
    it('should be the same', function () {
        let a = new map_entry_1.MapEntry(1, 2);
        let b = new map_entry_1.MapEntry(1, 2);
        expect(a.hashCode()).toEqual(b.hashCode());
    });
    it('should be different', function () {
        let a = new map_entry_1.MapEntry(1, 2);
        let b = new map_entry_1.MapEntry(1, 3);
        expect(a.hashCode()).not.toEqual(b.hashCode());
    });
});
describe('hashCode of object', function () {
    class B {
        constructor(a, b) {
            this.a = a;
            this.b = b;
        }
    }
    class D {
        constructor(a, b) {
            this.a = a;
            this.b = b;
        }
        hashCode() {
            let hash = 1;
            return Object.keys(this).reduce((accumulator, key) => {
                hash = hash * 17 + this[key];
                return hash;
            }, 0);
        }
    }
    class A {
        constructor(a, b) {
            this.a = a;
            this.b = b;
            this.c = new B(a, b);
            this.d = new D(a, b);
        }
        hashCode() {
            let hash = 1;
            return Object.keys(this).reduce((accumulator, key) => {
                hash = (typeof this[key] === 'object' ? typeof this[key].hashCode === 'function' ? this[key].hashCode() : flatten_1.flattenObject(this[key]) : this[key]);
                return hash;
            }, 0);
        }
    }
    class E {
        constructor(b) {
            this.a = b;
        }
    }
    it('should be the same', function () {
        let a = new map_entry_1.MapEntry(1, new E(new B(1, 'a')));
        let b = new map_entry_1.MapEntry(1, new E(new B(1, 'a')));
        expect(a.hashCode()).toEqual(b.hashCode());
    });
    it('should be different', function () {
        let a = new map_entry_1.MapEntry(1, new E(new B(1, 'a')));
        let b = new map_entry_1.MapEntry(1, new E(new B(1, 'b')));
        expect(a.hashCode()).not.toEqual(b.hashCode());
    });
    it('should be the same', function () {
        let a = new map_entry_1.MapEntry(1, new A(1, 'a'));
        let b = new map_entry_1.MapEntry(1, new A(1, 'a'));
        expect(a.hashCode()).toEqual(b.hashCode());
    });
    it('should be different', function () {
        let a = new map_entry_1.MapEntry(1, new A(1, 'a'));
        let b = new map_entry_1.MapEntry(1, new A(1, 'b'));
        expect(a.hashCode()).not.toEqual(b.hashCode());
    });
    it('should be the same', function () {
        let a = new map_entry_1.MapEntry(1, new B(1, 'a'));
        let b = new map_entry_1.MapEntry(1, new B(1, 'a'));
        expect(a.hashCode()).toEqual(b.hashCode());
    });
    it('should be different', function () {
        let a = new map_entry_1.MapEntry(1, new B(1, 'a'));
        let b = new map_entry_1.MapEntry(1, new B(1, 'b'));
        expect(a.hashCode()).not.toEqual(b.hashCode());
    });
    it('should be the same', function () {
        let a = new map_entry_1.MapEntry(new A(1, 'a'), new A(1, 'a'));
        let b = new map_entry_1.MapEntry(new A(1, 'a'), new A(1, 'a'));
        expect(a.hashCode()).toEqual(b.hashCode());
    });
    it('should be different', function () {
        let a = new map_entry_1.MapEntry(new A(1, 'a'), new A(1, 'a'));
        let b = new map_entry_1.MapEntry(new A(1, 'a'), new A(1, 'b'));
        expect(a.hashCode()).not.toEqual(b.hashCode());
    });
    it('should be the same', function () {
        let a = new map_entry_1.MapEntry(new B(1, 'a'), new A(1, 'a'));
        let b = new map_entry_1.MapEntry(new B(1, 'a'), new A(1, 'a'));
        expect(a.hashCode()).toEqual(b.hashCode());
    });
    it('should be different', function () {
        let a = new map_entry_1.MapEntry(new B(1, 'a'), new A(1, 'a'));
        let b = new map_entry_1.MapEntry(new B(1, 'a'), new A(1, 'b'));
        expect(a.hashCode()).not.toEqual(b.hashCode());
    });
    it('should be the same', function () {
        let a = new map_entry_1.MapEntry(new A(1, 'a'), 1);
        let b = new map_entry_1.MapEntry(new A(1, 'a'), 1);
        expect(a.hashCode()).toEqual(b.hashCode());
    });
    it('should be different', function () {
        let a = new map_entry_1.MapEntry(new A(1, 'a'), 1);
        let b = new map_entry_1.MapEntry(new A(1, 'a'), 2);
        expect(a.hashCode()).not.toEqual(b.hashCode());
    });
});
describe('setValue', function () {
    it('should set the value', function () {
        let mapEntry = new map_entry_1.MapEntry(1, 3);
        mapEntry.setValue(5);
        expect(mapEntry.getValue()).toEqual(5);
    });
    it('should return the old value', function () {
        let mapEntry = new map_entry_1.MapEntry(1, 3);
        expect(mapEntry.setValue(5)).toEqual(3);
    });
});
//# sourceMappingURL=map-entry.spec.js.map