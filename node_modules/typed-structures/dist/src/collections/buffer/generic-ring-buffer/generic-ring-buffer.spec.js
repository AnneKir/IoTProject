"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const generic_ring_buffer_1 = require("./generic-ring-buffer");
const illegal_argument_exception_1 = require("../../../exceptions/illegal-argument-exception");
describe('get/put', function () {
    it('should ', function () {
        let b = new generic_ring_buffer_1.GenericRingBuffer(4, 3, 0, 0, 0);
        b.put(1);
        b.put(2);
        expect(b.get()).toEqual(1);
    });
});
describe('isReadOnly', function () {
    it('should be false', function () {
        let b = new generic_ring_buffer_1.GenericRingBuffer(4, 3, 3, 0, -1);
        expect(b.isReadOnly()).toBe(false);
    });
    it('should be true', function () {
        let b = new generic_ring_buffer_1.GenericRingBuffer(4, 3, 3, 0, -1, true);
        expect(b.isReadOnly()).toBe(true);
    });
});
describe('readPosition', function () {
    it('should throw an exception', function () {
        let b = new generic_ring_buffer_1.GenericRingBuffer(4, 3, 3, 0, -1, true);
        expect(() => b.readPosition(-1)).toThrow(new illegal_argument_exception_1.IllegalArgumentException('New read position out of bound'));
        expect(() => b.readPosition(4)).toThrow(new illegal_argument_exception_1.IllegalArgumentException('New read position out of bound'));
    });
});
//# sourceMappingURL=generic-ring-buffer.spec.js.map