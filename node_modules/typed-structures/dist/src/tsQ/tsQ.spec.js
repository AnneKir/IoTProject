"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tsQ_1 = require("./tsQ");
const __1 = require("..");
const no_such_property_exception_1 = require("../exceptions/no-such-property-exception");
const no_decorator_exception_1 = require("../exceptions/no-decorator-exception");
let b = new __1.GenericRingBuffer(2, 1, 0, 0, 0);
b.put(1);
b.put(2);
let c = new __1.SinglyLinkedList();
c.push(1);
c.push(2);
let d = new __1.DoublyLinkedList();
d.push(1);
d.push(2);
let e = new __1.Map();
e.put(1, 1);
e.put(2, 2);
let f = new __1.Queue();
f.enqueue(1);
f.enqueue(2);
let g = new __1.Set();
g.add(1);
g.add(2);
let h = new __1.Stack();
h.stack(1);
h.stack(2);
class Person {
    constructor(id, name, surname, date, price) {
        this._id = id;
        this._name = name;
        this._surname = surname;
        this._subscription_date = date;
        this._price = price;
    }
    get id() {
        return this._id;
    }
    set id(value) {
        this._id = value;
    }
    get name() {
        return this._name;
    }
    set name(value) {
        this._name = value;
    }
    get subscription_date() {
        return this._subscription_date;
    }
    set subscription_date(value) {
        this._subscription_date = value;
    }
    get price() {
        return this._price;
    }
    set price(value) {
        this._price = value;
    }
    get surname() {
        return this._surname;
    }
    set surname(value) {
        this._surname = value;
    }
}
let Pa = new Person(1, 'A', 'A', new Date('0000-01-01'), 0);
let Pb = new Person(2, 'A', 'A', new Date('0000-01-02'), 0);
let Pc = new Person(3, 'A', 'A', new Date('0000-01-03'), 0);
let Pd = new Person(4, 'B', 'A', new Date('0000-01-01'), 0);
let Pe = new Person(5, 'B', 'A', new Date('0000-01-02'), 0);
let Pf = new Person(6, 'B', 'A', new Date('0000-01-03'), 0);
class SponsoredPerson extends Person {
    constructor(id, name, surname, date, price, sponsor) {
        super(id, name, surname, date, price);
        this._sponsor = sponsor;
    }
    get id() {
        return this._id;
    }
    set id(value) {
        this._id = value;
    }
    get name() {
        return this._name;
    }
    set name(value) {
        this._name = value;
    }
    get subscription_date() {
        return this._subscription_date;
    }
    set subscription_date(value) {
        this._subscription_date = value;
    }
    get price() {
        return this._price;
    }
    set price(value) {
        this._price = value;
    }
    get surname() {
        return this._surname;
    }
    set surname(value) {
        this._surname = value;
    }
    get sponsor() {
        return this._sponsor;
    }
    set sponsor(value) {
        this._sponsor = value;
    }
}
let Pg = new SponsoredPerson(1, 'Dubois', 'Simon', new Date('2012-02-23'), 27, Pa);
let Ph = new SponsoredPerson(2, 'Dubois', 'ChloÃ©', new Date('2012-02-16'), 98, Pb);
let Pi = new SponsoredPerson(3, 'Durant', 'Fabienne', new Date('2012-02-13'), 90, Pc);
let Pj = new SponsoredPerson(4, 'Dupond', 'Fabrice', new Date('2012-02-07'), 65, Pd);
let Pk = new SponsoredPerson(5, 'Durant', 'Maurice', new Date('2012-02-05'), 145, Pe);
let Pl = new SponsoredPerson(6, 'Durant', 'Maurice', new Date('2012-02-05'), 145, Pf);
describe('from', function () {
    it('should return an *identity* function for all types', function () {
        expect(tsQ_1.TsQ.from(b).fetch()).toEqual([1, 2]);
        expect(tsQ_1.TsQ.from(c).fetch()).toEqual([1, 2]);
        expect(tsQ_1.TsQ.from(d).fetch()).toEqual([1, 2]);
        expect(tsQ_1.TsQ.from(e).fetch()).toEqual([1, 2]);
        expect(tsQ_1.TsQ.from(f).fetch()).toEqual([1, 2]);
        expect(tsQ_1.TsQ.from(g).fetch()).toEqual([1, 2]);
        expect(tsQ_1.TsQ.from(h).fetch().reverse()).toEqual([1, 2]);
    });
});
describe('where', function () {
    it('should filters element equal to 1', function () {
        expect(tsQ_1.TsQ
            .from(b)
            .where(e => e < 2)
            .fetch()).toEqual([1]);
        expect(tsQ_1.TsQ
            .from(c)
            .where(e => e < 2)
            .fetch()).toEqual([1]);
        expect(tsQ_1.TsQ
            .from(d)
            .where(e => e < 2)
            .fetch()).toEqual([1]);
        expect(tsQ_1.TsQ
            .from(e)
            .where(e => e < 2)
            .fetch()).toEqual([1]);
        expect(tsQ_1.TsQ
            .from(f)
            .where(e => e < 2)
            .fetch()).toEqual([1]);
        expect(tsQ_1.TsQ
            .from(g)
            .where(e => e < 2)
            .fetch()).toEqual([1]);
        expect(tsQ_1.TsQ
            .from(h)
            .where(e => e < 2)
            .fetch()).toEqual([1]);
    });
});
describe('order_by', function () {
    it('should order embedded objects', function () {
        let q = new __1.Queue();
        q.enqueue(Pg);
        q.enqueue(Ph);
        q.enqueue(Pi);
        q.enqueue(Pj);
        q.enqueue(Pk);
        q.enqueue(Pl);
        expect(tsQ_1.TsQ
            .from(q)
            .order_by('name', 'desc')
            .order_by('subscription_date', 'desc')
            .order_by('sponsor', 'desc')
            .order_by('id')
            .fetch()
            .map((person) => person.id)).toEqual([3, 6, 5, 4, 2, 1]);
        expect(tsQ_1.TsQ
            .from(q)
            .order_by('id')
            .fetch()
            .map((person) => person.id)).toEqual([1, 2, 3, 4, 5, 6]);
    });
    it('should order embedded objects', function () {
        let q = new __1.Queue();
        q.enqueue(Pg);
        q.enqueue(Ph);
        q.enqueue(Pi);
        q.enqueue(Pj);
        q.enqueue(Pk);
        q.enqueue(Pl);
        expect(tsQ_1.TsQ
            .from(q)
            .order_by('sponsor', 'asc')
            .fetch()
            .map((person) => person.id)).toEqual([4, 5, 6, 1, 2, 3]);
    });
    it('should order in the right order of provided clauses', function () {
        let q = new __1.Queue();
        q.enqueue(Pa);
        q.enqueue(Pb);
        q.enqueue(Pc);
        q.enqueue(Pd);
        q.enqueue(Pe);
        q.enqueue(Pf);
        expect(tsQ_1.TsQ
            .from(q)
            .order_by('name')
            .order_by('subscription_date')
            .fetch()).toEqual([Pc, Pb, Pa, Pf, Pe, Pd]);
    });
});
describe('select', function () {
    it('should filter with getter name', function () {
        let q = new __1.Queue();
        q.enqueue(Pa);
        q.enqueue(Pb);
        q.enqueue(Pc);
        q.enqueue(Pd);
        q.enqueue(Pe);
        q.enqueue(Pf);
        let res = [];
        tsQ_1.TsQ
            .from(q)
            .select('name')
            .fetch()
            .forEach((p) => {
            res.push(p.name);
        });
        expect(res).toEqual(['A', 'A', 'A', 'B', 'B', 'B']);
    });
    it('should throw an exception if the field does not exist', function () {
        let q = new __1.Queue();
        q.enqueue(Pa);
        q.enqueue(Pb);
        q.enqueue(Pc);
        q.enqueue(Pd);
        q.enqueue(Pe);
        q.enqueue(Pf);
        expect(() => tsQ_1.TsQ
            .from(q)
            .select('test')
            .fetch()
            .map((p) => p.name)).toThrow(new no_such_property_exception_1.NoSuchPropertyException('The specified property "test" does not exist in the data provided collection'));
    });
    it('should handle key\'ed classes', function () {
        let q = new __1.GenericRingBuffer(6, 5, 0, 0, 0);
        q.put(Pa);
        q.put(Pb);
        q.put(Pc);
        q.put(Pd);
        q.put(Pe);
        q.put(Pf);
        expect(tsQ_1.TsQ
            .from(q)
            .select('name')
            .fetch()
            .map((p) => p.name)).toEqual(['A', 'A', 'A', 'B', 'B', 'B']);
    });
});
describe('group_by', function () {
    it('should group', function () {
        let q = new __1.GenericRingBuffer(6, 5, 0, 0, 0);
        q.put(Pa);
        q.put(Pb);
        q.put(Pc);
        q.put(Pd);
        q.put(Pe);
        q.put(Pf);
        expect(tsQ_1.TsQ
            .from(q)
            .group_by('name')
            .fetch()[0]).toEqual([Pa, Pb, Pc]);
        expect(tsQ_1.TsQ
            .from(q)
            .group_by('name')
            .fetch()[1]).toEqual([Pd, Pe, Pf]);
    });
});
describe('no decorator', function () {
    it('should throw an exception', function () {
        class NoDecoratorStack {
            constructor() {
                this._items = new __1.SinglyLinkedList();
            }
            length() {
                return this._items.length();
            }
            stack(item) {
                this._items.unshift(item);
            }
            unstack() {
                return this._items.shift();
            }
            peek() {
                return this._items.peek();
            }
            empty() {
                return this._items.empty();
            }
            toArray() {
                return this._items.toArray();
            }
        }
        let nds = new NoDecoratorStack();
        nds.stack(Pa);
        expect(() => tsQ_1.TsQ.from(nds).fetch()).toThrow(new no_decorator_exception_1.NoDecoratorException('TsQ decorator is missing from class NoDecoratorStack'));
    });
});
//# sourceMappingURL=tsQ.spec.js.map