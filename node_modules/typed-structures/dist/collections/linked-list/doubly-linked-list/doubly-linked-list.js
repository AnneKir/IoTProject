"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
const __1 = require("../../..");
const TsQDecorator_1 = require("../../../tsQ/decorator/TsQDecorator");
class DoublyLinkedList {
    constructor() {
        this._size = 0;
    }
    length() {
        return this._size;
    }
    empty() {
        return this.length() === 0;
    }
    unshift(item) {
        if (item === undefined) {
            return 0;
        }
        if (this.empty()) {
            this._head = this.create(item);
            this._tail = this._head;
        }
        else {
            const node = this.create(item);
            node.next = this._head;
            this._head.previous = node;
            this._head = node;
        }
        ++this._size;
        return this._size;
    }
    shift() {
        if (this.empty()) {
            return undefined;
        }
        if (this.length() === 1) {
            const result = this._head;
            this._head = undefined;
            --this._size;
            return result.data;
        }
        else {
            let result = this._head;
            this._head = this._head.next;
            this._head.previous = undefined;
            --this._size;
            return result.data;
        }
    }
    push(item) {
        if (this.empty()) {
            this._head = this._tail = this.create(item);
        }
        else {
            let current = this.create(item);
            this._tail.next = current;
            current.previous = this._tail;
            this._tail = current;
        }
        ++this._size;
    }
    pop() {
        if (this.empty()) {
            return undefined;
        }
        if (this.length() === 1) {
            let current = this._head;
            this._head = this._tail = undefined;
            --this._size;
            return current.data;
        }
        else {
            let current = this._tail;
            this._tail = this._tail.previous;
            this._tail.next = undefined;
            --this._size;
            return current.data;
        }
    }
    remove(item) {
        if (this.empty())
            return undefined;
        else if (this.length() === 1) {
            let current = this._head;
            this._head = this._tail = undefined;
            --this._size;
            return current.data;
        }
        else {
            let current = this._head;
            if (this._head.data === item) {
                this._head = this._head.next;
                return current.data;
            }
            let previous;
            while (current.next && current.data !== item) {
                previous = current;
                current = current.next;
            }
            previous.next = current.next;
            --this._size;
            return current.data;
        }
    }
    forEach(callback) {
        let current = this._head;
        let index = 0;
        while (current) {
            callback.call(current, current, index++, this);
            current = current.next;
        }
    }
    filter(callback) {
        let result = new DoublyLinkedList();
        this.forEach((item, index) => {
            if (callback.call(item.data, item.data, index, this)) {
                result.push(item.data);
            }
        });
        return result;
    }
    includes(item) {
        return this.filter((element) => element === item).length() > 0;
    }
    indexOf(item) {
        let index = 0;
        let current = this._head;
        while (current) {
            if (current.data === item) {
                return index;
            }
            current = current.next;
            ++index;
        }
        return -1;
    }
    create(item) {
        return new __1.Node(item);
    }
    peek() {
        return this._head.data;
    }
    back() {
        return this._tail.data;
    }
    clear() {
        this._head = this._tail = undefined;
        this._size = 0;
    }
    contains(item) {
        if (!this._head)
            return false;
        let current = this._head;
        while (current) {
            if (current.data === item)
                return true;
            current = current.next;
        }
        return false;
    }
    find(item) {
        let current = this._head;
        while (current) {
            if (current.data === item)
                return current;
            current = current.next;
        }
        return undefined;
    }
    toArray() {
        let res = [];
        this.forEach((item) => res.push(item.data));
        return res;
    }
}
__decorate([
    TsQDecorator_1.TsQ()
], DoublyLinkedList.prototype, "toArray", null);
exports.DoublyLinkedList = DoublyLinkedList;
//# sourceMappingURL=doubly-linked-list.js.map