import { IMap } from '../..';
import { IBiFunction } from '../..';
import { IFunction } from '../..';
import { ISet } from '../..';
import { IMapEntry } from '../..';
export declare class Map<K, V> implements IMap<K, V> {
    private _entries;
    constructor();
    clear(): void;
    compute(key: K, remappingFunction: IBiFunction<K, V, V>): V;
    computeIfAbsent(key: K, mappingFunction: IFunction<K, V>): V;
    computeIfPresent(key: K, v: IBiFunction<K, V, V>): V;
    containsKey(key: any): boolean;
    containsValue(value: any): boolean;
    entrySet(): ISet<IMapEntry<K, V>>;
    equals(m: IMap<K, V>): boolean;
    forEach(callback: IFunction<IMapEntry<K, V>, IMapEntry<K, V>>): void;
    get(key: K): V;
    getOrDefault(key: K, defaultValue: V): V;
    hashCode(): number;
    isEmpty(): boolean;
    keySet(): ISet<K>;
    merge(key: K, value: V, remappingFunction: IBiFunction<V, V, V>): V;
    put(key: K, value: V): V;
    putAll(m: IMap<K, V>): void;
    putIfAbsent(key: K, value: V): V;
    remove(key: K): V;
    remove(key: K, value: V): boolean;
    replace(key: K, value: V): V;
    replace(key: K, oldValue: V, newValue: V): boolean;
    replaceAll(f: IBiFunction<K, V, V>): void;
    size(): number;
    values(): V[];
}
