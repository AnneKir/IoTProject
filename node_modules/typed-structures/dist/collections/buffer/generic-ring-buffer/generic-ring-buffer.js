"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
const __1 = require("../../..");
const __2 = require("../../..");
const TsQDecorator_1 = require("../../../tsQ/decorator/TsQDecorator");
class GenericRingBuffer extends __1.Buffer {
    constructor(capacity, limit, position, readPosition, mark, readonly = false) {
        super(capacity, limit, position, mark);
        this._readPosition = readPosition;
        this._buf = new Array(capacity);
        this._readonly = readonly;
    }
    get() {
        let position = (this.readPosition() + 1) % this.capacity();
        this.readPosition(position);
        return this._buf[position - 1];
    }
    put(element) {
        this._buf[this.position()] = element;
        this.position((this.position() + 1) % this.capacity());
        return this;
    }
    isReadOnly() {
        return this._readonly;
    }
    readPosition(newPosition) {
        if (newPosition === undefined)
            return this._readPosition;
        if ((newPosition < 0) || (newPosition > this.limit()))
            throw new __2.IllegalArgumentException('New read position out of bound');
        this._readPosition = newPosition;
        return this;
    }
    toArray() {
        return this._buf;
    }
}
__decorate([
    TsQDecorator_1.TsQ()
], GenericRingBuffer.prototype, "toArray", null);
exports.GenericRingBuffer = GenericRingBuffer;
//# sourceMappingURL=generic-ring-buffer.js.map